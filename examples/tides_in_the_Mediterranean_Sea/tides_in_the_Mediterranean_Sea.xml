<?xml version='1.0' encoding='UTF-8'?>
<testproblem>
  <name>tides in the Mediterranean Sea</name>
  <owner userid="ajm02"/>
  <tags>flml</tags>
  <problem_definition length="vlong" nprocs="48">
    <command_line>mpiexec flredecomp -i 1 -o 48 -l med med_flredecomp &amp;&amp;
mpiexec fluidity -l med_flredecomp.flml</command_line>
  </problem_definition>
   <variables>
    <variable name="final_time" language="python">
from fluidity_tools import stat_parser
s = stat_parser("med.stat")
final_time = s["ElapsedTime"]["value"][-1]
    </variable>
    <variable name="M2RMS" language="python">
import vtktools
import vtk
import math
import sys
import numpy

#Read in Fluidity results and change point coordinates to longitude-latitude.
ugrid = u=vtktools.vtu("med_10.pvtu")
x="math.atan2(y,x)*57.2957795"
y="math.asin(z/math.sqrt(x*x+y*y+z*z))*57.2957795"
z="math.sqrt(x*x+y*y+z*z)-6.37101e+06"
ugrid.ApplyProjection(x, y, z)
ugrid.Write(filename="med_10_lon_lat.vtu")
u=vtktools.vtu("med_10_lon_lat.vtu")

#Read in tidal gauge data.
tidalGauge_Data = numpy.loadtxt('Med-tidalGauge.csv', delimiter=',')
tidalGauge_Coordinates = tidalGauge_Data[:,0:3]
tidalGauge_M2amp = tidalGauge_Data[:,3]

#Probe simulation results to extract data at the coordinates of the tidal gauges.
fluidity_M2amp = u.ProbeData(tidalGauge_Coordinates, "M2amp")
fluidity_M2amp *= 100.0

#Calculate RMS difference.
ampdiff = fluidity_M2amp.flatten() - tidalGauge_M2amp
M2RMS = numpy.sqrt(numpy.sum(numpy.power(ampdiff,2))/len(ampdiff))
   </variable>
    <variable name="S2RMS" language="python">
import vtktools
import vtk
import math
import sys
import numpy 

#Read in Fluidity results and change point coordinates to longitude-latitude.
ugrid = u=vtktools.vtu("med_10.pvtu")
x="math.atan2(y,x)*57.2957795"
y="math.asin(z/math.sqrt(x*x+y*y+z*z))*57.2957795"
z="math.sqrt(x*x+y*y+z*z)-6.37101e+06"
ugrid.ApplyProjection(x, y, z)
ugrid.Write(filename="med_10_lon_lat.vtu")
u=vtktools.vtu("med_10_lon_lat.vtu")

#Read in tidal gauge data.
tidalGauge_Data = numpy.loadtxt('Med-tidalGauge.csv', delimiter=',')
tidalGauge_Coordinates = tidalGauge_Data[:,0:3]
tidalGauge_S2amp = tidalGauge_Data[:,4]

#Probe simulation results to extract data at the coordinates of the tidal gauges.
fluidity_S2amp = u.ProbeData(tidalGauge_Coordinates, "S2amp")
fluidity_S2amp *= 100.0

#Calculate RMS difference.
ampdiff = fluidity_S2amp.flatten() - tidalGauge_S2amp
S2RMS = numpy.sqrt(numpy.sum(numpy.power(ampdiff,2))/len(ampdiff))
   </variable>
    <variable name="K1RMS" language="python">
import vtktools
import vtk
import math
import sys
import numpy

#Read in Fluidity results and change point coordinates to longitude-latitude.
ugrid = u=vtktools.vtu("med_10.pvtu")
x="math.atan2(y,x)*57.2957795"
y="math.asin(z/math.sqrt(x*x+y*y+z*z))*57.2957795"
z="math.sqrt(x*x+y*y+z*z)-6.37101e+06"
ugrid.ApplyProjection(x, y, z)
ugrid.Write(filename="med_10_lon_lat.vtu")
u=vtktools.vtu("med_10_lon_lat.vtu")

#Read in tidal gauge data.
tidalGauge_Data = numpy.loadtxt('Med-tidalGauge.csv', delimiter=',')
tidalGauge_Coordinates = tidalGauge_Data[:,0:3]
tidalGauge_K1amp = tidalGauge_Data[:,5]

#Probe simulation results to extract data at the coordinates of the tidal gauges.
fluidity_K1amp = u.ProbeData(tidalGauge_Coordinates, "K1amp")
fluidity_K1amp *= 100.0

#Calculate RMS difference.
ampdiff = fluidity_K1amp.flatten() - tidalGauge_K1amp
K1RMS = numpy.sqrt(numpy.sum(numpy.power(ampdiff,2))/len(ampdiff))
   </variable>
    <variable name="O1RMS" language="python">
import vtktools
import vtk
import math
import sys
import numpy

#Read in Fluidity results and change point coordinates to longitude-latitude.
ugrid = u=vtktools.vtu("med_10.pvtu")
x="math.atan2(y,x)*57.2957795"
y="math.asin(z/math.sqrt(x*x+y*y+z*z))*57.2957795"
z="math.sqrt(x*x+y*y+z*z)-6.37101e+06"
ugrid.ApplyProjection(x, y, z)
ugrid.Write(filename="med_10_lon_lat.vtu")
u=vtktools.vtu("med_10_lon_lat.vtu")

#Read in tidal gauge data.
tidalGauge_Data = numpy.loadtxt('Med-tidalGauge.csv', delimiter=',')
tidalGauge_Coordinates = tidalGauge_Data[:,0:3]
tidalGauge_O1amp = tidalGauge_Data[:,6]

#Probe simulation results to extract data at the coordinates of the tidal gauges.
fluidity_O1amp = u.ProbeData(tidalGauge_Coordinates, "O1amp")
fluidity_O1amp *= 100.0

#Calculate RMS difference.
ampdiff = fluidity_O1amp.flatten() - tidalGauge_O1amp
O1RMS = numpy.sqrt(numpy.sum(numpy.power(ampdiff,2))/len(ampdiff))
    </variable>
 </variables>    
 <pass_tests> 
    <test name="check that has run long enough" language="python">
assert abs(final_time-720000) &gt; -10
    </test>
    <test name="check RMS difference for M2 amp not too big" language="python">
print(M2RMS)
assert(M2RMS &lt; 5.0)
</test>
    <test name="check RMS difference for M2 amp not 0" language="python">
print(M2RMS)
assert(M2RMS &gt; 0.1)
</test>
    <test name="check RMS difference for S2 amp not too big" language="python">
print(S2RMS)
assert(S2RMS &lt; 3.0)
</test>
    <test name="check RMS difference for S2 amp not 0" language="python">
print(S2RMS)
assert(S2RMS &gt; 0.1)
</test>
    <test name="check RMS difference for K1 amp not too big" language="python">
print(K1RMS)
assert(K1RMS &lt; 2.5)
</test>
    <test name="check RMS difference for K1 amp not 0" language="python">
print(K1RMS)
assert(K1RMS &gt; 0.1)
</test>   
    <test name="check RMS difference for O1 amp not too big" language="python">
print(O1RMS)
assert(O1RMS &lt; 2.5)
</test>
    <test name="check RMS difference for O1 amp not 0" language="python">
print(O1RMS)
assert(O1RMS &gt; 0.1)
</test> 
 </pass_tests>
 <warn_tests>
 </warn_tests>
</testproblem>
