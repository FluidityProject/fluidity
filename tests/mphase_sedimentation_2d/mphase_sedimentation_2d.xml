<?xml version='1.0' encoding='UTF-8'?>
<testproblem>
   
  <name>mphase_sedimentation_2d</name>
  <owner userid="ctj10"/>
  <tags>flml</tags>
  
  <problem_definition length="medium" nprocs="1">
    <command_line>make run</command_line>
    <!-- 2D multi-phase test case to check that the volume fraction fields are behaving properly. -->
   
    <!-- The test case considers a square 2D domain filled with two incompressible fluids starting with a zero velocity ﬁeld. -->
    <!-- One liquid is denser than the other (\rho_1 = 1.0, \rho_2 = 1.1) and the volume fraction of each phase is initially set to 0.5 everywhere. -->
    <!-- The heavier liquid should sink beneath the lighter one as time progresses due to the density difference, causing the volume fraction -->
    <!-- of the heavier liquid to tend to 1.0 and 0.0 in the lower and upper half of the box respectively. -->
  </problem_definition>
  
  <variables>
    <variable name="f1_vfrac_max" language="python">
from fluidity_tools import stat_parser
s = stat_parser("mphase_sedimentation_2d.stat")
f1_vfrac_max = s["Fluid1"]["PhaseVolumeFraction"]["max"][-1]
    </variable>
    
    <variable name="f1_vfrac_min" language="python">
from fluidity_tools import stat_parser
s = stat_parser("mphase_sedimentation_2d.stat")
f1_vfrac_min = s["Fluid1"]["PhaseVolumeFraction"]["min"][-1]
    </variable>
    
    <variable name="f2_vfrac_max" language="python">
from fluidity_tools import stat_parser
s = stat_parser("mphase_sedimentation_2d.stat")
f2_vfrac_max = s["Fluid2"]["PhaseVolumeFraction"]["max"][-1]
    </variable>
    
    <variable name="f2_vfrac_min" language="python">
from fluidity_tools import stat_parser
s = stat_parser("mphase_sedimentation_2d.stat")
f2_vfrac_min = s["Fluid2"]["PhaseVolumeFraction"]["min"][-1]
    </variable>
    
    <variable name="f1_vfrac_integral" language="python">
from fluidity_tools import stat_parser
s = stat_parser("mphase_sedimentation_2d.stat")
f1_vfrac_integral = s["Fluid1"]["PhaseVolumeFraction"]["integral"][-1]
    </variable>
    
    <variable name="f2_vfrac_integral" language="python">
from fluidity_tools import stat_parser
s = stat_parser("mphase_sedimentation_2d.stat")
f2_vfrac_integral = s["Fluid2"]["PhaseVolumeFraction"]["integral"][-1]
    </variable>
    
    <variable name="divergence" language="python">
from fluidity_tools import stat_parser
s = stat_parser("mphase_sedimentation_2d.stat")
divergence = s["Fluid1"]["SumVelocityDivergence"]["max"][-1]
    </variable>
    
    <variable name="f1_vfrac" language="python">
import vtktools

file = vtktools.vtu('mphase_sedimentation_2d_601.vtu')
file.GetFieldNames()
f1_vfrac = file.GetScalarField('Fluid1::PhaseVolumeFraction')
    </variable>
    
    <variable name="f2_vfrac" language="python">
import vtktools

file = vtktools.vtu('mphase_sedimentation_2d_601.vtu')
file.GetFieldNames()
f2_vfrac = file.GetScalarField('Fluid2::PhaseVolumeFraction')
    </variable>
    
    <!-- Using y co-ordinates only here -->
    <variable name="positions" language="python">
import vtktools

file = vtktools.vtu('mphase_sedimentation_2d_601.vtu')
file.GetFieldNames()
p = file.GetLocations()
positions = p[:,1]
    </variable>
    
    <variable name="solvers_converged" language="python">
import os
files = os.listdir("./")
solvers_converged = not "matrixdump" in files and not "matrixdump.info" in files
    </variable>
    
  </variables>
    
  <pass_tests>
    <test name="Fluid 1 has max(vfrac) in [0.9, 1.0]" language="python">
assert abs(f1_vfrac_max - 1.0) &lt; 1e-1
    </test>
    <test name="Fluid 1 has min(vfrac) in [0.0, 0.1]" language="python">
assert abs(f1_vfrac_min) &lt; 1e-1
    </test>
    <test name="Fluid 2 has max(vfrac) in [0.9, 1.0]" language="python">
assert abs(f2_vfrac_max - 1.0) &lt; 1e-1
    </test>
    <test name="Fluid 2 has min(vfrac) in [0.0, 0.1]" language="python">
assert abs(f2_vfrac_min) &lt; 1e-1
    </test>
    
    <test name="Fluid 1 has vfrac in [0.9, 1.0] in lower third of domain" language="python">
nnodes = len(f1_vfrac)

vals = []
for i in range(nnodes):
    if(positions[i] &lt; (1.0/3.0)):
        assert abs(f1_vfrac[i] - 0.95) &lt; 0.05
        vals.append(f1_vfrac[i])

print("Max vfrac in lower third of domain = ", max(vals))
print("Min vfrac in lower third of domain = ", min(vals))

assert max(vals) &lt; 1.0
assert min(vals) &gt; 0.9
</test>
    <test name="Fluid 1 has vfrac in [0.05, 0.95] in middle third of domain" language="python">
nnodes = len(f1_vfrac)

vals = []
for i in range(nnodes):
    if((positions[i] &lt; (2.0/3.0)) and (positions[i] &gt; (1.0/3.0))):
        assert abs(f1_vfrac[i] - 0.5) &lt; 0.45
        vals.append(f1_vfrac[i])

print("Max vfrac in middle third of domain = ", max(vals))
print("Min vfrac in middle third of domain = ", min(vals))

assert max(vals) &lt; 0.95
assert min(vals) &gt; 0.05
</test>
    <test name="Fluid 1 has vfrac in [0.0, 0.12] in upper third of domain" language="python">
nnodes = len(f1_vfrac)

vals = []
for i in range(nnodes):
    if((positions[i] &lt; 1.0) and (positions[i] &gt; (2.0/3.0))):
        assert abs(f1_vfrac[i] - 0.6) &lt; 0.6
        vals.append(f1_vfrac[i])

print("Max vfrac in upper third of domain = ", max(vals))
print("Min vfrac in upper third of domain = ", min(vals))

assert max(vals) &lt; 0.12
assert min(vals) &gt; 0.0
</test>
    
    <test name="SumVelocityDivergence is less than 1e-9" language="python">
assert abs(divergence) &lt; 1e-9
    </test>
    
    <test name="PhaseVolumeFraction for Fluid 1 is conserved" language="python">
assert abs(f1_vfrac_integral - 0.5) &lt; 1e-6
    </test>
    <test name="PhaseVolumeFraction for Fluid 2 is conserved" language="python">
assert abs(f2_vfrac_integral - 0.5) &lt; 1e-6
    </test>
    
    <test name="Solvers converged" language="python">
assert(solvers_converged)
    </test>
  </pass_tests>
  
  <warn_tests>
  </warn_tests>
  
</testproblem>
