<?xml version='1.0' encoding='utf-8'?>
<fluidity_options>
  <simulation_name>
    <string_value lines="1">conical_island</string_value>
  </simulation_name>
  <problem_type>
    <string_value lines="1">multimaterial</string_value>
  </problem_type>
  <geometry>
    <dimension>
      <integer_value rank="0">3</integer_value>
    </dimension>
    <mesh name="CoordinateMesh">
      <from_mesh>
        <mesh name="InputMesh"/>
        <extrude>
          <regions name="72Bottom">
            <region_ids>
              <integer_value shape="1" rank="1">72</integer_value>
            </region_ids>
            <bottom_depth>
              <constant>
                <real_value rank="0">3</real_value>
              </constant>
            </bottom_depth>
            <sizing_function>
              <constant>
                <real_value rank="0">0.01</real_value>
              </constant>
            </sizing_function>
            <top_surface_id>
              <integer_value rank="0">720</integer_value>
            </top_surface_id>
            <bottom_surface_id>
              <integer_value rank="0">721</integer_value>
            </bottom_surface_id>
          </regions>
          <regions name="73IslandSideLeft">
            <region_ids>
              <integer_value shape="1" rank="1">73</integer_value>
            </region_ids>
            <bottom_depth>
              <python>
                <string_value lines="20" type="code" language="python">def val(X,t):
   from math import sin, cos, pi
   # starting angle of wedge from negative y axis
   theta = 0.0
   # angular width of wedge segment  
   alpha = pi/14.
   # parameters of lines bounding segment
   m = (-cos(theta+alpha)+cos(theta))/(sin(theta+alpha)-sin(theta))
   c1 = -4.45*(cos(theta)+m*sin(theta))
   c2 = -0.85*(cos(theta)+m*sin(theta))
   # parameters of line along x-axis
   mx = (1.2*m)/(c2-c1)
   cx = 3 + mx*c1/m
   # parameters of line down y-axis
   my = (1.2)/(c1-c2)
   cy = 3 - my*c1 # should equal cx
   z = mx*X[0] + my*X[1] + cy
   return z</string_value>
              </python>
            </bottom_depth>
            <sizing_function>
              <constant>
                <real_value rank="0">0.01</real_value>
              </constant>
            </sizing_function>
            <top_surface_id>
              <integer_value rank="0">730</integer_value>
            </top_surface_id>
            <bottom_surface_id>
              <integer_value rank="0">731</integer_value>
            </bottom_surface_id>
          </regions>
          <regions name="74IslandSideSecondLeft">
            <region_ids>
              <integer_value shape="1" rank="1">74</integer_value>
            </region_ids>
            <bottom_depth>
              <python>
                <string_value lines="20" type="code" language="python">def val(X,t):
   from math import sin, cos, pi
   # starting angle of wedge from negative y axis
   theta = pi/14.
   # angular width of wedge segment  
   alpha = pi/14.
   # parameters of lines bounding segment
   m = (-cos(theta+alpha)+cos(theta))/(sin(theta+alpha)-sin(theta))
   c1 = -4.45*(cos(theta)+m*sin(theta))
   c2 = -0.85*(cos(theta)+m*sin(theta))
   # parameters of line along x-axis
   mx = (1.2*m)/(c2-c1)
   cx = 3 + mx*c1/m
   # paramters of line down y-axis
   my = (1.2)/(c1-c2)
   cy = 3 - my*c1 # should equal cx
   z = mx*X[0] + my*X[1] + cy
   return z</string_value>
              </python>
            </bottom_depth>
            <sizing_function>
              <constant>
                <real_value rank="0">0.01</real_value>
              </constant>
            </sizing_function>
            <top_surface_id>
              <integer_value rank="0">740</integer_value>
            </top_surface_id>
            <bottom_surface_id>
              <integer_value rank="0">741</integer_value>
            </bottom_surface_id>
          </regions>
          <regions name="75IslandSideThirdLeft">
            <region_ids>
              <integer_value shape="1" rank="1">75</integer_value>
            </region_ids>
            <bottom_depth>
              <python>
                <string_value lines="20" type="code" language="python">def val(X,t):
   from math import sin, cos, pi
   # starting angle of wedge from negative y axis
   theta = pi*2/14.
   # angular width of wedge segment  
   alpha = pi/14.
   # parameters of lines bounding segment
   m = (-cos(theta+alpha)+cos(theta))/(sin(theta+alpha)-sin(theta))
   c1 = -4.45*(cos(theta)+m*sin(theta))
   c2 = -0.85*(cos(theta)+m*sin(theta))
   # parameters of line along x-axis
   mx = (1.2*m)/(c2-c1)
   cx = 3 + mx*c1/m
   # paramters of line down y-axis
   my = (1.2)/(c1-c2)
   cy = 3 - my*c1 # should equal cx
   z = mx*X[0] + my*X[1] + cy
   return z</string_value>
              </python>
            </bottom_depth>
            <sizing_function>
              <constant>
                <real_value rank="0">0.01</real_value>
              </constant>
            </sizing_function>
            <top_surface_id>
              <integer_value rank="0">750</integer_value>
            </top_surface_id>
            <bottom_surface_id>
              <integer_value rank="0">751</integer_value>
            </bottom_surface_id>
          </regions>
          <regions name="76IslandSideFourthLeft">
            <region_ids>
              <integer_value shape="1" rank="1">76</integer_value>
            </region_ids>
            <bottom_depth>
              <python>
                <string_value lines="20" type="code" language="python">def val(X,t):
   from math import sin, cos, pi
   # starting angle of wedge from negative y axis
   theta = pi*3/14.
   # angular width of wedge segment  
   alpha = pi/14.
   # parameters of lines bounding segment
   m = (-cos(theta+alpha)+cos(theta))/(sin(theta+alpha)-sin(theta))
   c1 = -4.45*(cos(theta)+m*sin(theta))
   c2 = -0.85*(cos(theta)+m*sin(theta))
   # parameters of line along x-axis
   mx = (1.2*m)/(c2-c1)
   cx = 3 + mx*c1/m
   # paramters of line down y-axis
   my = (1.2)/(c1-c2)
   cy = 3 - my*c1 # should equal cx
   z = mx*X[0] + my*X[1] + cy
   return z</string_value>
              </python>
            </bottom_depth>
            <sizing_function>
              <constant>
                <real_value rank="0">0.01</real_value>
              </constant>
            </sizing_function>
            <top_surface_id>
              <integer_value rank="0">760</integer_value>
            </top_surface_id>
            <bottom_surface_id>
              <integer_value rank="0">761</integer_value>
            </bottom_surface_id>
          </regions>
          <regions name="77IslandSideFifthLeftThin">
            <region_ids>
              <integer_value shape="1" rank="1">77</integer_value>
            </region_ids>
            <bottom_depth>
              <python>
                <string_value lines="20" type="code" language="python">def val(X,t):
   from math import sin, cos, pi
   # starting angle of wedge from negative y axis
   theta = pi*4/14.
   # angular width of wedge segment  
   alpha = pi/13.
   # parameters of lines bounding segment
   m = (-cos(theta+alpha)+cos(theta))/(sin(theta+alpha)-sin(theta))
   c1 = -4.45*(cos(theta)+m*sin(theta))
   c2 = -0.85*(cos(theta)+m*sin(theta))
   # parameters of line along x-axis
   mx = (1.2*m)/(c2-c1)
   cx = 3 + mx*c1/m
   # paramters of line down y-axis
   my = (1.2)/(c1-c2)
   cy = 3 - my*c1 # should equal cx
   z = mx*X[0] + my*X[1] + cy
   return z</string_value>
              </python>
            </bottom_depth>
            <sizing_function>
              <constant>
                <real_value rank="0">0.01</real_value>
              </constant>
            </sizing_function>
            <top_surface_id>
              <integer_value rank="0">770</integer_value>
            </top_surface_id>
            <bottom_surface_id>
              <integer_value rank="0">771</integer_value>
            </bottom_surface_id>
          </regions>
          <regions name="78LowerTriangle">
            <region_ids>
              <integer_value shape="1" rank="1">78</integer_value>
            </region_ids>
            <bottom_depth>
              <python>
                <string_value lines="20" type="code" language="python">def val(X,t):
   from math import sin, cos, pi
   # some paramters from the geo file (to ridiculous prescision)
   lr = 0.81240384046359604
   x80 = 3.4537158056565742
   y80 = -1.0157987663695807
   # the angle from the negative y axis of the first edge
   theta = 4*pi/14 + pi/13
   m1 = (y80-0.25+4.45*cos(theta))/(lr+x80-4.45*sin(theta))
   c1 = -4.45*cos(theta) - m1*4.45*sin(theta)
   c1i = -0.85*cos(theta) - m1*0.85*sin(theta)
   mx = -1.2*m1/(c1-c1i)
   cx = 3 + mx*c1/m1
   my = 1.2/(c1-c1i)
   cy = 3 - my*c1
   z = mx*X[0] + my*X[1] +cx
   return z</string_value>
              </python>
            </bottom_depth>
            <sizing_function>
              <constant>
                <real_value rank="0">0.01</real_value>
              </constant>
            </sizing_function>
            <top_surface_id>
              <integer_value rank="0">780</integer_value>
            </top_surface_id>
            <bottom_surface_id>
              <integer_value rank="0">781</integer_value>
            </bottom_surface_id>
          </regions>
          <regions name="79MiddleTriangle">
            <region_ids>
              <integer_value shape="1" rank="1">79</integer_value>
            </region_ids>
            <bottom_depth>
              <python>
                <string_value lines="20" type="code" language="python">def val(X,t):
   from math import sin, cos, pi
   # some paramters from the geo file (to ridiculous prescision)
   lr = 0.81240384046359604
   x80 = 3.4537158056565742
   y80 = -1.0157987663695807
   # the angle from the negative y axis of the first edge
   theta = 4*pi/14 + pi/13
   m2 = (-0.25 + 0.85*cos(theta))/(lr-0.85*sin(theta))
   c2 = -0.25 - m2*lr
   c2i = y80 - 0.25 - m2*(lr+x80)
   mx = -1.2*m2/(c2i-c2)
   cx = 3 + mx*c2i/m2
   my = 1.2/(c2i-c2)
   cy = 3 - my*c2i
   z = mx*X[0] + my*X[1] +cx
   return z</string_value>
              </python>
            </bottom_depth>
            <sizing_function>
              <constant>
                <real_value rank="0">0.01</real_value>
              </constant>
            </sizing_function>
            <top_surface_id>
              <integer_value rank="0">790</integer_value>
            </top_surface_id>
            <bottom_surface_id>
              <integer_value rank="0">791</integer_value>
            </bottom_surface_id>
          </regions>
          <regions name="80TopTriangle">
            <region_ids>
              <integer_value shape="1" rank="1">80</integer_value>
            </region_ids>
            <bottom_depth>
              <python>
                <string_value lines="20" type="code" language="python">def val(X,t):
   from math import sin, cos, pi
   # some paramters from the geo file (to ridiculous prescision)
   lr = 0.81240384046359604
   x80 = 3.4537158056565742
   y80 = -1.0157987663695807
   slopewidth = 0.25
   # calculate a slope
   m3 = -y80/(3.6-x80)
   c3 = y80 - slopewidth - m3*(lr+x80)
   c3i = -slopewidth - m3*lr
   mx = -1.2*m3/(c3-c3i)
   cx = 3 + mx*c3/m3
   my = 1.2/(c3-c3i)
   cy = 3 - my*c3
   z = mx*X[0] + my*X[1] +cx
   return z</string_value>
              </python>
            </bottom_depth>
            <sizing_function>
              <constant>
                <real_value rank="0">0.01</real_value>
              </constant>
            </sizing_function>
            <top_surface_id>
              <integer_value rank="0">800</integer_value>
            </top_surface_id>
            <bottom_surface_id>
              <integer_value rank="0">801</integer_value>
            </bottom_surface_id>
          </regions>
          <regions name="81MainRamp">
            <region_ids>
              <integer_value shape="1" rank="1">81</integer_value>
            </region_ids>
            <bottom_depth>
              <python>
                <string_value lines="20" type="code" language="python">def val(X,t):
   mx = (1.2+0.27080128015453203)/(0.81240384046359604+3.6)
   c = (3.0-(1.2+0.27080128015453203))
   z = mx*X[0] + c
   return z</string_value>
              </python>
            </bottom_depth>
            <sizing_function>
              <constant>
                <real_value rank="0">0.01</real_value>
              </constant>
            </sizing_function>
            <top_surface_id>
              <integer_value rank="0">810</integer_value>
            </top_surface_id>
            <bottom_surface_id>
              <integer_value rank="0">811</integer_value>
            </bottom_surface_id>
          </regions>
          <regions name="82FlatTopIsland">
            <region_ids>
              <integer_value shape="1" rank="1">82</integer_value>
            </region_ids>
            <bottom_depth>
              <constant>
                <real_value rank="0">1.8</real_value>
              </constant>
            </bottom_depth>
            <sizing_function>
              <constant>
                <real_value rank="0">0.01</real_value>
              </constant>
            </sizing_function>
            <top_surface_id>
              <integer_value rank="0">820</integer_value>
            </top_surface_id>
            <bottom_surface_id>
              <integer_value rank="0">821</integer_value>
            </bottom_surface_id>
          </regions>
          <regions name="83RampToFlatTopTriangle">
            <region_ids>
              <integer_value shape="1" rank="1">83</integer_value>
            </region_ids>
            <bottom_depth>
              <python>
                <string_value lines="20" type="code" language="python">def val(X,t):
   from math import sin, cos, pi
   # some paramters from the geo file (to ridiculous prescision)
   lr = 0.81240384046359604
   sr = -0.60104076400856532
   # the angle from the negative y axis of the first edge
   m1 = (-0.25-sr)/lr
   c1 = sr
   c1i = -0.25
   mx = -(lr/3)*m1/(c1-c1i)
   cx = 1.8 + mx*c1/m1
   my = (lr/3)/(c1-c1i)
   cy = 1.8 - my*c1
   z = mx*X[0] + my*X[1] +cx
   return z</string_value>
              </python>
            </bottom_depth>
            <sizing_function>
              <constant>
                <real_value rank="0">0.01</real_value>
              </constant>
            </sizing_function>
            <top_surface_id>
              <integer_value rank="0">830</integer_value>
            </top_surface_id>
            <bottom_surface_id>
              <integer_value rank="0">831</integer_value>
            </bottom_surface_id>
          </regions>
          <regions name="84TopRamp">
            <region_ids>
              <integer_value shape="1" rank="1">84</integer_value>
            </region_ids>
            <bottom_depth>
              <python>
                <string_value lines="20" type="code" language="python">def val(X,t):
   mx = (1.2+0.27080128015453203)/(0.81240384046359604+3.6)
   c = (3.0-(1.2+0.27080128015453203))
   z = mx*X[0] + c
   return z</string_value>
              </python>
            </bottom_depth>
            <sizing_function>
              <constant>
                <real_value rank="0">0.01</real_value>
              </constant>
            </sizing_function>
            <top_surface_id>
              <integer_value rank="0">840</integer_value>
            </top_surface_id>
            <bottom_surface_id>
              <integer_value rank="0">841</integer_value>
            </bottom_surface_id>
          </regions>
        </extrude>
        <stat>
          <include_in_stat/>
        </stat>
      </from_mesh>
    </mesh>
    <mesh name="VelocityMesh">
      <from_mesh>
        <mesh name="CoordinateMesh"/>
        <mesh_shape>
          <polynomial_degree>
            <integer_value rank="0">0</integer_value>
          </polynomial_degree>
        </mesh_shape>
        <mesh_continuity>
          <string_value>discontinuous</string_value>
        </mesh_continuity>
        <stat>
          <exclude_from_stat/>
        </stat>
      </from_mesh>
    </mesh>
    <mesh name="InputMesh">
      <from_file file_name="2d_island">
        <format name="gmsh"/>
        <stat>
          <include_in_stat/>
        </stat>
      </from_file>
    </mesh>
    <mesh name="OtherPressureMesh">
      <from_mesh>
        <mesh name="CoordinateMesh"/>
        <mesh_shape>
          <polynomial_degree>
            <integer_value rank="0">2</integer_value>
          </polynomial_degree>
        </mesh_shape>
        <mesh_continuity>
          <string_value>discontinuous</string_value>
        </mesh_continuity>
        <stat>
          <exclude_from_stat/>
        </stat>
      </from_mesh>
    </mesh>
    <quadrature>
      <degree>
        <integer_value rank="0">4</integer_value>
      </degree>
      <controlvolume_surface_degree>
        <integer_value rank="0">1</integer_value>
      </controlvolume_surface_degree>
    </quadrature>
    <ocean_boundaries>
      <top_surface_ids>
        <integer_value shape="13" rank="1">720 730 740 750 760 770 780 790 800 810 820 830 840</integer_value>
      </top_surface_ids>
      <bottom_surface_ids>
        <integer_value shape="13" rank="1">721 731 741 751 761 771 781 791 801 811 821 831 841</integer_value>
      </bottom_surface_ids>
      <scalar_field name="DistanceToTop" rank="0">
        <diagnostic>
          <algorithm name="Internal" material_phase_support="multiple"/>
          <mesh name="CoordinateMesh"/>
          <output>
            <exclude_from_vtu/>
          </output>
          <stat>
            <exclude_from_stat/>
          </stat>
          <convergence>
            <exclude_from_convergence/>
          </convergence>
          <detectors>
            <exclude_from_detectors/>
          </detectors>
          <steady_state>
            <exclude_from_steady_state/>
          </steady_state>
        </diagnostic>
      </scalar_field>
      <scalar_field name="DistanceToBottom" rank="0">
        <diagnostic>
          <algorithm name="Internal" material_phase_support="multiple"/>
          <mesh name="CoordinateMesh"/>
          <output>
            <exclude_from_vtu/>
          </output>
          <stat>
            <exclude_from_stat/>
          </stat>
          <convergence>
            <exclude_from_convergence/>
          </convergence>
          <detectors>
            <exclude_from_detectors/>
          </detectors>
          <steady_state>
            <exclude_from_steady_state/>
          </steady_state>
        </diagnostic>
      </scalar_field>
    </ocean_boundaries>
  </geometry>
  <io>
    <dump_format>
      <string_value>vtk</string_value>
    </dump_format>
    <dump_period>
      <constant>
        <real_value rank="0">0.001</real_value>
      </constant>
    </dump_period>
    <output_mesh name="CoordinateMesh"/>
    <checkpointing>
      <checkpoint_period_in_dumps>
        <integer_value rank="0">201</integer_value>
      </checkpoint_period_in_dumps>
      <checkpoint_at_start/>
      <checkpoint_at_end/>
    </checkpointing>
    <stat>
      <output_at_start/>
      <output_before_adapts/>
      <output_after_adapts/>
    </stat>
  </io>
  <timestepping>
    <current_time>
      <real_value rank="0">0.0</real_value>
    </current_time>
    <timestep>
      <real_value rank="0">0.0001</real_value>
    </timestep>
    <finish_time>
      <real_value rank="0">0.01</real_value>
      <comment>30.0</comment>
    </finish_time>
    <nonlinear_iterations>
      <integer_value rank="0">2</integer_value>
    </nonlinear_iterations>
    <adaptive_timestep>
      <requested_cfl>
        <real_value rank="0">2.5</real_value>
      </requested_cfl>
      <courant_number name="ControlVolumeCFLNumber">
        <mesh name="CoordinateMesh"/>
      </courant_number>
      <increase_tolerance>
        <real_value rank="0">1.1</real_value>
      </increase_tolerance>
    </adaptive_timestep>
  </timestepping>
  <physical_parameters>
    <gravity>
      <magnitude>
        <real_value rank="0">9.81</real_value>
      </magnitude>
      <vector_field name="GravityDirection" rank="1">
        <prescribed>
          <mesh name="CoordinateMesh"/>
          <value name="WholeMesh">
            <constant>
              <real_value shape="3" dim1="dim" rank="1">0.0 0.0 -1.0</real_value>
            </constant>
          </value>
          <output>
            <exclude_from_vtu/>
          </output>
          <stat>
            <exclude_from_stat/>
          </stat>
          <detectors>
            <exclude_from_detectors/>
          </detectors>
        </prescribed>
      </vector_field>
    </gravity>
  </physical_parameters>
  <material_phase name="Water">
    <equation_of_state>
      <fluids>
        <linear>
          <reference_density>
            <real_value rank="0">1000.0</real_value>
          </reference_density>
        </linear>
      </fluids>
    </equation_of_state>
    <scalar_field name="Pressure" rank="0">
      <prognostic>
        <mesh name="CoordinateMesh"/>
        <spatial_discretisation>
          <control_volumes/>
        </spatial_discretisation>
        <scheme>
          <poisson_pressure_solution>
            <string_value lines="1">never</string_value>
          </poisson_pressure_solution>
          <use_projection_method/>
        </scheme>
        <solver>
          <iterative_method name="cg"/>
          <preconditioner name="mg"/>
          <relative_error>
            <real_value rank="0">1.E-10</real_value>
          </relative_error>
          <max_iterations>
            <integer_value rank="0">10000</integer_value>
          </max_iterations>
          <never_ignore_solver_failures/>
          <diagnostics>
            <monitors/>
          </diagnostics>
        </solver>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
        <consistent_interpolation/>
        <enforce_discrete_properties>
          <solenoidal_lagrange_update/>
        </enforce_discrete_properties>
      </prognostic>
    </scalar_field>
    <scalar_field name="Density" rank="0">
      <diagnostic>
        <algorithm name="Internal" material_phase_support="multiple"/>
        <mesh name="CoordinateMesh"/>
        <output/>
        <stat/>
        <convergence>
          <exclude_from_convergence/>
        </convergence>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
        <steady_state>
          <exclude_from_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <vector_field name="Velocity" rank="1">
      <prognostic>
        <mesh name="VelocityMesh"/>
        <equation name="LinearMomentum"/>
        <spatial_discretisation>
          <discontinuous_galerkin>
            <mass_terms>
              <lump_mass_matrix/>
            </mass_terms>
            <viscosity_scheme>
              <bassi_rebay/>
              <tensor_form/>
            </viscosity_scheme>
            <advection_scheme>
              <upwind/>
              <integrate_advection_by_parts>
                <once/>
              </integrate_advection_by_parts>
              <integrate_conservation_term_by_parts/>
            </advection_scheme>
          </discontinuous_galerkin>
          <conservative_advection>
            <real_value rank="0">0.0</real_value>
          </conservative_advection>
        </spatial_discretisation>
        <temporal_discretisation>
          <theta>
            <real_value rank="0">0.5</real_value>
          </theta>
          <relaxation>
            <real_value rank="0">0.5</real_value>
          </relaxation>
        </temporal_discretisation>
        <solver>
          <iterative_method name="gmres">
            <restart>
              <integer_value rank="0">30</integer_value>
            </restart>
          </iterative_method>
          <preconditioner name="sor"/>
          <relative_error>
            <real_value rank="0">1.E-10</real_value>
          </relative_error>
          <max_iterations>
            <integer_value rank="0">10000</integer_value>
          </max_iterations>
          <never_ignore_solver_failures/>
          <diagnostics>
            <monitors/>
          </diagnostics>
        </solver>
        <initial_condition name="WholeMesh">
          <constant>
            <real_value shape="3" dim1="dim" rank="1">0.0 0.0 0.0</real_value>
          </constant>
        </initial_condition>
        <boundary_conditions name="Bottom">
          <surface_ids>
            <integer_value shape="1" rank="1">721</integer_value>
          </surface_ids>
          <type name="dirichlet">
            <apply_weakly/>
            <align_bc_with_cartesian>
              <x_component>
                <constant>
                  <real_value rank="0">0.0</real_value>
                </constant>
              </x_component>
              <y_component>
                <constant>
                  <real_value rank="0">0.0</real_value>
                </constant>
              </y_component>
              <z_component>
                <constant>
                  <real_value rank="0">0.0</real_value>
                </constant>
              </z_component>
            </align_bc_with_cartesian>
          </type>
        </boundary_conditions>
        <boundary_conditions name="RightSide">
          <surface_ids>
            <integer_value shape="1" rank="1">69</integer_value>
          </surface_ids>
          <type name="no_normal_flow"/>
        </boundary_conditions>
        <boundary_conditions name="Back">
          <surface_ids>
            <integer_value shape="1" rank="1">70</integer_value>
          </surface_ids>
          <type name="no_normal_flow"/>
        </boundary_conditions>
        <boundary_conditions name="LeftSide">
          <surface_ids>
            <integer_value shape="1" rank="1">71</integer_value>
          </surface_ids>
          <type name="no_normal_flow"/>
        </boundary_conditions>
        <boundary_conditions name="Front">
          <surface_ids>
            <integer_value shape="1" rank="1">68</integer_value>
          </surface_ids>
          <type name="no_normal_flow"/>
        </boundary_conditions>
        <boundary_conditions name="Cone">
          <surface_ids>
            <integer_value shape="8" rank="1">731 741 751 761 771 781 791 801</integer_value>
          </surface_ids>
          <type name="dirichlet">
            <apply_weakly/>
            <align_bc_with_cartesian>
              <x_component>
                <constant>
                  <real_value rank="0">0.0</real_value>
                </constant>
              </x_component>
              <y_component>
                <constant>
                  <real_value rank="0">0.0</real_value>
                </constant>
              </y_component>
              <z_component>
                <constant>
                  <real_value rank="0">0.0</real_value>
                </constant>
              </z_component>
            </align_bc_with_cartesian>
          </type>
        </boundary_conditions>
        <boundary_conditions name="Ramp">
          <surface_ids>
            <integer_value shape="2" rank="1">811 841</integer_value>
          </surface_ids>
          <type name="no_normal_flow"/>
        </boundary_conditions>
        <boundary_conditions name="RampSides">
          <surface_ids>
            <integer_value shape="1" rank="1">831</integer_value>
          </surface_ids>
          <type name="no_normal_flow"/>
        </boundary_conditions>
        <boundary_conditions name="ConeTop">
          <surface_ids>
            <integer_value shape="1" rank="1">821</integer_value>
          </surface_ids>
          <type name="no_normal_flow"/>
        </boundary_conditions>
        <output/>
        <stat>
          <include_in_stat/>
          <previous_time_step>
            <exclude_from_stat/>
          </previous_time_step>
          <nonlinear_field>
            <exclude_from_stat/>
          </nonlinear_field>
        </stat>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
        <galerkin_projection>
          <discontinuous/>
        </galerkin_projection>
        <enforce_discrete_properties>
          <solenoidal>
            <interpolated_field>
              <discontinuous>
                <lump_mass_matrix/>
              </discontinuous>
            </interpolated_field>
            <lagrange_multiplier>
              <mesh name="CoordinateMesh"/>
              <spatial_discretisation>
                <control_volumes/>
              </spatial_discretisation>
              <update_scalar_field name="Pressure"/>
              <solver>
                <iterative_method name="cg"/>
                <preconditioner name="mg"/>
                <relative_error>
                  <real_value rank="0">1.E-10</real_value>
                </relative_error>
                <max_iterations>
                  <integer_value rank="0">10000</integer_value>
                </max_iterations>
                <never_ignore_solver_failures/>
                <diagnostics>
                  <monitors/>
                </diagnostics>
              </solver>
            </lagrange_multiplier>
          </solenoidal>
        </enforce_discrete_properties>
      </prognostic>
    </vector_field>
    <scalar_field name="MaterialVolumeFraction" rank="0">
      <prognostic>
        <mesh name="CoordinateMesh"/>
        <equation name="AdvectionDiffusion"/>
        <spatial_discretisation>
          <coupled_cv>
            <face_value name="HyperC">
              <project_upwind_value_from_point>
                <reflect_off_domain_boundaries/>
                <bound_projected_value_locally/>
                <store_upwind_elements/>
              </project_upwind_value_from_point>
              <courant_number name="ControlVolumeCFLNumber"/>
            </face_value>
            <parent_sum>
              <target_maximum>
                <real_value rank="0">1.0</real_value>
              </target_maximum>
              <target_minimum>
                <real_value rank="0">0.0</real_value>
              </target_minimum>
            </parent_sum>
          </coupled_cv>
          <conservative_advection>
            <real_value rank="0">0.0</real_value>
          </conservative_advection>
        </spatial_discretisation>
        <temporal_discretisation>
          <theta>
            <real_value rank="0">0.0</real_value>
          </theta>
          <control_volumes>
            <maximum_courant_number_per_subcycle>
              <real_value rank="0">0.25</real_value>
              <courant_number name="ControlVolumeCFLNumber"/>
            </maximum_courant_number_per_subcycle>
            <pivot_theta>
              <real_value rank="0">0.0</real_value>
            </pivot_theta>
          </control_volumes>
        </temporal_discretisation>
        <explicit/>
        <initial_condition name="WholeMesh">
          <python>
            <string_value lines="20" type="code" language="python">def val(X,t):
   R0 = 2.07
   h = ((4.45 - R0)/3.0)-3.0
   if(X[2]&lt;=h):
      return 1.0
   else:
      return 0.0</string_value>
          </python>
        </initial_condition>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
        <adaptivity_options>
          <absolute_measure>
            <scalar_field name="InterpolationErrorBound" rank="0">
              <prescribed>
                <value name="WholeMesh">
                  <constant>
                    <real_value rank="0">0.07</real_value>
                  </constant>
                </value>
                <output>
                  <exclude_from_vtu/>
                </output>
                <stat>
                  <exclude_from_stat/>
                </stat>
                <detectors>
                  <exclude_from_detectors/>
                </detectors>
              </prescribed>
            </scalar_field>
          </absolute_measure>
        </adaptivity_options>
        <galerkin_projection>
          <continuous>
            <bounded name="Diffuse">
              <boundedness_iterations>
                <integer_value rank="0">10000</integer_value>
                <tolerance>
                  <real_value rank="0">1.e-5</real_value>
                </tolerance>
              </boundedness_iterations>
              <bounds>
                <upper_bound>
                  <real_value rank="0">1</real_value>
                  <coupled/>
                </upper_bound>
                <lower_bound>
                  <real_value rank="0">0</real_value>
                </lower_bound>
              </bounds>
              <repair_deviations/>
            </bounded>
            <solver>
              <iterative_method name="cg"/>
              <preconditioner name="sor"/>
              <relative_error>
                <real_value rank="0">1.E-10</real_value>
              </relative_error>
              <max_iterations>
                <integer_value rank="0">10000</integer_value>
              </max_iterations>
              <never_ignore_solver_failures/>
              <diagnostics>
                <monitors/>
              </diagnostics>
            </solver>
          </continuous>
        </galerkin_projection>
        <priority>
          <integer_value rank="0">3</integer_value>
        </priority>
      </prognostic>
    </scalar_field>
    <scalar_field name="ControlVolumeCFLNumber" rank="0">
      <diagnostic>
        <algorithm name="Internal" material_phase_support="multiple"/>
        <mesh name="CoordinateMesh"/>
        <output/>
        <stat/>
        <convergence>
          <exclude_from_convergence/>
        </convergence>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
        <steady_state>
          <exclude_from_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <scalar_field name="ControlVolumeDivergence" rank="0">
      <diagnostic field_name="Velocity">
        <algorithm name="Internal" material_phase_support="multiple"/>
        <mesh name="CoordinateMesh"/>
        <output/>
        <stat/>
        <convergence>
          <exclude_from_convergence/>
        </convergence>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
        <steady_state>
          <exclude_from_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <scalar_field name="HydrostaticPressure" rank="0">
      <prognostic>
        <mesh name="OtherPressureMesh"/>
        <spatial_discretisation>
          <discontinuous_galerkin/>
        </spatial_discretisation>
        <exclude_from_checkpointing/>
        <output>
          <exclude_from_vtu/>
        </output>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
        <no_interpolation/>
      </prognostic>
    </scalar_field>
    <scalar_field name="Inside" rank="0">
      <prescribed>
        <mesh name="CoordinateMesh"/>
        <value name="WholeMesh">
          <constant>
            <real_value rank="0">1.0</real_value>
          </constant>
        </value>
        <output/>
        <stat/>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
      </prescribed>
    </scalar_field>
    <scalar_field name="RegionIDs" rank="0">
      <prescribed>
        <mesh name="VelocityMesh"/>
        <value name="72">
          <region_ids>
            <integer_value shape="1" rank="1">72</integer_value>
          </region_ids>
          <constant>
            <real_value rank="0">72</real_value>
          </constant>
        </value>
        <value name="73">
          <region_ids>
            <integer_value shape="1" rank="1">73</integer_value>
          </region_ids>
          <constant>
            <real_value rank="0">73</real_value>
          </constant>
        </value>
        <value name="74">
          <region_ids>
            <integer_value shape="1" rank="1">74</integer_value>
          </region_ids>
          <constant>
            <real_value rank="0">74</real_value>
          </constant>
        </value>
        <value name="75">
          <region_ids>
            <integer_value shape="1" rank="1">75</integer_value>
          </region_ids>
          <constant>
            <real_value rank="0">75</real_value>
          </constant>
        </value>
        <value name="76">
          <region_ids>
            <integer_value shape="1" rank="1">76</integer_value>
          </region_ids>
          <constant>
            <real_value rank="0">76</real_value>
          </constant>
        </value>
        <value name="77">
          <region_ids>
            <integer_value shape="1" rank="1">77</integer_value>
          </region_ids>
          <constant>
            <real_value rank="0">77</real_value>
          </constant>
        </value>
        <value name="78">
          <region_ids>
            <integer_value shape="1" rank="1">78</integer_value>
          </region_ids>
          <constant>
            <real_value rank="0">78</real_value>
          </constant>
        </value>
        <value name="79">
          <region_ids>
            <integer_value shape="1" rank="1">79</integer_value>
          </region_ids>
          <constant>
            <real_value rank="0">79</real_value>
          </constant>
        </value>
        <value name="80">
          <region_ids>
            <integer_value shape="1" rank="1">80</integer_value>
          </region_ids>
          <constant>
            <real_value rank="0">80</real_value>
          </constant>
        </value>
        <value name="81">
          <region_ids>
            <integer_value shape="1" rank="1">81</integer_value>
          </region_ids>
          <constant>
            <real_value rank="0">81</real_value>
          </constant>
        </value>
        <value name="82">
          <region_ids>
            <integer_value shape="1" rank="1">82</integer_value>
          </region_ids>
          <constant>
            <real_value rank="0">82</real_value>
          </constant>
        </value>
        <value name="83">
          <region_ids>
            <integer_value shape="1" rank="1">83</integer_value>
          </region_ids>
          <constant>
            <real_value rank="0">83</real_value>
          </constant>
        </value>
        <value name="84">
          <region_ids>
            <integer_value shape="1" rank="1">84</integer_value>
          </region_ids>
          <constant>
            <real_value rank="0">84</real_value>
          </constant>
        </value>
        <output/>
        <stat/>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
      </prescribed>
    </scalar_field>
    <scalar_field name="ColumnIDs" rank="0">
      <diagnostic>
        <algorithm name="column_ids" material_phase_support="single"/>
        <mesh name="CoordinateMesh"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <scalar_field name="UniversalColumnIDs" rank="0">
      <diagnostic>
        <algorithm name="universal_column_ids" material_phase_support="single"/>
        <mesh name="CoordinateMesh"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
  </material_phase>
  <material_phase name="Air">
    <equation_of_state>
      <fluids>
        <linear>
          <reference_density>
            <real_value rank="0">1.0</real_value>
          </reference_density>
        </linear>
      </fluids>
    </equation_of_state>
    <vector_field name="Velocity" rank="1">
      <aliased material_phase_name="Water" field_name="Velocity"/>
    </vector_field>
    <scalar_field name="MaterialVolumeFraction" rank="0">
      <diagnostic>
        <algorithm name="Internal" material_phase_support="multiple"/>
        <mesh name="CoordinateMesh"/>
        <output>
          <exclude_from_vtu/>
        </output>
        <stat>
          <exclude_from_stat/>
        </stat>
        <convergence>
          <exclude_from_convergence/>
        </convergence>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
        <steady_state>
          <exclude_from_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
  </material_phase>
  <mesh_adaptivity>
    <hr_adaptivity>
      <period_in_timesteps>
        <integer_value rank="0">5</integer_value>
      </period_in_timesteps>
      <maximum_number_of_nodes>
        <integer_value rank="0">100000</integer_value>
      </maximum_number_of_nodes>
      <anisotropic_gradation>
        <tensor_field name="Gamma">
          <anisotropic_symmetric>
            <constant>
              <real_value symmetric="true" dim2="dim" shape="3 3" dim1="dim" rank="2">1.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 0.75</real_value>
            </constant>
          </anisotropic_symmetric>
        </tensor_field>
      </anisotropic_gradation>
      <tensor_field name="MinimumEdgeLengths">
        <anisotropic_symmetric>
          <constant>
            <real_value symmetric="true" dim2="dim" shape="3 3" dim1="dim" rank="2">0.01 0.0 0.0 0.0 0.01 0.0 0.0 0.0 0.01</real_value>
          </constant>
        </anisotropic_symmetric>
      </tensor_field>
      <tensor_field name="MaximumEdgeLengths">
        <anisotropic_symmetric>
          <constant>
            <real_value symmetric="true" dim2="dim" shape="3 3" dim1="dim" rank="2">6.25 0.0 0.0 0.0 3.75 0.0 0.0 0.0 1.5</real_value>
          </constant>
        </anisotropic_symmetric>
      </tensor_field>
      <adapt_at_first_timestep>
        <number_of_adapts>
          <integer_value rank="0">1</integer_value>
        </number_of_adapts>
      </adapt_at_first_timestep>
      <preserve_mesh_regions/>
      <vertically_structured_adaptivity>
        <inhomogenous_vertical_resolution/>
        <split_gradation/>
        <vertically_align_metric/>
        <include_bottom_metric/>
      </vertically_structured_adaptivity>
      <debug>
        <write_metric_stages/>
        <write_adapted_state/>
      </debug>
    </hr_adaptivity>
  </mesh_adaptivity>
</fluidity_options>
