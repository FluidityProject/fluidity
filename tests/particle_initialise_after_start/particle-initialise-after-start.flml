<?xml version='1.0' encoding='utf-8'?>
<fluidity_options>
  <simulation_name>
    <string_value lines="1">particle_attributes</string_value>
  </simulation_name>
  <problem_type>
    <string_value lines="1">fluids</string_value>
  </problem_type>
  <geometry>
    <dimension>
      <integer_value rank="0">2</integer_value>
    </dimension>
    <mesh name="CoordinateMesh">
      <from_file file_name="square">
        <format name="gmsh"/>
        <stat>
          <include_in_stat/>
        </stat>
      </from_file>
    </mesh>
    <mesh name="VelocityMesh">
      <from_mesh>
        <mesh name="CoordinateMesh"/>
        <mesh_shape>
          <polynomial_degree>
            <integer_value rank="0">1</integer_value>
          </polynomial_degree>
        </mesh_shape>
        <mesh_continuity>
          <string_value>discontinuous</string_value>
        </mesh_continuity>
        <stat>
          <exclude_from_stat/>
        </stat>
      </from_mesh>
    </mesh>
    <quadrature>
      <degree>
        <integer_value rank="0">3</integer_value>
      </degree>
    </quadrature>
  </geometry>
  <io>
    <dump_format>
      <string_value>vtk</string_value>
    </dump_format>
    <dump_period_in_timesteps>
      <constant>
        <integer_value rank="0">400</integer_value>
      </constant>
    </dump_period_in_timesteps>
    <output_mesh name="VelocityMesh"/>
    <stat/>
  </io>
  <particles>
    <particle_group name="Rhodri">
      <particle_subgroup name="Thomas">
        <initial_position>
          <python>
            <string_value type="code" language="python" lines="20">def val(t):
  from numpy import arange,zeros,reshape,concatenate
  if (t==0):
    x = 0.25+0.5*arange(0,11.)/11.
    y = zeros(11) + 0.5
    a = reshape(concatenate((x,y)),(2,11)).T
  return a</string_value>
          </python>
        </initial_position>
        <initialise_during_simulation>
          <python>
            <string_value type="code" language="python" lines="20">def val(t):
  from numpy import arange,zeros,reshape,concatenate
  if (t&gt;0.15 and t&lt;0.25):
    x = 0.25+0.5*arange(0,11.)/11.
    y = 0.25+0.5*arange(0,11.)/11.
    a = reshape(concatenate((x,y)),(2,11)).T
  elif (t&gt;0.45 and t&lt;0.55):
    x = zeros(11) + 0.5
    y = 0.25+0.5*arange(0,11.)/11.
    a = reshape(concatenate((x,y)),(2,11)).T
  else:
    a = zeros([0,0])
  return a</string_value>
          </python>
        </initialise_during_simulation>
        <attributes>
          <scalar_attribute name="Chem1">
            <python_fields>
              <string_value type="code" language="python" lines="20">def val(X,t,dt,fields):
  if (t==0):
    y = 0
  else:
    y = fields['old%Chem1'] + 1
  return y</string_value>
              <store_old_attribute/>
            </python_fields>
          </scalar_attribute>
        </attributes>
      </particle_subgroup>
    </particle_group>
    <moving_outside_domain>
      <delete_outside_domain/>
    </moving_outside_domain>
    <lagrangian_timestepping>
      <subcycles>
        <integer_value rank="0">1</integer_value>
      </subcycles>
      <search_tolerance>
        <real_value rank="0">1.0e-10</real_value>
      </search_tolerance>
      <rk4_guided_search/>
    </lagrangian_timestepping>
  </particles>
  <timestepping>
    <current_time>
      <real_value rank="0">0.0</real_value>
    </current_time>
    <timestep>
      <real_value rank="0">0.1</real_value>
    </timestep>
    <finish_time>
      <real_value rank="0">1</real_value>
    </finish_time>
    <final_timestep>
      <integer_value rank="0">10</integer_value>
    </final_timestep>
  </timestepping>
  <physical_parameters>
    <gravity>
      <magnitude>
        <real_value rank="0">1</real_value>
      </magnitude>
      <vector_field name="GravityDirection" rank="1">
        <prescribed>
          <mesh name="CoordinateMesh"/>
          <value name="WholeMesh">
            <constant>
              <real_value rank="1" dim1="dim" shape="2">0.0 -1.0</real_value>
            </constant>
          </value>
          <output/>
          <stat>
            <include_in_stat/>
          </stat>
          <detectors>
            <exclude_from_detectors/>
          </detectors>
          <particles>
            <exclude_from_particles/>
          </particles>
        </prescribed>
      </vector_field>
    </gravity>
  </physical_parameters>
  <material_phase name="BoussinesqFluid">
    <vector_field rank="1" name="Velocity">
      <prescribed>
        <mesh name="VelocityMesh"/>
        <value name="WholeMesh">
          <python>
            <string_value type="code" language="python" lines="20">def val(X,t):
  x = X[0]
  y = X[1]
  return [-(y-0.5)/2.0,(x-0.5)/2.0]</string_value>
          </python>
        </value>
        <output/>
        <stat>
          <include_in_stat/>
        </stat>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
      </prescribed>
    </vector_field>
  </material_phase>
</fluidity_options>
