<?xml version='1.0' encoding='UTF-8'?>
<testproblem>
  <name>Adaptive shearing volume fraction</name>
  <owner userid="cwilson"/>
  <tags>flml 2dadapt</tags>
  <problem_definition length="medium" nprocs="1">
    <command_line>fluidity -v2 -l explicit-hyperc-shear-input-conservative.flml
      mv fluidity.log-0 forward.log
      mv fluidity.err-0 forward.err
      ./change_options_conservative.py
      fluidity -v2 -l explicit-hyperc-shear-conservative_16_checkpoint.flml
      mv fluidity.log-0 back.log
      mv fluidity.err-0 back.err
      unifiedmesh explicit-hyperc-shear-conservative_CoordinateMesh_0_checkpoint explicit-hyperc-shear-conservative_checkpoint_CoordinateMesh_16_checkpoint merged_mesh
      fluidity -v2 -l explicit-hyperc-shear-errors.flml
      mv fluidity.log-0 errors.log
      mv fluidity.err-0 errors.err</command_line>
  </problem_definition>
  <variables>
    <variable name="error" language="python">
from fluidity_tools import stat_parser as stat
error = stat("explicit-hyperc-shear-error.stat")["Error"]["ScalarAbsoluteDifference"]["integral"][-1]/stat("explicit-hyperc-shear-error.stat")["Error"]["AnalyticalMaterialVolumeFraction"]["integral"][0]
    </variable>
    <variable name="materialstartforward" language="python">
from fluidity_tools import stat_parser as stat
materialstartforward = stat("explicit-hyperc-shear-conservative.stat")["Material1"]["MaterialVolumeFraction"]["integral"][0]
    </variable>
    <variable name="materialendforward" language="python">
from fluidity_tools import stat_parser as stat
materialendforward = stat("explicit-hyperc-shear-conservative.stat")["Material1"]["MaterialVolumeFraction"]["integral"][-1]
    </variable>
    <variable name="materialstartback" language="python">
from fluidity_tools import stat_parser as stat
materialstartback = stat("explicit-hyperc-shear-conservative_checkpoint.stat")["Material1"]["MaterialVolumeFraction"]["integral"][0]
    </variable>
    <variable name="materialendback" language="python">
from fluidity_tools import stat_parser as stat
materialendback = stat("explicit-hyperc-shear-conservative_checkpoint.stat")["Material1"]["MaterialVolumeFraction"]["integral"][-1]
    </variable>
    <variable name="divergenceminforward" language="python">
from fluidity_tools import stat_parser as stat
divergenceminforward= min(stat("explicit-hyperc-shear-conservative.stat")["Material1"]["ControlVolumeDivergence"]["min"])
    </variable>
    <variable name="divergencemaxforward" language="python">
from fluidity_tools import stat_parser as stat
divergencemaxforward= max(stat("explicit-hyperc-shear-conservative.stat")["Material1"]["ControlVolumeDivergence"]["max"])
    </variable>
    <variable name="divergenceminback" language="python">
from fluidity_tools import stat_parser as stat
divergenceminback= max(stat("explicit-hyperc-shear-conservative.stat")["Material1"]["ControlVolumeDivergence"]["min"])
    </variable>
    <variable name="divergencemaxback" language="python">
from fluidity_tools import stat_parser as stat
divergencemaxback= max(stat("explicit-hyperc-shear-conservative.stat")["Material1"]["ControlVolumeDivergence"]["max"])
    </variable>
    <variable name="cgalforwarderror" language="python">
# Note this does not take account of the case where cgal fixes the problem
with open("forward.err") as err:
  err_lines = err.readlines()
cgalforwarderror = 0.0
for i in range(len(err_lines)):
  if("sum(detwei_B) = " in err_lines[i]):
    line = err_lines[i]
    B = float(line.split(" ")[5])
    print("B = ", B)
    if(line.split("all sum(detwei_C) = ")[-1]=="\n"):
      line2 = err_lines[i+1]
      C = float(line2.split(" ")[2].split("\n")[0])
      print("C = ", C)
    else:
      C = float(line.split(" ")[12].split("\n")[0])
      print("C = ", C)
    cgalforwarderror = cgalforwarderror + abs(B-C)

    </variable>
    <variable name="cgalbackerror" language="python">
# Note this does not take account of the case where cgal fixes the problem
with open("back.err") as err:
  err_lines = err.readlines()
cgalbackerror = 0.0
for i in range(len(err_lines)):
  if("sum(detwei_B) = " in err_lines[i]):
    line = err_lines[i]
    B = float(line.split(" ")[5])
    print("B = ", B)
    if(line.split("all sum(detwei_C) = ")[-1]=="\n"):
      line2 = err_lines[i+1]
      C = float(line2.split(" ")[2].split("\n")[0])
      print("C = ", C)
    else:
      C = float(line.split(" ")[12].split("\n")[0])
      print("C = ", C)
    cgalbackerror = cgalbackerror + abs(B-C)

    </variable>
  </variables>
  <pass_tests>
    <test name="check error is less than 0.15" language="python">
print('error = ', error)
assert error &lt; 0.15
    </test>
    <test name="check forward conservation (divergence) tolerance is reasonable" language="python">
print('forward tolerance = ', max(abs(divergenceminforward), abs(divergencemaxforward)))
assert max(abs(divergenceminforward), abs(divergencemaxforward)) &lt; 1.E-8
    </test>
    <test name="check backward conservation (divergence) tolerance is reasonable" language="python">
print('backward tolerance = ', max(abs(divergenceminback), abs(divergencemaxback)))
assert max(abs(divergenceminback), abs(divergencemaxback)) &lt; 1.E-8
    </test>
    <test name="check material1 was conserved on forward run" language="python">
print('mass loss = ', abs(materialstartforward-materialendforward))
print('cgal error = ', cgalforwarderror)
assert abs(materialstartforward-materialendforward) &lt; max(abs(divergenceminforward), abs(divergencemaxforward), cgalforwarderror)
    </test>
    <test name="check material1 was conserved on reverse run" language="python">
print('mass loss = ', abs(materialstartback-materialendback))
print('cgal error = ', cgalbackerror)
assert abs(materialstartback-materialendback) &lt; max(abs(divergenceminback), abs(divergencemaxback), cgalbackerror)
    </test>
    <test name="check material1 was conserved on pickup for reverse run" language="python">
print('mass loss = ', abs(materialendforward-materialstartback))
assert abs(materialendforward-materialstartback) &lt; 1.E-10
    </test>
    <test name="check min divergence was zero for forward run" language="python">
print('min div = ', abs(divergenceminforward))
assert abs(divergenceminforward) &lt; 1.E-8
    </test>
    <test name="check max divergence was zero for forward run" language="python">
print('max div = ', abs(divergencemaxforward))
assert abs(divergencemaxforward) &lt; 1.E-8
    </test>
    <test name="check min divergence was zero for back run" language="python">
print('min div = ', abs(divergenceminback))
assert abs(divergenceminback) &lt; 1.E-8
    </test>
    <test name="check max divergence was zero for back run" language="python">
print('max div = ', abs(divergencemaxback))
assert abs(divergencemaxback) &lt; 1.E-8
    </test>
  </pass_tests>
  <warn_tests>
    <test name="check cgal forward errors" language="python">
assert cgalforwarderror &lt; 1.E-1
    </test>
    <test name="check cgal back errors" language="python">
assert cgalbackerror &lt; 1.E-1
    </test>
  </warn_tests>
</testproblem>
