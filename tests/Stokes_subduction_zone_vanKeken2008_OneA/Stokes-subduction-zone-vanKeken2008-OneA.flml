<?xml version='1.0' encoding='utf-8'?>
<fluidity_options>
  <simulation_name>
    <string_value lines="1">vanKekenOneA</string_value>
  </simulation_name>
  <problem_type>
    <string_value lines="1">stokes</string_value>
  </problem_type>
  <geometry>
    <dimension>
      <integer_value rank="0">2</integer_value>
    </dimension>
    <mesh name="CoordinateMesh">
      <from_file file_name="Subduction_Mesh">
        <format name="gmsh"/>
        <stat>
          <include_in_stat/>
        </stat>
      </from_file>
    </mesh>
    <mesh name="VelocityMesh">
      <from_mesh>
        <mesh name="CoordinateMesh"/>
        <mesh_shape>
          <polynomial_degree>
            <integer_value rank="0">2</integer_value>
          </polynomial_degree>
        </mesh_shape>
        <stat>
          <exclude_from_stat/>
        </stat>
      </from_mesh>
    </mesh>
    <quadrature>
      <degree>
        <integer_value rank="0">5</integer_value>
      </degree>
    </quadrature>
  </geometry>
  <io>
    <dump_format>
      <string_value>vtk</string_value>
    </dump_format>
    <dump_period>
      <constant>
        <real_value rank="0">5e14</real_value>
      </constant>
    </dump_period>
    <output_mesh name="CoordinateMesh"/>
    <stat>
      <output_at_start/>
      <output_before_adapts/>
      <output_after_adapts/>
    </stat>
    <detectors>
      <static_detector name="Temperature6060">
        <location>
          <real_value shape="2" dim1="dim" rank="1">60000. -60000.</real_value>
        </location>
      </static_detector>
      <detector_array name="TSlab">
        <number_of_detectors>
          <integer_value rank="0">36</integer_value>
        </number_of_detectors>
        <static/>
        <python>
          <string_value lines="20" type="code" language="python">def val(t):
  import numpy
  start = numpy.array([0, 0])
  end = numpy.array([210000, -210000])
  output = []
  for i in range(36):
    output.append(start + (float(i)/35) * end)
  return output</string_value>
        </python>
      </detector_array>
      <detector_array name="TWedge">
        <number_of_detectors>
          <integer_value rank="0">78</integer_value>
        </number_of_detectors>
        <static/>
        <python>
          <string_value lines="20" type="code" language="python">def val(t):
  output1 = []
  for i in range(12):
    for j in range(12):
      if i &gt;= j:
        output1.append([54000 + (float(i)/20) * 120000, -54000 + (float(j)/20) * (-120000)])
  return output1</string_value>
        </python>
      </detector_array>
      <fail_outside_domain/>
    </detectors>
  </io>
  <timestepping>
    <current_time>
      <real_value rank="0">0.0</real_value>
    </current_time>
    <timestep>
      <real_value rank="0">1e12</real_value>
    </timestep>
    <finish_time>
      <real_value rank="0">15768000000000000</real_value>
    </finish_time>
    <adaptive_timestep>
      <requested_cfl>
        <real_value rank="0">5</real_value>
      </requested_cfl>
      <courant_number name="CFLNumber">
        <mesh name="VelocityMesh"/>
      </courant_number>
      <increase_tolerance>
        <real_value rank="0">2.0</real_value>
      </increase_tolerance>
      <at_first_timestep/>
    </adaptive_timestep>
    <steady_state>
      <tolerance>
        <real_value rank="0">1e-3</real_value>
        <infinity_norm/>
      </tolerance>
    </steady_state>
  </timestepping>
  <material_phase name="Fluid">
    <vector_field name="Velocity" rank="1">
      <prescribed>
        <mesh name="VelocityMesh"/>
        <value name="SubductingPlate">
          <region_ids>
            <integer_value shape="1" rank="1">30</integer_value>
          </region_ids>
          <python>
            <string_value lines="20" type="code" language="python">def val(X, t):
   from math import sqrt
   vx = sqrt(((0.05/(3600.*24.*365.))**2.)/2.)
   vy = -vx
   return[vx,vy]</string_value>
          </python>
        </value>
        <value name="OverridingPlate">
          <region_ids>
            <integer_value shape="1" rank="1">24</integer_value>
          </region_ids>
          <constant>
            <real_value shape="2" dim1="dim" rank="1">0.0 0.0</real_value>
          </constant>
        </value>
        <value name="Batchelor">
          <region_ids>
            <integer_value shape="1" rank="1">27</integer_value>
          </region_ids>
          <python>
            <string_value lines="20" type="code" language="python">def val(X, t):
   from math import sqrt, atan, cos, sin, pi
   
   Xcoord = X[0]
   Ycoord = X[1]
   
   Depth = (X[1] * -1.) -50000.
   Xdist  = X[0] -50000.
   
   if(Xdist == 0.) :
      Xdist = 0.000000000000001
   
   if Depth == 0 :
      Vx = 0.
      Vy = 0.
   else :
      ALFA = atan(1)
      THETA = atan(Depth/Xdist)
      VTHETA = (((ALFA - THETA) * sin(THETA) * sin(ALFA)) - (ALFA * THETA * sin(ALFA-THETA))) / (ALFA**2 - (sin(ALFA)**2))
      VTHETA = VTHETA * (0.05/(3600.*24.*365.)) *-1.
      
      VR = (((ALFA - THETA) * cos(THETA) * sin(ALFA)) - (sin(ALFA) * sin(THETA)) - (ALFA * sin(ALFA-THETA)) + (ALFA*THETA*cos(ALFA-THETA))) / ((ALFA**2) - (sin(ALFA))**2)
      VR = VR * (0.05/(3600.*24.*365.))
      
      Vx = -( VTHETA*sin(THETA) - VR*cos(THETA) )
      Vy = - (VTHETA*cos(THETA) + VR*sin(THETA) )
   
   return [Vx, Vy]</string_value>
          </python>
        </value>
        <output/>
        <stat>
          <include_in_stat/>
        </stat>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
        <adaptivity_options>
          <absolute_measure>
            <vector_field name="InterpolationErrorBound" rank="1">
              <prescribed>
                <value name="WholeMesh">
                  <constant>
                    <real_value shape="2" dim1="dim" rank="1">1.0e-8 1.0e-8</real_value>
                  </constant>
                </value>
                <output/>
                <stat>
                  <include_in_stat/>
                </stat>
                <detectors>
                  <exclude_from_detectors/>
                </detectors>
              </prescribed>
            </vector_field>
          </absolute_measure>
        </adaptivity_options>
      </prescribed>
    </vector_field>
    <scalar_field name="Temperature" rank="0">
      <prognostic>
        <mesh name="VelocityMesh"/>
        <equation name="AdvectionDiffusion"/>
        <spatial_discretisation>
          <continuous_galerkin>
            <stabilisation>
              <streamline_upwind_petrov_galerkin>
                <nu_bar_optimal/>
                <nu_scale name="0.5">
                  <real_value shape="1" rank="0">0.5</real_value>
                </nu_scale>
              </streamline_upwind_petrov_galerkin>
            </stabilisation>
            <advection_terms/>
            <mass_terms/>
          </continuous_galerkin>
          <conservative_advection>
            <real_value rank="0">0.5</real_value>
          </conservative_advection>
        </spatial_discretisation>
        <temporal_discretisation>
          <theta>
            <real_value rank="0">1.0</real_value>
          </theta>
        </temporal_discretisation>
        <solver>
          <iterative_method name="gmres">
            <restart>
              <integer_value rank="0">30</integer_value>
            </restart>
          </iterative_method>
          <preconditioner name="eisenstat"/>
          <relative_error>
            <real_value rank="0">1.0e-10</real_value>
          </relative_error>
          <max_iterations>
            <integer_value rank="0">10000</integer_value>
          </max_iterations>
          <never_ignore_solver_failures/>
          <diagnostics>
            <monitors/>
          </diagnostics>
        </solver>
        <initial_condition name="WholeMesh">
          <constant>
            <real_value rank="0">273.</real_value>
          </constant>
        </initial_condition>
        <boundary_conditions name="SurfaceTemperature">
          <surface_ids>
            <integer_value shape="1" rank="1">10</integer_value>
          </surface_ids>
          <type name="dirichlet">
            <constant>
              <real_value rank="0">273.</real_value>
            </constant>
          </type>
        </boundary_conditions>
        <boundary_conditions name="InflowWedge">
          <surface_ids>
            <integer_value shape="1" rank="1">12</integer_value>
          </surface_ids>
          <type name="dirichlet">
            <constant>
              <real_value rank="0">1573.</real_value>
            </constant>
          </type>
        </boundary_conditions>
        <boundary_conditions name="ERF">
          <surface_ids>
            <integer_value shape="1" rank="1">15</integer_value>
          </surface_ids>
          <type name="dirichlet">
            <python>
              <string_value lines="20" type="code" language="python">def val(X, t):
   import math
   
   def erf(x):
      # save the sign of x
      sign = 1
      if x &lt; 0: 
         sign = -1
      x = abs(x)
      
      # constants
      a1 =  0.254829592
      a2 = -0.284496736
      a3 =  1.421413741
      a4 = -1.453152027
      a5 =  1.061405429
      p  =  0.3275911
      
      # A&amp;S formula 7.1.26
      t = 1.0/(1.0 + p*x)
      y = 1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*math.exp(-x*x)
      
      return sign*y # erf(-x) = -erf(x)

   Depth = X[1] * -1.
   Age = 1576800000000000.
   TempHalfSpace = 273. + 1300.*(erf(Depth/(2.*math.sqrt(0.0000007272*Age))))
   
   return TempHalfSpace</string_value>
            </python>
          </type>
        </boundary_conditions>
        <boundary_conditions name="LinearGradientCrust">
          <surface_ids>
            <integer_value shape="1" rank="1">11</integer_value>
          </surface_ids>
          <type name="dirichlet">
            <python>
              <string_value lines="20" type="code" language="python">def val(X, t):
   Depth = X[1] * -1.
   T = 273. + (Depth*0.026)
   return T</string_value>
            </python>
          </type>
        </boundary_conditions>
        <boundary_conditions name="Outflow">
          <surface_ids>
            <integer_value shape="3" rank="1">13 14 16</integer_value>
          </surface_ids>
          <type name="neumann">
            <constant>
              <real_value rank="0">0.0</real_value>
            </constant>
          </type>
        </boundary_conditions>
        <tensor_field name="Diffusivity" rank="2">
          <prescribed>
            <value name="WholeMesh">
              <isotropic>
                <constant>
                  <real_value rank="0">0.0000007272</real_value>
                </constant>
              </isotropic>
            </value>
            <output/>
          </prescribed>
        </tensor_field>
        <output/>
        <stat>
          <surface_integral type="gradient_normal" name="Top">
            <surface_ids>
              <integer_value shape="1" rank="1">10</integer_value>
            </surface_ids>
          </surface_integral>
        </stat>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
        <adaptivity_options>
          <absolute_measure>
            <scalar_field name="InterpolationErrorBound" rank="0">
              <prescribed>
                <value name="WholeMesh">
                  <constant>
                    <real_value rank="0">3</real_value>
                  </constant>
                </value>
                <output/>
                <stat/>
                <detectors>
                  <exclude_from_detectors/>
                </detectors>
              </prescribed>
            </scalar_field>
          </absolute_measure>
        </adaptivity_options>
        <consistent_interpolation/>
      </prognostic>
    </scalar_field>
  </material_phase>
  <mesh_adaptivity>
    <hr_adaptivity>
      <period>
        <real_value rank="0">1e15</real_value>
      </period>
      <maximum_number_of_nodes>
        <integer_value rank="0">540000</integer_value>
      </maximum_number_of_nodes>
      <enable_gradation>
        <gradation_parameter>
          <real_value rank="0">2</real_value>
        </gradation_parameter>
      </enable_gradation>
      <tensor_field name="MinimumEdgeLengths">
        <anisotropic_symmetric>
          <constant>
            <real_value symmetric="true" dim2="dim" shape="2 2" dim1="dim" rank="2">100. 0 0 100.</real_value>
          </constant>
        </anisotropic_symmetric>
      </tensor_field>
      <tensor_field name="MaximumEdgeLengths">
        <anisotropic_symmetric>
          <constant>
            <real_value symmetric="true" dim2="dim" shape="2 2" dim1="dim" rank="2">20000. 0 0 20000.</real_value>
          </constant>
        </anisotropic_symmetric>
      </tensor_field>
      <preserve_mesh_regions/>
    </hr_adaptivity>
  </mesh_adaptivity>
</fluidity_options>
