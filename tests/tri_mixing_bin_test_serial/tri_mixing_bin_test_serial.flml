<?xml version='1.0' encoding='utf-8'?>
<fluidity_options>
  <simulation_name>
    <string_value lines="1">tri_mixing_bin_test_serial</string_value>
  </simulation_name>
  <problem_type>
    <string_value lines="1">fluids</string_value>
  </problem_type>
  <geometry>
    <dimension>
      <integer_value rank="0">2</integer_value>
    </dimension>
    <mesh name="CoordinateMesh">
      <from_file file_name="square">
        <format name="gmsh"/>
        <stat>
          <include_in_stat/>
        </stat>
      </from_file>
    </mesh>
    <quadrature>
      <degree>
        <integer_value rank="0">2</integer_value>
      </degree>
    </quadrature>
  </geometry>
  <io>
    <dump_format>
      <string_value>vtk</string_value>
    </dump_format>
    <dump_period_in_timesteps>
      <constant>
        <integer_value rank="0">1</integer_value>
      </constant>
    </dump_period_in_timesteps>
    <disable_dump_at_start/>
    <output_mesh name="CoordinateMesh"/>
    <stat/>
  </io>
  <timestepping>
    <current_time>
      <real_value rank="0">0.0</real_value>
    </current_time>
    <timestep>
      <real_value rank="0">1.0</real_value>
    </timestep>
    <finish_time>
      <real_value rank="0">1.0</real_value>
    </finish_time>
  </timestepping>
  <material_phase name="Fluid">
    <vector_field name="Velocity" rank="1">
      <prescribed>
        <mesh name="CoordinateMesh"/>
        <value name="WholeMesh">
          <constant>
            <real_value shape="2" dim1="dim" rank="1">0.0 0.0</real_value>
          </constant>
        </value>
        <output>
          <exclude_from_vtu/>
        </output>
        <stat>
          <exclude_from_stat/>
        </stat>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
      </prescribed>
    </vector_field>
    <scalar_field name="Phi0" rank="0">
      <prescribed>
        <mesh name="CoordinateMesh"/>
        <value name="WholeMesh">
          <python>
            <string_value lines="20" type="code" language="python">def val(x, t):
  import math
  
  return math.sin(math.pi * x[0]) * math.sin(math.pi * x[1])</string_value>
          </python>
        </value>
        <output/>
        <stat>
          <include_mixing_stats name="Bins">
            <continuous_galerkin/>
            <mixing_bin_bounds>
              <python>
                <string_value lines="20" type="code" language="python">def val(t):
  bounds = [float(i) / float(101) for i in range(100)]
  bounds.insert(0, -float("inf"))
  bounds.append(float("inf"))
  
  return bounds</string_value>
              </python>
            </mixing_bin_bounds>
          </include_mixing_stats>
        </stat>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
      </prescribed>
    </scalar_field>
    <scalar_field name="Phi1" rank="0">
      <prescribed>
        <mesh name="CoordinateMesh"/>
        <value name="WholeMesh">
          <python>
            <string_value lines="20" type="code" language="python">def val(x, t):
  return x[0]</string_value>
          </python>
        </value>
        <output/>
        <stat>
          <include_mixing_stats name="Bins">
            <continuous_galerkin/>
            <mixing_bin_bounds>
              <constant>
                <real_value shape="5" rank="1">-inf 0.0 0.5 1.0 inf</real_value>
              </constant>
            </mixing_bin_bounds>
          </include_mixing_stats>
        </stat>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
      </prescribed>
    </scalar_field>
  </material_phase>
</fluidity_options>
