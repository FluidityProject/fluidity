<?xml version='1.0' encoding='utf-8'?>
<fluidity_options>
  <simulation_name>
    <string_value lines="1">MMS_C</string_value>
  </simulation_name>
  <problem_type>
    <string_value lines="1">multiphase</string_value>
  </problem_type>
  <geometry>
    <dimension>
      <integer_value rank="0">2</integer_value>
    </dimension>
    <mesh name="CoordinateMesh">
      <from_file file_name="MMS_C">
        <format name="gmsh"/>
        <stat>
          <include_in_stat/>
        </stat>
      </from_file>
    </mesh>
    <mesh name="VelocityMesh">
      <from_mesh>
        <mesh name="CoordinateMesh"/>
        <mesh_continuity>
          <string_value>discontinuous</string_value>
        </mesh_continuity>
        <stat>
          <exclude_from_stat/>
        </stat>
      </from_mesh>
    </mesh>
    <mesh name="PressureMesh">
      <from_mesh>
        <mesh name="CoordinateMesh"/>
        <mesh_shape>
          <polynomial_degree>
            <integer_value rank="0">2</integer_value>
          </polynomial_degree>
        </mesh_shape>
        <stat>
          <exclude_from_stat/>
        </stat>
      </from_mesh>
    </mesh>
    <quadrature>
      <degree>
        <integer_value rank="0">4</integer_value>
      </degree>
    </quadrature>
  </geometry>
  <io>
    <dump_format>
      <string_value>vtk</string_value>
    </dump_format>
    <dump_period>
      <constant>
        <real_value rank="0">1000.0</real_value>
      </constant>
    </dump_period>
    <output_mesh name="PressureMesh"/>
    <checkpointing>
      <checkpoint_period_in_dumps>
        <integer_value rank="0">1000</integer_value>
      </checkpoint_period_in_dumps>
      <checkpoint_at_end/>
    </checkpointing>
    <stat/>
  </io>
  <timestepping>
    <current_time>
      <real_value rank="0">0.0</real_value>
    </current_time>
    <timestep>
      <real_value rank="0">0.004</real_value>
    </timestep>
    <finish_time>
      <real_value rank="0">30.0</real_value>
    </finish_time>
    <nonlinear_iterations>
      <integer_value rank="0">2</integer_value>
      <tolerance>
        <real_value rank="0">1.0e-12</real_value>
        <infinity_norm/>
      </tolerance>
    </nonlinear_iterations>
    <steady_state>
      <tolerance>
        <real_value rank="0">1.E-8</real_value>
        <infinity_norm/>
      </tolerance>
    </steady_state>
  </timestepping>
  <physical_parameters>
    <gravity>
      <magnitude>
        <real_value rank="0">9.8</real_value>
      </magnitude>
      <vector_field name="GravityDirection" rank="1">
        <prescribed>
          <mesh name="CoordinateMesh"/>
          <value name="WholeMesh">
            <constant>
              <real_value shape="2" dim1="dim" rank="1">0.0 -1.0</real_value>
            </constant>
          </value>
          <output/>
          <stat>
            <include_in_stat/>
          </stat>
          <detectors>
            <exclude_from_detectors/>
          </detectors>
        </prescribed>
      </vector_field>
    </gravity>
  </physical_parameters>
  <material_phase name="Fluid">
    <equation_of_state>
      <fluids>
        <linear>
          <reference_density>
            <real_value rank="0">1.0</real_value>
          </reference_density>
        </linear>
      </fluids>
    </equation_of_state>
    <scalar_field name="Pressure" rank="0">
      <aliased material_phase_name="Particle" field_name="Pressure"/>
    </scalar_field>
    <scalar_field name="Density" rank="0">
      <diagnostic>
        <algorithm name="Internal" material_phase_support="multiple"/>
        <mesh name="VelocityMesh"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <vector_field name="Velocity" rank="1">
      <prognostic>
        <mesh name="VelocityMesh"/>
        <equation name="LinearMomentum"/>
        <spatial_discretisation>
          <discontinuous_galerkin>
            <viscosity_scheme>
              <bassi_rebay/>
              <tensor_form/>
            </viscosity_scheme>
            <advection_scheme>
              <upwind/>
              <integrate_advection_by_parts>
                <twice/>
              </integrate_advection_by_parts>
            </advection_scheme>
          </discontinuous_galerkin>
          <conservative_advection>
            <real_value rank="0">0.0</real_value>
          </conservative_advection>
        </spatial_discretisation>
        <temporal_discretisation>
          <theta>
            <real_value rank="0">1.0</real_value>
          </theta>
          <relaxation>
            <real_value rank="0">0.5</real_value>
          </relaxation>
        </temporal_discretisation>
        <solver>
          <iterative_method name="gmres">
            <restart>
              <integer_value rank="0">30</integer_value>
            </restart>
          </iterative_method>
          <preconditioner name="sor"/>
          <relative_error>
            <real_value rank="0">1.E-7</real_value>
          </relative_error>
          <max_iterations>
            <integer_value rank="0">1000</integer_value>
          </max_iterations>
          <never_ignore_solver_failures/>
          <diagnostics>
            <monitors/>
          </diagnostics>
        </solver>
        <initial_condition name="WholeMesh">
          <constant>
            <real_value shape="2" dim1="dim" rank="1">0.0 0.0</real_value>
          </constant>
        </initial_condition>
        <boundary_conditions name="all_sides">
          <surface_ids>
            <integer_value shape="4" rank="1">7 8 9 10</integer_value>
          </surface_ids>
          <type name="dirichlet">
            <apply_weakly/>
            <align_bc_with_cartesian>
              <x_component>
                <python>
                  <string_value lines="20" type="code" language="python">def val(X,t):
   from math import sin, cos
   u = 0.25*cos(X[0])*cos(X[1]) - X[0]*cos(X[1])
   return u</string_value>
                </python>
              </x_component>
              <y_component>
                <python>
                  <string_value lines="20" type="code" language="python">def val(X,t):
   from math import sin, cos
   v = sin(X[1])
   return v</string_value>
                </python>
              </y_component>
            </align_bc_with_cartesian>
          </type>
        </boundary_conditions>
        <tensor_field name="Viscosity" rank="2">
          <prescribed>
            <value name="WholeMesh">
              <isotropic>
                <constant>
                  <real_value rank="0">0.3</real_value>
                </constant>
              </isotropic>
            </value>
            <output/>
          </prescribed>
        </tensor_field>
        <vector_field name="Source" rank="1">
          <prescribed>
            <mesh name="VelocityMesh"/>
            <value name="WholeMesh">
              <python>
                <string_value lines="20" type="code" language="python">def val(XX, t):
    from math import sin,cos,sqrt
    mu = 0.3;
    rho = 1.0;
    d = 1.0;
    x = XX[0];
    y = XX[1];
    vfrac = 0.8
    vfrac_p = 0.2
    dvfrac_x = 0.0
    dvfrac_y = 0.0
    Su = -(x*cos(y) - 0.500000000000000*cos(x)*cos(y))*mu*vfrac - ((-0.250000000000000*sin(x)*cos(y) - cos(y))*(x*cos(y) - 0.250000000000000*cos(x)*cos(y)) - (x*sin(y) - 0.250000000000000*sin(y)*cos(x))*sin(y))*rho*vfrac - vfrac*sin(x)*cos(y) - ((-0.250000000000000*sin(x)*cos(y) - cos(y))*dvfrac_x + (x*sin(y) - 0.250000000000000*sin(y)*cos(x))*dvfrac_y)*mu - 18*(x*cos(y) + sin(x)*cos(y) - 0.250000000000000*cos(x)*cos(y))*mu*vfrac_p/(d**2)
    Sv = rho*vfrac*sin(y)*cos(y) - dvfrac_y*mu*cos(y) + mu*vfrac*sin(y) - vfrac*sin(y)*cos(x) + 9.80000000000000*rho*vfrac - 18*(sin(x)*sin(y) - sin(y)*cos(x) - sin(y))*mu*vfrac_p/(d**2)
  
    # Divide the result through by rho to cancel out
    # the multiplication by rho in the assembly.
    return (Su/rho, Sv/rho)</string_value>
              </python>
            </value>
            <output/>
            <stat>
              <include_in_stat/>
            </stat>
            <detectors>
              <exclude_from_detectors/>
            </detectors>
          </prescribed>
        </vector_field>
        <output>
          <include_previous_time_step/>
        </output>
        <stat>
          <include_in_stat/>
          <previous_time_step>
            <exclude_from_stat/>
          </previous_time_step>
          <nonlinear_field>
            <exclude_from_stat/>
          </nonlinear_field>
        </stat>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
        <consistent_interpolation/>
      </prognostic>
    </vector_field>
    <scalar_field name="CFLNumber" rank="0">
      <diagnostic>
        <algorithm name="Internal" material_phase_support="multiple"/>
        <mesh name="VelocityMesh"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <scalar_field name="PhaseVolumeFraction" rank="0">
      <diagnostic>
        <mesh name="VelocityMesh"/>
        <algorithm name="Internal" material_phase_support="multiple"/>
        <output/>
        <stat/>
        <detectors>
          <include_in_detectors/>
        </detectors>
      </diagnostic>
    </scalar_field>
    <vector_field name="VelocityAnalytical" rank="1">
      <prescribed>
        <mesh name="VelocityMesh"/>
        <value name="WholeMesh">
          <python>
            <string_value lines="20" type="code" language="python">def val(X,t):
   from math import sin, cos
   return (0.25*cos(X[0])*cos(X[1]) - X[0]*cos(X[1]), sin(X[1]))</string_value>
          </python>
        </value>
        <output/>
        <stat>
          <include_in_stat/>
        </stat>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
      </prescribed>
    </vector_field>
    <vector_field name="VectorAbsoluteDifference" rank="1">
      <diagnostic field_name_b="Velocity" field_name_a="VelocityAnalytical">
        <algorithm name="Internal" material_phase_support="multiple"/>
        <mesh name="VelocityMesh"/>
        <output/>
        <stat>
          <include_in_stat/>
        </stat>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </vector_field>
  </material_phase>
  <material_phase name="Particle">
    <equation_of_state>
      <fluids>
        <linear>
          <reference_density>
            <real_value rank="0">2.5</real_value>
          </reference_density>
        </linear>
      </fluids>
    </equation_of_state>
    <scalar_field name="Pressure" rank="0">
      <prognostic>
        <mesh name="PressureMesh"/>
        <spatial_discretisation>
          <continuous_galerkin>
            <remove_stabilisation_term/>
          </continuous_galerkin>
        </spatial_discretisation>
        <reference_node>
          <integer_value rank="0">1</integer_value>
        </reference_node>
        <scheme>
          <poisson_pressure_solution>
            <string_value lines="1">never</string_value>
          </poisson_pressure_solution>
          <use_projection_method/>
        </scheme>
        <solver>
          <iterative_method name="cg"/>
          <preconditioner name="sor"/>
          <relative_error>
            <real_value rank="0">1.E-7</real_value>
          </relative_error>
          <max_iterations>
            <integer_value rank="0">1000</integer_value>
          </max_iterations>
          <never_ignore_solver_failures/>
          <diagnostics>
            <monitors/>
          </diagnostics>
        </solver>
        <output>
          <include_previous_time_step/>
        </output>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
        <consistent_interpolation/>
      </prognostic>
    </scalar_field>
    <scalar_field name="Density" rank="0">
      <diagnostic>
        <algorithm name="Internal" material_phase_support="multiple"/>
        <mesh name="VelocityMesh"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <vector_field name="Velocity" rank="1">
      <prognostic>
        <mesh name="VelocityMesh"/>
        <equation name="LinearMomentum"/>
        <spatial_discretisation>
          <discontinuous_galerkin>
            <viscosity_scheme>
              <bassi_rebay/>
              <tensor_form/>
            </viscosity_scheme>
            <advection_scheme>
              <upwind/>
              <integrate_advection_by_parts>
                <twice/>
              </integrate_advection_by_parts>
            </advection_scheme>
          </discontinuous_galerkin>
          <conservative_advection>
            <real_value rank="0">0.0</real_value>
          </conservative_advection>
        </spatial_discretisation>
        <temporal_discretisation>
          <theta>
            <real_value rank="0">1.0</real_value>
          </theta>
          <relaxation>
            <real_value rank="0">0.5</real_value>
          </relaxation>
        </temporal_discretisation>
        <solver>
          <iterative_method name="gmres">
            <restart>
              <integer_value rank="0">30</integer_value>
            </restart>
          </iterative_method>
          <preconditioner name="sor"/>
          <relative_error>
            <real_value rank="0">1.E-7</real_value>
          </relative_error>
          <max_iterations>
            <integer_value rank="0">1000</integer_value>
          </max_iterations>
          <never_ignore_solver_failures/>
          <diagnostics>
            <monitors/>
          </diagnostics>
        </solver>
        <initial_condition name="WholeMesh">
          <constant>
            <real_value shape="2" dim1="dim" rank="1">0.0 0.0</real_value>
          </constant>
        </initial_condition>
        <boundary_conditions name="all_sides">
          <surface_ids>
            <integer_value shape="4" rank="1">7 8 9 10</integer_value>
          </surface_ids>
          <type name="dirichlet">
            <apply_weakly/>
            <align_bc_with_cartesian>
              <x_component>
                <python>
                  <string_value lines="20" type="code" language="python">def val(X,t):
    from math import sin, cos
    u = sin(X[0])*cos(X[1])
    return u</string_value>
                </python>
              </x_component>
              <y_component>
                <python>
                  <string_value lines="20" type="code" language="python">def val(X,t):
    from math import sin, cos
    v = sin(X[1])*sin(X[0]) - cos(X[0])*sin(X[1])
    return v</string_value>
                </python>
              </y_component>
            </align_bc_with_cartesian>
          </type>
        </boundary_conditions>
        <tensor_field name="Viscosity" rank="2">
          <prescribed>
            <value name="WholeMesh">
              <isotropic>
                <constant>
                  <real_value rank="0">0.3</real_value>
                </constant>
              </isotropic>
            </value>
            <output/>
          </prescribed>
        </tensor_field>
        <vector_field name="Source" rank="1">
          <prescribed>
            <mesh name="VelocityMesh"/>
            <value name="WholeMesh">
              <python>
                <string_value lines="20" type="code" language="python">global drag
def val(XX, t):
    from math import sin,cos,sqrt
    mu = 0.3;
    rho = 2.5;
    d = 1.0;
    x = XX[0];
    y = XX[1];
    vfrac = 0.2
    dvfrac_x = 0.0
    dvfrac_y = 0.0
    Su = 2*mu*vfrac*sin(x)*cos(y) + (sin(x)*cos(x)*cos(y)**2 - (sin(x)*sin(y) - sin(y)*cos(x))*sin(x)*sin(y))*rho*vfrac - vfrac*sin(x)*cos(y) - (dvfrac_x*cos(x)*cos(y) - dvfrac_y*sin(x)*sin(y))*mu + 18*(x*cos(y) + sin(x)*cos(y) - 0.250000000000000*cos(x)*cos(y))*mu*vfrac/(d**2)
    Sv = 2*(sin(x)*sin(y) - sin(y)*cos(x))*mu*vfrac + ((sin(x)*sin(y) + sin(y)*cos(x))*sin(x)*cos(y) + (sin(x)*cos(y) - cos(x)*cos(y))*(sin(x)*sin(y) - sin(y)*cos(x)))*rho*vfrac - vfrac*sin(y)*cos(x) - ((sin(x)*cos(y) - cos(x)*cos(y))*dvfrac_y + (sin(x)*sin(y) + sin(y)*cos(x))*dvfrac_x)*mu + 9.80000000000000*rho*vfrac + 18*(sin(x)*sin(y) - sin(y)*cos(x) - sin(y))*mu*vfrac/(d**2)
    
    # Divide the result through by rho to cancel out
    # the multiplication by rho in the assembly.
    return (Su/rho, Sv/rho)</string_value>
              </python>
            </value>
            <output/>
            <stat>
              <include_in_stat/>
            </stat>
            <detectors>
              <exclude_from_detectors/>
            </detectors>
          </prescribed>
        </vector_field>
        <output>
          <include_previous_time_step/>
        </output>
        <stat>
          <include_in_stat/>
          <previous_time_step>
            <exclude_from_stat/>
          </previous_time_step>
          <nonlinear_field>
            <exclude_from_stat/>
          </nonlinear_field>
        </stat>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
        <consistent_interpolation/>
      </prognostic>
    </vector_field>
    <scalar_field name="CFLNumber" rank="0">
      <diagnostic>
        <algorithm name="Internal" material_phase_support="multiple"/>
        <mesh name="VelocityMesh"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <scalar_field name="PressureAnalytical" rank="0">
      <prescribed>
        <mesh name="PressureMesh"/>
        <value name="WholeMesh">
          <python>
            <string_value lines="20" type="code" language="python">def val(X,t):
   from math import cos
   p = cos(X[0])*cos(X[1])
   return p</string_value>
          </python>
        </value>
        <output/>
        <stat/>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
      </prescribed>
    </scalar_field>
    <scalar_field name="ScalarAbsoluteDifference" rank="0">
      <diagnostic field_name_b="PressureAnalytical" field_name_a="Pressure">
        <algorithm name="Internal" material_phase_support="multiple"/>
        <mesh name="PressureMesh"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
        <relative_to_average/>
      </diagnostic>
    </scalar_field>
    <scalar_field name="PhaseVolumeFraction" rank="0">
      <prescribed>
        <mesh name="VelocityMesh"/>
        <value name="WholeMesh">
          <constant>
            <real_value rank="0">0.2</real_value>
          </constant>
        </value>
        <output/>
        <stat/>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
      </prescribed>
    </scalar_field>
    <scalar_field name="ParticleReynoldsNumber" rank="0">
      <diagnostic>
        <algorithm name="particle_reynolds_number" material_phase_support="multiple">
          <depends>
            <string_value lines="1">Fluid::Velocity,Particle::Velocity,Fluid::PhaseVolumeFraction,Fluid::Density</string_value>
          </depends>
          <particle_diameter>
            <real_value rank="0">1.0</real_value>
          </particle_diameter>
          <continuous_phase_name>Fluid</continuous_phase_name>
        </algorithm>
        <mesh name="VelocityMesh"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <vector_field name="VelocityAnalytical" rank="1">
      <prescribed>
        <mesh name="VelocityMesh"/>
        <value name="WholeMesh">
          <python>
            <string_value lines="20" type="code" language="python">def val(X,t):
    from math import sin, cos
    return (sin(X[0])*cos(X[1]), sin(X[1])*sin(X[0]) - cos(X[0])*sin(X[1]))</string_value>
          </python>
        </value>
        <output/>
        <stat>
          <include_in_stat/>
        </stat>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
      </prescribed>
    </vector_field>
    <vector_field name="VectorAbsoluteDifference" rank="1">
      <diagnostic field_name_b="Velocity" field_name_a="VelocityAnalytical">
        <algorithm name="Internal" material_phase_support="multiple"/>
        <mesh name="VelocityMesh"/>
        <output/>
        <stat>
          <include_in_stat/>
        </stat>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </vector_field>
    <multiphase_properties>
      <particle_diameter>
        <real_value rank="0">1.0</real_value>
      </particle_diameter>
    </multiphase_properties>
  </material_phase>
  <multiphase_interaction>
    <fluid_particle_drag>
      <drag_correlation name="stokes"/>
    </fluid_particle_drag>
  </multiphase_interaction>
</fluidity_options>
