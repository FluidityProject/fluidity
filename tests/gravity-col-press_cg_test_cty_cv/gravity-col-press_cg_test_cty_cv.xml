<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE testproblem SYSTEM "regressiontest.dtd">
<testproblem>
  <name>1 material column under gravity using CG pressure with continuity tested with the CV dual</name>
  <owner userid="btollit"/>
  <tags>flml cg_press_test_cty_cv</tags>
    <problem_definition length="short" nprocs="1">
    <command_line>
fluidity gravity-col-press_cg_test_cty_cv_p0p1_2d.flml
fluidity gravity-col-press_cg_test_cty_cv_p1dgp2_2d.flml
fluidity gravity-col-press_cg_test_cty_cv_p2lumpedp1_2d.flml
fluidity gravity-col-press_cg_test_cty_cv_p2p1_2d.flml
    </command_line>
  </problem_definition>  
  <variables>  
    <variable name="pressure_p0p1_2d" language="python">
import fluidity_tools
pressure_p0p1_2d = fluidity_tools.stat_parser("gravity-col-press_cg_test_cty_cv_p0p1_2d.stat")['Material1']['Pressure']['max'][-1]
    </variable>    
    <variable name="minpressure_p0p1_2d" language="python">
import fluidity_tools
minpressure_p0p1_2d = fluidity_tools.stat_parser("gravity-col-press_cg_test_cty_cv_p0p1_2d.stat")['Material1']['Pressure']['min'][-1]
    </variable>    
    <variable name="velocity_p0p1_2d" language="python">
import fluidity_tools
velocity_p0p1_2d = fluidity_tools.stat_parser("gravity-col-press_cg_test_cty_cv_p0p1_2d.stat")['Material1']['Velocity%magnitude']['max'][-1]
    </variable>    
    <variable name="pressure_p1dgp2_2d" language="python">
import fluidity_tools
pressure_p1dgp2_2d = fluidity_tools.stat_parser("gravity-col-press_cg_test_cty_cv_p1dgp2_2d.stat")['Material1']['Pressure']['max'][-1]
    </variable>    
    <variable name="minpressure_p1dgp2_2d" language="python">
import fluidity_tools
minpressure_p1dgp2_2d = fluidity_tools.stat_parser("gravity-col-press_cg_test_cty_cv_p1dgp2_2d.stat")['Material1']['Pressure']['min'][-1]
    </variable>    
    <variable name="velocity_p1dgp2_2d" language="python">
import fluidity_tools
velocity_p1dgp2_2d = fluidity_tools.stat_parser("gravity-col-press_cg_test_cty_cv_p1dgp2_2d.stat")['Material1']['Velocity%magnitude']['max'][-1]
    </variable>    
    <variable name="pressure_p2lumpedp1_2d" language="python">
import fluidity_tools
pressure_p2lumpedp1_2d = fluidity_tools.stat_parser("gravity-col-press_cg_test_cty_cv_p2lumpedp1_2d.stat")['Material1']['Pressure']['max'][-1]
    </variable>    
    <variable name="minpressure_p2lumpedp1_2d" language="python">
import fluidity_tools
minpressure_p2lumpedp1_2d = fluidity_tools.stat_parser("gravity-col-press_cg_test_cty_cv_p2lumpedp1_2d.stat")['Material1']['Pressure']['min'][-1]
    </variable>    
    <variable name="velocity_p2lumpedp1_2d" language="python">
import fluidity_tools
velocity_p2lumpedp1_2d = fluidity_tools.stat_parser("gravity-col-press_cg_test_cty_cv_p2lumpedp1_2d.stat")['Material1']['Velocity%magnitude']['max'][-1]
    </variable>    
    <variable name="pressure_p2p1_2d" language="python">
import fluidity_tools
pressure_p2p1_2d = fluidity_tools.stat_parser("gravity-col-press_cg_test_cty_cv_p2p1_2d.stat")['Material1']['Pressure']['max'][-1]
    </variable>    
    <variable name="minpressure_p2p1_2d" language="python">
import fluidity_tools
minpressure_p2p1_2d = fluidity_tools.stat_parser("gravity-col-press_cg_test_cty_cv_p2p1_2d.stat")['Material1']['Pressure']['min'][-1]
    </variable>    
    <variable name="velocity_p2p1_2d" language="python">
import fluidity_tools
velocity_p2p1_2d = fluidity_tools.stat_parser("gravity-col-press_cg_test_cty_cv_p2p1_2d.stat")['Material1']['Velocity%magnitude']['max'][-1]
    </variable>    
    <variable name="solvers_converged" language="python">
import os
files = os.listdir("./")
solvers_converged = not "matrixdump" in files and not "matrixdump.info" in files
    </variable>
   </variables>
    <pass_tests>  
    <test name="check maximum pressure_p0p1_2d is 10.0 with tolerance 1.0e-10" language="python">
print('max pressure error: ',abs(pressure_p0p1_2d-1e+1))
assert abs(pressure_p0p1_2d-1e+1) &lt; 1.0e-10
</test>    
    <test name="check pressure_p0p1_2d range is 10.0 with tolerance 1.0e-10" language="python">
print('pressure range error: ',abs(pressure_p0p1_2d-minpressure_p0p1_2d-1e+1))
assert abs(pressure_p0p1_2d-minpressure_p0p1_2d-1e+1) &lt; 1.0e-10
</test>    
    <test name="check maximum speed_p0p1_2d is zero with tolerance 1.0e-10" language="python">
assert abs(velocity_p0p1_2d) &lt; 1.0e-10
    </test>
    <test name="check maximum pressure_p1dgp2_2d is 10.0 with tolerance 1.0e-10" language="python">
print('max pressure error: ',abs(pressure_p1dgp2_2d-1e+1))
assert abs(pressure_p1dgp2_2d-1e+1) &lt; 1.0e-10
</test>    
    <test name="check pressure_p1dgp2_2d range is 10.0 with tolerance 1.0e-10" language="python">
print('pressure range error: ',abs(pressure_p1dgp2_2d-minpressure_p1dgp2_2d-1e+1))
assert abs(pressure_p1dgp2_2d-minpressure_p1dgp2_2d-1e+1) &lt; 1.0e-10
</test>    
    <test name="check maximum speed_p1dgp2_2d is zero with tolerance 1.0e-10" language="python">
assert abs(velocity_p1dgp2_2d) &lt; 1.0e-10
    </test>
    <test name="check maximum pressure_p2lumpedp1_2d is 10.0 with tolerance 1.0e-10" language="python">
print('max pressure error: ',abs(pressure_p2lumpedp1_2d-1e+1))
assert abs(pressure_p2lumpedp1_2d-1e+1) &lt; 1.0e-10
</test>    
    <test name="check pressure_p2lumpedp1_2d range is 10.0 with tolerance 1.0e-10" language="python">
print('pressure range error: ',abs(pressure_p2lumpedp1_2d-minpressure_p2lumpedp1_2d-1e+1))
assert abs(pressure_p2lumpedp1_2d-minpressure_p2lumpedp1_2d-1e+1) &lt; 1.0e-10
</test>    
    <test name="check maximum speed_p2lumpedp1_2d is zero with tolerance 1.0e-10" language="python">
assert abs(velocity_p2lumpedp1_2d) &lt; 1.0e-10
    </test>
    <test name="check maximum pressure_p2p1_2d is 10.0 with tolerance 1.0e-10" language="python">
print('max pressure error: ',abs(pressure_p2p1_2d-1e+1))
assert abs(pressure_p2p1_2d-1e+1) &lt; 1.0e-10
</test>    
    <test name="check pressure_p2p1_2d range is 10.0 with tolerance 1.0e-10" language="python">
print('pressure range error: ',abs(pressure_p2p1_2d-minpressure_p2p1_2d-1e+1))
assert abs(pressure_p2p1_2d-minpressure_p2p1_2d-1e+1) &lt; 1.0e-10
</test>    
    <test name="check maximum speed_p2p1_2d is zero with tolerance 1.0e-10" language="python">
assert abs(velocity_p2p1_2d) &lt; 1.0e-10
    </test>
    <test name="Solvers converged" language="python">
assert(solvers_converged)
    </test>
  </pass_tests>
  <warn_tests>
  </warn_tests>
</testproblem>
