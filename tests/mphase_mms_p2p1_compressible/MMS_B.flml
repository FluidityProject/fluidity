<?xml version='1.0' encoding='utf-8'?>
<fluidity_options>
  <simulation_name>
    <string_value lines="1">MMS_B</string_value>
  </simulation_name>
  <problem_type>
    <string_value lines="1">multiphase</string_value>
  </problem_type>
  <geometry>
    <dimension>
      <integer_value rank="0">2</integer_value>
    </dimension>
    <mesh name="CoordinateMesh">
      <from_file file_name="MMS_B">
        <format name="gmsh"/>
        <stat>
          <include_in_stat/>
        </stat>
      </from_file>
    </mesh>
    <mesh name="VelocityMesh">
      <from_mesh>
        <mesh name="CoordinateMesh"/>
        <mesh_shape>
          <polynomial_degree>
            <integer_value rank="0">2</integer_value>
          </polynomial_degree>
        </mesh_shape>
        <stat>
          <exclude_from_stat/>
        </stat>
      </from_mesh>
    </mesh>
    <mesh name="PressureMesh">
      <from_mesh>
        <mesh name="CoordinateMesh"/>
        <stat>
          <exclude_from_stat/>
        </stat>
      </from_mesh>
    </mesh>
    <mesh name="DensityMesh">
      <from_mesh>
        <mesh name="CoordinateMesh"/>
        <mesh_shape>
          <polynomial_degree>
            <integer_value rank="0">1</integer_value>
          </polynomial_degree>
        </mesh_shape>
        <stat>
          <exclude_from_stat/>
        </stat>
      </from_mesh>
    </mesh>
    <quadrature>
      <degree>
        <integer_value rank="0">4</integer_value>
      </degree>
      <controlvolume_surface_degree>
        <integer_value rank="0">1</integer_value>
      </controlvolume_surface_degree>
    </quadrature>
  </geometry>
  <io>
    <dump_format>
      <string_value>vtk</string_value>
    </dump_format>
    <dump_period>
      <constant>
        <real_value rank="0">1000.0</real_value>
      </constant>
    </dump_period>
    <output_mesh name="VelocityMesh"/>
    <convergence>
      <convergence_file/>
    </convergence>
    <checkpointing>
      <checkpoint_period_in_dumps>
        <integer_value rank="0">1000</integer_value>
      </checkpoint_period_in_dumps>
      <checkpoint_at_end/>
    </checkpointing>
    <stat/>
  </io>
  <timestepping>
    <current_time>
      <real_value rank="0">0.0</real_value>
    </current_time>
    <timestep>
      <real_value rank="0">0.004</real_value>
    </timestep>
    <finish_time>
      <real_value rank="0">100.0</real_value>
    </finish_time>
    <nonlinear_iterations>
      <integer_value rank="0">50</integer_value>
      <tolerance>
        <real_value rank="0">1.E-6</real_value>
        <infinity_norm/>
      </tolerance>
    </nonlinear_iterations>
    <steady_state>
      <tolerance>
        <real_value rank="0">1.E-7</real_value>
        <infinity_norm/>
      </tolerance>
    </steady_state>
  </timestepping>
  <material_phase name="Fluid">
    <equation_of_state>
      <compressible>
        <stiffened_gas>
          <reference_density>
            <real_value rank="0">0.1</real_value>
          </reference_density>
          <bulk_sound_speed_squared>
            <real_value rank="0">0.4</real_value>
          </bulk_sound_speed_squared>
        </stiffened_gas>
      </compressible>
    </equation_of_state>
    <scalar_field name="Pressure" rank="0">
      <prognostic>
        <mesh name="PressureMesh"/>
        <spatial_discretisation>
          <continuous_galerkin>
            <remove_stabilisation_term/>
          </continuous_galerkin>
        </spatial_discretisation>
        <scheme>
          <poisson_pressure_solution>
            <string_value lines="1">never</string_value>
          </poisson_pressure_solution>
          <use_projection_method/>
        </scheme>
        <solver>
          <iterative_method name="gmres">
            <restart>
              <integer_value rank="0">30</integer_value>
            </restart>
          </iterative_method>
          <preconditioner name="eisenstat"/>
          <relative_error>
            <real_value rank="0">1.E-7</real_value>
          </relative_error>
          <max_iterations>
            <integer_value rank="0">10000</integer_value>
          </max_iterations>
          <never_ignore_solver_failures/>
          <diagnostics>
            <monitors/>
          </diagnostics>
        </solver>
        <initial_condition name="WholeMesh">
          <constant>
            <real_value rank="0">0.4</real_value>
          </constant>
        </initial_condition>
        <boundary_conditions name="Incoming">
          <surface_ids>
            <integer_value shape="2" rank="1">7 10</integer_value>
          </surface_ids>
          <type name="dirichlet">
            <python>
              <string_value lines="20" type="code" language="python">def val(XX,t):
   from math import sin, cos
   csq = 0.4
   rho0 = 0.1
   x = XX[0];
   y = XX[1];
   p = csq*(0.5*(sin(y**2 + x**2) + 1.5) - rho0)
   return p</string_value>
            </python>
          </type>
        </boundary_conditions>
        <output>
          <include_previous_time_step/>
        </output>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
        <consistent_interpolation/>
      </prognostic>
    </scalar_field>
    <scalar_field name="Density" rank="0">
      <prognostic>
        <mesh name="DensityMesh"/>
        <spatial_discretisation>
          <continuous_galerkin>
            <stabilisation>
              <no_stabilisation/>
            </stabilisation>
            <advection_terms/>
            <mass_terms/>
          </continuous_galerkin>
          <conservative_advection>
            <real_value rank="0">1.0</real_value>
          </conservative_advection>
        </spatial_discretisation>
        <temporal_discretisation>
          <theta>
            <real_value rank="0">1.0</real_value>
          </theta>
        </temporal_discretisation>
        <initial_condition name="WholeMesh">
          <constant>
            <real_value rank="0">1.0</real_value>
          </constant>
        </initial_condition>
        <boundary_conditions name="Incoming">
          <surface_ids>
            <integer_value shape="2" rank="1">7 10</integer_value>
          </surface_ids>
          <type name="dirichlet">
            <python>
              <string_value lines="20" type="code" language="python">def val(XX,t):
   from math import sin, cos
   x = XX[0]
   y = XX[1]
   rho = 0.5*(sin(x**2 + y**2) + 1.5)
   return rho</string_value>
            </python>
          </type>
        </boundary_conditions>
        <scalar_field name="Source" rank="0">
          <prescribed>
            <value name="WholeMesh">
              <python>
                <string_value lines="20" type="code" language="python">def val(XX,t):
   from math import sin,cos
   x = XX[0]
   y = XX[1]
   vfrac_c = 0.8
   vfrac_i = 0.2
   S = (0.100000000000000*cos(x**2 + y**2) + 0.0500000000000000)*vfrac_c*y*cos(x**2 + y**2) + 2*(0.500000000000000*sin(x**2 + y**2) + 0.750000000000000)*vfrac_c*x*cos(x**2 + y**2) - 0.200000000000000*(0.500000000000000*sin(x**2 + y**2) + 0.750000000000000)*vfrac_c*y*sin(x**2 + y**2) + 2*(0.500000000000000*sin(x**2 + y**2) + 0.750000000000000)*vfrac_i*x*cos(x**2 + y**2) - 0.200000000000000*(0.500000000000000*sin(x**2 + y**2) + 0.750000000000000)*vfrac_i*y*sin(x**2 + y**2) + (sin(x**2 + y**2) + 0.500000000000000)*vfrac_c*x*cos(x**2 + y**2)
   return S</string_value>
                <comment>u_c = [1.0*(sin(x*x+y*y)+0.5), 0.1*(cos(x*x+y*y)+0.5)]
u_i = [1.0*(sin(x*x+y*y)+0.5), 0.1*(cos(x*x+y*y)+0.5)]
rho_c = 0.5*(sin(x*x+y*y)+1.5)
rho_i = 2

S = rho_t + d(u_c*rho_c*vfrac_c)/dx + d(u_c*rho_c*vfrac_c)/dy + rho_c*d(vfrac_i*u_i)/dx + rho_c*d(vfrac_i*u_i)/dy</comment>
              </python>
            </value>
            <output/>
            <stat/>
            <detectors>
              <exclude_from_detectors/>
            </detectors>
          </prescribed>
        </scalar_field>
        <output>
          <include_previous_time_step/>
        </output>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
        <consistent_interpolation/>
      </prognostic>
    </scalar_field>
    <vector_field name="Velocity" rank="1">
      <prognostic>
        <mesh name="VelocityMesh"/>
        <equation name="LinearMomentum"/>
        <spatial_discretisation>
          <continuous_galerkin>
            <stabilisation>
              <no_stabilisation/>
            </stabilisation>
            <mass_terms>
              <lump_mass_matrix>
                <use_submesh/>
              </lump_mass_matrix>
            </mass_terms>
            <advection_terms/>
            <stress_terms>
              <tensor_form/>
            </stress_terms>
          </continuous_galerkin>
          <conservative_advection>
            <real_value rank="0">0.0</real_value>
          </conservative_advection>
        </spatial_discretisation>
        <temporal_discretisation>
          <theta>
            <real_value rank="0">1.0</real_value>
          </theta>
          <relaxation>
            <real_value rank="0">0.5</real_value>
          </relaxation>
        </temporal_discretisation>
        <solver>
          <iterative_method name="gmres">
            <restart>
              <integer_value rank="0">30</integer_value>
            </restart>
          </iterative_method>
          <preconditioner name="eisenstat"/>
          <relative_error>
            <real_value rank="0">1.E-7</real_value>
          </relative_error>
          <max_iterations>
            <integer_value rank="0">10000</integer_value>
          </max_iterations>
          <never_ignore_solver_failures/>
          <diagnostics>
            <monitors/>
          </diagnostics>
        </solver>
        <initial_condition name="WholeMesh">
          <constant>
            <real_value shape="2" dim1="dim" rank="1">0.0 0.0</real_value>
          </constant>
        </initial_condition>
        <boundary_conditions name="All">
          <surface_ids>
            <integer_value shape="4" rank="1">7 8 9 10</integer_value>
          </surface_ids>
          <type name="dirichlet">
            <align_bc_with_cartesian>
              <x_component>
                <python>
                  <string_value lines="20" type="code" language="python">def val(XX,t):
   from math import sin, cos
   x = XX[0]
   y = XX[1]
   return 1.0*(sin(x**2 + y**2) + 0.5)</string_value>
                </python>
              </x_component>
              <y_component>
                <python>
                  <string_value lines="20" type="code" language="python">def val(XX,t):
   from math import sin, cos
   x = XX[0]
   y = XX[1]
   return 0.1*(cos(x**2 + y**2) + 0.5)</string_value>
                </python>
              </y_component>
            </align_bc_with_cartesian>
          </type>
        </boundary_conditions>
        <tensor_field name="Viscosity" rank="2">
          <prescribed>
            <value name="WholeMesh">
              <isotropic>
                <constant>
                  <real_value rank="0">0.7</real_value>
                </constant>
              </isotropic>
            </value>
            <output/>
          </prescribed>
        </tensor_field>
        <vector_field name="Source" rank="1">
          <prescribed>
            <value name="WholeMesh">
              <python>
                <string_value lines="20" type="code" language="python">def val(XX, t):
   from math import sin,cos
   csq = 0.4;
   rho0 = 0.1;
   mu = 0.7;
   adv = 1.0;
   beta = 0.0;
   mass = 1.0;
   x = XX[0];
   y = XX[1];
   rho = 0.5*(sin(x**2 + y**2) + 1.5)
   vfrac = 0.8
   dvfrac_x = 0.0
   dvfrac_y = 0.0
   
   Su = csq*vfrac*x*cos(x**2 + y**2) + 2*(0.500000000000000*sin(x**2 + y**2) + 0.750000000000000)*((0.100000000000000*cos(x**2 + y**2) + 0.0500000000000000)*y*cos(x**2 + y**2) + (sin(x**2 + y**2) + 0.500000000000000)*x*cos(x**2 + y**2))*vfrac + 4*(x**2*sin(x**2 + y**2) + y**2*sin(x**2 + y**2) - cos(x**2 + y**2))*mu*vfrac - 2*(dvfrac_x*x*cos(x**2 + y**2) + dvfrac_y*y*cos(x**2 + y**2))*mu
   
   Sv = csq*vfrac*y*cos(x**2 + y**2) + (0.500000000000000*sin(x**2 + y**2) + 0.750000000000000)*(-0.200000000000000*(0.100000000000000*cos(x**2 + y**2) + 0.0500000000000000)*y*sin(x**2 + y**2) - 0.200000000000000*(sin(x**2 + y**2) + 0.500000000000000)*x*sin(x**2 + y**2))*vfrac - (-0.400000000000000*x**2*cos(x**2 + y**2) - 0.400000000000000*y**2*cos(x**2 + y**2) - 0.400000000000000*sin(x**2 + y**2))*mu*vfrac - (-0.200000000000000*dvfrac_x*x*sin(x**2 + y**2) - 0.200000000000000*dvfrac_y*y*sin(x**2 + y**2))*mu
   
   return (Su/rho, Sv/rho)</string_value>
              </python>
            </value>
            <output/>
            <stat>
              <include_in_stat/>
            </stat>
            <detectors>
              <exclude_from_detectors/>
            </detectors>
          </prescribed>
        </vector_field>
        <output>
          <include_previous_time_step/>
        </output>
        <stat>
          <include_in_stat/>
          <previous_time_step>
            <exclude_from_stat/>
          </previous_time_step>
          <nonlinear_field>
            <exclude_from_stat/>
          </nonlinear_field>
        </stat>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
        <consistent_interpolation/>
      </prognostic>
    </vector_field>
    <scalar_field name="CFLNumber" rank="0">
      <diagnostic>
        <algorithm name="Internal" material_phase_support="multiple"/>
        <mesh name="PressureMesh"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <scalar_field name="PressureAnalytical" rank="0">
      <prescribed>
        <mesh name="PressureMesh"/>
        <value name="WholeMesh">
          <python>
            <string_value lines="20" type="code" language="python">def val(XX,t):
   from math import sin, cos
   csq = 0.4
   rho0 = 0.1
   x = XX[0];
   y = XX[1];
   p = csq*(0.5*(sin(y**2 + x**2) + 1.5) - rho0)
   return p</string_value>
          </python>
        </value>
        <output/>
        <stat/>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
        <do_not_recalculate/>
      </prescribed>
    </scalar_field>
    <scalar_field name="DensityAnalytical" rank="0">
      <prescribed>
        <mesh name="DensityMesh"/>
        <value name="WholeMesh">
          <python>
            <string_value lines="20" type="code" language="python">def val(XX,t):
   from math import sin, cos
   x = XX[0]
   y = XX[1]
   rho = 0.5*(sin(x**2 + y**2) + 1.5)
   return rho</string_value>
            <comment>rho_c = 0.5*(sin(x**2+y**2) + 1.5)</comment>
          </python>
        </value>
        <output/>
        <stat/>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
        <do_not_recalculate/>
      </prescribed>
    </scalar_field>
    <scalar_field name="PressureAbsoluteDifference" rank="0">
      <diagnostic>
        <algorithm name="scalar_python_diagnostic" material_phase_support="single">
          <string_value lines="20" type="code" language="python">field1=state.scalar_fields["Pressure"]
field2=state.scalar_fields["PressureAnalytical"]
for i in range(field.node_count):
   field.set(i, abs(field1.node_val(i)-field2.node_val(i)))</string_value>
        </algorithm>
        <mesh name="PressureMesh"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <scalar_field name="DensityAbsoluteDifference" rank="0">
      <diagnostic>
        <algorithm name="scalar_python_diagnostic" material_phase_support="single">
          <string_value lines="20" type="code" language="python">field1=state.scalar_fields["Density"]
field2=state.scalar_fields["DensityAnalytical"]
for i in range(field.node_count):
   field.set(i, abs(field1.node_val(i)-field2.node_val(i)))</string_value>
        </algorithm>
        <mesh name="DensityMesh"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <scalar_field name="PhaseVolumeFraction" rank="0">
      <prescribed>
        <mesh name="DensityMesh"/>
        <value name="WholeMesh">
          <constant>
            <real_value rank="0">0.8</real_value>
          </constant>
        </value>
        <output/>
        <stat/>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
      </prescribed>
    </scalar_field>
    <scalar_field name="CompressibleContinuityResidual" rank="0">
      <diagnostic>
        <mesh name="PressureMesh"/>
        <algorithm name="Internal" material_phase_support="multiple"/>
        <output/>
        <stat/>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <solver>
          <iterative_method name="gmres">
            <restart>
              <integer_value rank="0">30</integer_value>
            </restart>
          </iterative_method>
          <preconditioner name="sor"/>
          <relative_error>
            <real_value rank="0">1.0e-7</real_value>
          </relative_error>
          <max_iterations>
            <integer_value rank="0">1000</integer_value>
          </max_iterations>
          <never_ignore_solver_failures/>
          <diagnostics>
            <monitors/>
          </diagnostics>
        </solver>
      </diagnostic>
    </scalar_field>
    <scalar_field name="CompressibleContinuityResidualAnalytical" rank="0">
      <prescribed>
        <mesh name="PressureMesh"/>
        <value name="WholeMesh">
          <python>
            <string_value lines="20" type="code" language="python">def val(XX,t):
   from math import sin, cos
   x = XX[0]
   y = XX[1]
   vfrac_c = 0.8
   vfrac_i = 0.2
   continuity = (0.100000000000000*cos(x**2 + y**2) + 0.0500000000000000)*vfrac_c*y*cos(x**2 + y**2) + 2*(0.500000000000000*sin(x**2 + y**2) + 0.750000000000000)*vfrac_c*x*cos(x**2 + y**2) - 0.200000000000000*(0.500000000000000*sin(x**2 + y**2) + 0.750000000000000)*vfrac_c*y*sin(x**2 + y**2) + 2*(0.500000000000000*sin(x**2 + y**2) + 0.750000000000000)*vfrac_i*x*cos(x**2 + y**2) - 0.200000000000000*(0.500000000000000*sin(x**2 + y**2) + 0.750000000000000)*vfrac_i*y*sin(x**2 + y**2) + (sin(x**2 + y**2) + 0.500000000000000)*vfrac_c*x*cos(x**2 + y**2)
   return continuity</string_value>
            <comment>continuity equation = vfrac_c*d(rho_c)/dt + div(vfrac_c*rho_c*u_c) + rho_c*\sum(div(vfrac_i*u_i))</comment>
          </python>
        </value>
        <output/>
        <stat/>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
        <do_not_recalculate/>
      </prescribed>
    </scalar_field>
    <scalar_field name="CompressibleContinuityResidualAbsoluteDifference" rank="0">
      <diagnostic>
        <algorithm name="scalar_python_diagnostic" material_phase_support="single">
          <string_value lines="20" type="code" language="python">field1=state.scalar_fields["CompressibleContinuityResidual"]
field2=state.scalar_fields["CompressibleContinuityResidualAnalytical"]
for i in range(field.node_count):
   field.set(i, abs(field1.node_val(i)-field2.node_val(i)))</string_value>
        </algorithm>
        <mesh name="PressureMesh"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <vector_field name="VelocityAnalytical" rank="1">
      <prescribed>
        <mesh name="VelocityMesh"/>
        <value name="WholeMesh">
          <python>
            <string_value lines="20" type="code" language="python">def val(XX,t):
   from math import sin, cos
   x = XX[0]
   y = XX[1]
   u = 1.0*(sin(x**2 + y**2) + 0.5)
   v = 0.1*(cos(x**2 + y**2) + 0.5)
   return (u, v)</string_value>
            <comment>u_i = [1.0*(sin(x*x+y*y)+0.5), 0.1*(cos(x*x+y*y)+0.5)]</comment>
          </python>
        </value>
        <output/>
        <stat>
          <include_in_stat/>
        </stat>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
        <do_not_recalculate/>
      </prescribed>
    </vector_field>
    <vector_field name="VelocityAbsoluteDifference" rank="1">
      <diagnostic>
        <algorithm name="vector_python_diagnostic" material_phase_support="single">
          <string_value lines="20" type="code" language="python">field1=state.vector_fields["Velocity"]
field2=state.vector_fields["VelocityAnalytical"]
for i in range(field.node_count):
   field.set(i, abs(field1.node_val(i)-field2.node_val(i)))</string_value>
        </algorithm>
        <mesh name="VelocityMesh"/>
        <output/>
        <stat>
          <include_in_stat/>
        </stat>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </vector_field>
  </material_phase>
  <material_phase name="Particle">
    <equation_of_state>
      <fluids>
        <linear>
          <reference_density>
            <real_value rank="0">2.0</real_value>
          </reference_density>
        </linear>
      </fluids>
    </equation_of_state>
    <scalar_field name="Pressure" rank="0">
      <aliased material_phase_name="Fluid" field_name="Pressure"/>
    </scalar_field>
    <scalar_field name="Density" rank="0">
      <diagnostic>
        <algorithm name="Internal" material_phase_support="multiple"/>
        <mesh name="DensityMesh"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <vector_field name="Velocity" rank="1">
      <prognostic>
        <mesh name="VelocityMesh"/>
        <equation name="LinearMomentum"/>
        <spatial_discretisation>
          <continuous_galerkin>
            <stabilisation>
              <no_stabilisation/>
            </stabilisation>
            <mass_terms>
              <lump_mass_matrix>
                <use_submesh/>
              </lump_mass_matrix>
            </mass_terms>
            <advection_terms/>
            <stress_terms>
              <tensor_form/>
            </stress_terms>
          </continuous_galerkin>
          <conservative_advection>
            <real_value rank="0">0.0</real_value>
          </conservative_advection>
        </spatial_discretisation>
        <temporal_discretisation>
          <theta>
            <real_value rank="0">1.0</real_value>
          </theta>
          <relaxation>
            <real_value rank="0">0.5</real_value>
          </relaxation>
        </temporal_discretisation>
        <solver>
          <iterative_method name="gmres">
            <restart>
              <integer_value rank="0">30</integer_value>
            </restart>
          </iterative_method>
          <preconditioner name="eisenstat"/>
          <relative_error>
            <real_value rank="0">1.E-7</real_value>
          </relative_error>
          <max_iterations>
            <integer_value rank="0">10000</integer_value>
          </max_iterations>
          <never_ignore_solver_failures/>
          <diagnostics>
            <monitors/>
          </diagnostics>
        </solver>
        <initial_condition name="WholeMesh">
          <constant>
            <real_value shape="2" dim1="dim" rank="1">0.0 0.0</real_value>
          </constant>
        </initial_condition>
        <boundary_conditions name="All">
          <surface_ids>
            <integer_value shape="4" rank="1">7 8 9 10</integer_value>
          </surface_ids>
          <type name="dirichlet">
            <align_bc_with_cartesian>
              <x_component>
                <python>
                  <string_value lines="20" type="code" language="python">def val(XX,t):
   from math import sin, cos
   x = XX[0]
   y = XX[1]
   return 1.0*(sin(x**2 + y**2) + 0.5)</string_value>
                </python>
              </x_component>
              <y_component>
                <python>
                  <string_value lines="20" type="code" language="python">def val(XX,t):
   from math import sin, cos
   x = XX[0]
   y = XX[1]
   return 0.1*(cos(x**2 + y**2) + 0.5)</string_value>
                </python>
              </y_component>
            </align_bc_with_cartesian>
          </type>
        </boundary_conditions>
        <tensor_field name="Viscosity" rank="2">
          <prescribed>
            <value name="WholeMesh">
              <isotropic>
                <constant>
                  <real_value rank="0">0.7</real_value>
                </constant>
              </isotropic>
            </value>
            <output/>
          </prescribed>
        </tensor_field>
        <vector_field name="Source" rank="1">
          <prescribed>
            <value name="WholeMesh">
              <python>
                <string_value lines="20" type="code" language="python">def val(XX, t):
   from math import sin,cos
   csq = 0.4;
   rho0 = 0.1;
   mu = 0.7;
   adv = 1.0;
   beta = 0.0;
   mass = 1.0;
   x = XX[0];
   y = XX[1];
   rho = 2.0
   vfrac = 0.2
   dvfrac_x = 0.0
   dvfrac_y = 0.0
   
   Su = csq*vfrac*x*cos(x**2 + y**2) + 4*(x**2*sin(x**2 + y**2) + y**2*sin(x**2 + y**2) - cos(x**2 + y**2))*mu*vfrac - 2*(dvfrac_x*x*cos(x**2 + y**2) + dvfrac_y*y*cos(x**2 + y**2))*mu + 4.00000000000000*((0.100000000000000*cos(x**2 + y**2) + 0.0500000000000000)*y*cos(x**2 + y**2) + (sin(x**2 + y**2) + 0.500000000000000)*x*cos(x**2 + y**2))*vfrac
   
   Sv = csq*vfrac*y*cos(x**2 + y**2) - (-0.400000000000000*x**2*cos(x**2 + y**2) - 0.400000000000000*y**2*cos(x**2 + y**2) - 0.400000000000000*sin(x**2 + y**2))*mu*vfrac - (-0.200000000000000*dvfrac_x*x*sin(x**2 + y**2) - 0.200000000000000*dvfrac_y*y*sin(x**2 + y**2))*mu + 2.00000000000000*(-0.200000000000000*(0.100000000000000*cos(x**2 + y**2) + 0.0500000000000000)*y*sin(x**2 + y**2) - 0.200000000000000*(sin(x**2 + y**2) + 0.500000000000000)*x*sin(x**2 + y**2))*vfrac
   
   return (Su/rho, Sv/rho)</string_value>
              </python>
            </value>
            <output/>
            <stat>
              <include_in_stat/>
            </stat>
            <detectors>
              <exclude_from_detectors/>
            </detectors>
          </prescribed>
        </vector_field>
        <output>
          <include_previous_time_step/>
        </output>
        <stat>
          <include_in_stat/>
          <previous_time_step>
            <exclude_from_stat/>
          </previous_time_step>
          <nonlinear_field>
            <exclude_from_stat/>
          </nonlinear_field>
        </stat>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
        <consistent_interpolation/>
      </prognostic>
    </vector_field>
    <scalar_field name="CFLNumber" rank="0">
      <diagnostic>
        <algorithm name="Internal" material_phase_support="multiple"/>
        <mesh name="PressureMesh"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <scalar_field name="PhaseVolumeFraction" rank="0">
      <diagnostic>
        <mesh name="DensityMesh"/>
        <algorithm name="Internal" material_phase_support="multiple"/>
        <output/>
        <stat/>
        <detectors>
          <include_in_detectors/>
        </detectors>
      </diagnostic>
    </scalar_field>
    <vector_field name="VelocityAnalytical" rank="1">
      <prescribed>
        <mesh name="VelocityMesh"/>
        <value name="WholeMesh">
          <python>
            <string_value lines="20" type="code" language="python">def val(XX,t):
   from math import sin, cos
   x = XX[0]
   y = XX[1]
   u = 1.0*(sin(x**2 + y**2) + 0.5)
   v = 0.1*(cos(x**2 + y**2) + 0.5)
   return (u, v)</string_value>
            <comment>u_c = [1.0*(sin(x*x+y*y)+0.5), 0.1*(cos(x*x+y*y)+0.5)]</comment>
          </python>
        </value>
        <output/>
        <stat>
          <include_in_stat/>
        </stat>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
        <do_not_recalculate/>
      </prescribed>
    </vector_field>
    <vector_field name="VelocityAbsoluteDifference" rank="1">
      <diagnostic>
        <algorithm name="vector_python_diagnostic" material_phase_support="single">
          <string_value lines="20" type="code" language="python">field1=state.vector_fields["Velocity"]
field2=state.vector_fields["VelocityAnalytical"]
for i in range(field.node_count):
   field.set(i, abs(field1.node_val(i)-field2.node_val(i)))</string_value>
        </algorithm>
        <mesh name="VelocityMesh"/>
        <output/>
        <stat>
          <include_in_stat/>
        </stat>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </vector_field>
  </material_phase>
</fluidity_options>
