<?xml version='1.0' encoding='UTF-8'?>
<testproblem>
  <name>Parallel DG</name>
  <owner userid="dham"/>
  <tags>flml parallel</tags>
  <problem_definition length="special" nprocs="2">
    <command_line>make clean-run-debug &amp;&amp; mpiexec ../../bin/flredecomp -i 1 -o 2 -v -l cube cube_flredecomp &amp;&amp; mpiexec fluidity -v2 -l cube_flredecomp.flml</command_line>
  </problem_definition>
  <variables>
    <variable name="times" language="python">
import fluidity_tools
s = fluidity_tools.stat_parser("cube.stat")
times = s["ElapsedTime"]["value"]
    </variable>
    <variable name="timesteps" language="python">
import fluidity_tools
s = fluidity_tools.stat_parser("cube.stat")
timesteps = len(s["ElapsedTime"]["value"])
    </variable>
    <variable name="solvers_converged" language="python">
import os
files = os.listdir("./")
solvers_converged = not "matrixdump" in files and not "matrixdump.info" in files 
    </variable>
    <variable name="final_vtus" language="python">
import vtktools
# parallel, so pvtu
final_vtus = [vtktools.vtu("cube_2.pvtu")]
    </variable>
  </variables>
 <pass_tests>
    <test name="Simulation completed" language="python">
import fluidity_tools
fluidity_tools.compare_variable(times[-1], 2.0, 1.0e-6)
assert(timesteps == 2)
    </test>
    <test name="Solvers converged" language="python">
assert(solvers_converged)
    </test>
    <test name="Correct velocity within 3.0e-3" language="python">
for vtu in final_vtus:
    print("Testing vtu " + vtu.filename)
    velocity = vtu.GetVectorField("Velocity")
    for vel in velocity:
        assert(len(vel) == 3)
        # tolerance loosened from 1.0e-6 to 3.0e-3
        assert(abs(vel[0] - 1.0) &lt; 3.0e-3)
        assert(abs(vel[1]) &lt; 3.0e-3)
        assert(abs(vel[2]) &lt; 3.0e-3)
</test>
  </pass_tests>
  <warn_tests>
  </warn_tests>
</testproblem>
