<?xml version="1.0" encoding="UTF-8" ?>

<testproblem>
  <name>Parallel periodic channel with wind-forcing and quadratic bottom drag.</name>
  <owner userid="amcvicar"/>
  <tags>flml zoltan parallel</tags>
  <problem_definition length="short" nprocs="4">
    <command_line>mpiexec flredecomp -i 1 -o 4 channel_parallel_periodised channel_parallel_periodised_flredecomp &amp;&amp;
mpiexec fluidity -v3 -l  channel_parallel_periodised_flredecomp.flml </command_line>
  </problem_definition>
  <variables>
    <variable name="solvers_converged" language="python">
import os
files = os.listdir("./")
solvers_converged = not "matrixdump" in files and not "matrixdump.info" in files
    </variable>
    <variable name="numerical_solution" language="python">
import vtktools
# read in the .vtu
u=vtktools.vtu("channel_parallel_1.pvtu")
uvw=u.GetField('Velocity');
numerical_solution=uvw[:,0];
    </variable>
    <variable name="analytical_solution" language="python">
# compute analytical solution, this based on the following:
# - we expect a linear profile in the interior
# - at the bottom: c_D u_b^2=mu*dudz
# - at the top :      s_wind=mu*dudz
import fluidity_tools
import vtktools
import math

# friction coefficient
c_D=0.0025
# viscosity
mu=1.0
# wind forcing
s_wind=6.25e-4

# velocity gradient
dudz=s_wind/mu
# bottom velocity
u_b=math.sqrt(mu*dudz/c_D)

# read in the coordinates from the .vtu
u=vtktools.vtu("channel_parallel_1.pvtu")
xyz=u.GetLocations()

analytical_solution=xyz[:,2]*dudz+u_b;
    </variable>
  </variables>
  <pass_tests>
    <test name="Solvers converged" language="python">
      assert(solvers_converged)
    </test>
    <test name="Compare with analytical solution" language="python">
import fluidity_tools
fluidity_tools.compare_variables(numerical_solution, analytical_solution, 1e-3)
    </test>
  </pass_tests>
  <warn_tests>
  </warn_tests>
</testproblem>
