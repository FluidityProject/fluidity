<?xml version='1.0' encoding='utf-8'?>
<fluidity_options>
  <simulation_name>
    <string_value lines="1">MMS_A</string_value>
  </simulation_name>
  <problem_type>
    <string_value lines="1">stokes</string_value>
  </problem_type>
  <geometry>
    <dimension>
      <integer_value rank="0">2</integer_value>
    </dimension>
    <mesh name="CoordinateMesh">
      <from_mesh>
        <mesh name="InputMesh"/>
        <stat>
          <exclude_from_stat/>
        </stat>
      </from_mesh>
    </mesh>
    <mesh name="VelocityMesh">
      <from_mesh>
        <mesh name="InputMesh"/>
        <mesh_shape>
          <polynomial_degree>
            <integer_value rank="0">2</integer_value>
          </polynomial_degree>
        </mesh_shape>
        <stat>
          <exclude_from_stat/>
        </stat>
      </from_mesh>
    </mesh>
    <mesh name="PressureMesh">
      <from_mesh>
        <mesh name="InputMesh"/>
        <stat>
          <exclude_from_stat/>
        </stat>
      </from_mesh>
    </mesh>
    <mesh name="InputMesh">
      <from_file file_name="MMS_A">
        <format name="gmsh"/>
        <stat>
          <include_in_stat/>
        </stat>
      </from_file>
    </mesh>
    <quadrature>
      <degree>
        <integer_value rank="0">4</integer_value>
      </degree>
    </quadrature>
  </geometry>
  <io>
    <dump_format>
      <string_value>vtk</string_value>
    </dump_format>
    <dump_period>
      <constant>
        <real_value rank="0">15.0</real_value>
      </constant>
    </dump_period>
    <output_mesh name="VelocityMesh"/>
    <checkpointing>
      <checkpoint_period_in_dumps>
        <integer_value rank="0">1000</integer_value>
      </checkpoint_period_in_dumps>
      <checkpoint_at_end/>
    </checkpointing>
    <stat/>
  </io>
  <timestepping>
    <current_time>
      <real_value rank="0">0.0</real_value>
    </current_time>
    <timestep>
      <real_value rank="0">1.0</real_value>
    </timestep>
    <finish_time>
      <real_value rank="0">20.0</real_value>
    </finish_time>
    <steady_state>
      <tolerance>
        <real_value rank="0">1.E-8</real_value>
        <infinity_norm/>
      </tolerance>
    </steady_state>
  </timestepping>
  <material_phase name="NS">
    <equation_of_state>
      <fluids>
        <linear>
          <reference_density>
            <real_value rank="0">1.0</real_value>
          </reference_density>
        </linear>
      </fluids>
    </equation_of_state>
    <scalar_field rank="0" name="Pressure">
      <prognostic>
        <mesh name="PressureMesh"/>
        <spatial_discretisation>
          <continuous_galerkin>
            <remove_stabilisation_term/>
          </continuous_galerkin>
        </spatial_discretisation>
        <scheme>
          <poisson_pressure_solution>
            <string_value lines="1">never</string_value>
          </poisson_pressure_solution>
          <use_projection_method>
            <full_schur_complement>
              <inner_matrix name="FullMomentumMatrix">
                <solver>
                  <iterative_method name="cg"/>
                  <preconditioner name="sor"/>
                  <relative_error>
                    <real_value rank="0">1E-10</real_value>
                  </relative_error>
                  <max_iterations>
                    <integer_value rank="0">10000</integer_value>
                  </max_iterations>
                  <start_from_zero/>
                  <never_ignore_solver_failures/>
                  <diagnostics>
                    <monitors/>
                  </diagnostics>
                </solver>
              </inner_matrix>
              <preconditioner_matrix name="DiagonalSchurComplement"/>
            </full_schur_complement>
          </use_projection_method>
        </scheme>
        <solver>
          <iterative_method name="fgmres"/>
          <preconditioner name="jacobi"/>
          <relative_error>
            <real_value rank="0">1.E-10</real_value>
          </relative_error>
          <absolute_error>
            <real_value rank="0">1e-16</real_value>
          </absolute_error>
          <max_iterations>
            <integer_value rank="0">1000</integer_value>
          </max_iterations>
          <remove_null_space/>
          <never_ignore_solver_failures/>
          <diagnostics>
            <monitors/>
          </diagnostics>
        </solver>
        <output>
          <include_previous_time_step/>
        </output>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
        <consistent_interpolation/>
      </prognostic>
    </scalar_field>
    <scalar_field rank="0" name="Density">
      <diagnostic>
        <algorithm name="Internal" material_phase_support="multiple"/>
        <mesh name="VelocityMesh"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <vector_field rank="1" name="Velocity">
      <prognostic>
        <mesh name="VelocityMesh"/>
        <equation name="Boussinesq"/>
        <spatial_discretisation>
          <continuous_galerkin>
            <stabilisation>
              <no_stabilisation/>
            </stabilisation>
            <mass_terms>
              <exclude_mass_terms/>
            </mass_terms>
            <advection_terms>
              <exclude_advection_terms/>
            </advection_terms>
            <stress_terms>
              <partial_stress_form/>
            </stress_terms>
            <buoyancy/>
          </continuous_galerkin>
          <conservative_advection>
            <real_value rank="0">0.0</real_value>
          </conservative_advection>
        </spatial_discretisation>
        <temporal_discretisation>
          <theta>
            <real_value rank="0">1</real_value>
          </theta>
          <relaxation>
            <real_value rank="0">1</real_value>
          </relaxation>
        </temporal_discretisation>
        <solver>
          <iterative_method name="cg"/>
          <preconditioner name="sor"/>
          <relative_error>
            <real_value rank="0">1.E-7</real_value>
          </relative_error>
          <max_iterations>
            <integer_value rank="0">1000</integer_value>
          </max_iterations>
          <never_ignore_solver_failures/>
          <diagnostics>
            <monitors/>
          </diagnostics>
        </solver>
        <initial_condition name="WholeMesh">
          <constant>
            <real_value rank="1" dim1="dim" shape="2">0.0 0.0</real_value>
          </constant>
        </initial_condition>
        <boundary_conditions name="all_sides">
          <surface_ids>
            <integer_value rank="1" shape="4">7 8 9 10</integer_value>
          </surface_ids>
          <type name="dirichlet">
            <align_bc_with_cartesian>
              <x_component>
                <python>
                  <string_value type="code" language="python" lines="20">def val(X,t):
   from math import sin, cos
   # Shear rotation about origin.
   u = sin(X[0])*cos(X[1])
   return u</string_value>
                </python>
              </x_component>
              <y_component>
                <python>
                  <string_value type="code" language="python" lines="20">def val(X,t):
   from math import sin, cos
   # Shear rotation about origin.
   v = -1.0*cos(X[0])*sin(X[1])
   return v</string_value>
                </python>
              </y_component>
            </align_bc_with_cartesian>
          </type>
        </boundary_conditions>
        <tensor_field name="Viscosity" rank="2">
          <diagnostic>
            <algorithm name="tensor_python_diagnostic" material_phase_support="single">
              <string_value type="code" language="python" lines="20">from math import exp, log
from numpy import zeros

Temperature=state.scalar_fields["Temperature"]

b=log(1000)
deltaT=1.0

dim = 2
visc = zeros((dim,dim))

for n in range(Temperature.node_count):
   T = Temperature.node_val(n)
   nu = exp(-b*T/deltaT)
   for i in range(dim):
      visc[i,i] = nu
   field.set(n, visc)</string_value>
            </algorithm>
            <output/>
            <stat>
              <include_in_stat/>
            </stat>
            <particles>
              <exclude_from_particles/>
            </particles>
          </diagnostic>
        </tensor_field>
        <vector_field name="Source" rank="1">
          <prescribed>
            <value name="WholeMesh">
              <python>
                <string_value type="code" language="python" lines="20">def val(XX, t):
   from math import sin,cos,log,exp,pi
   from numpy import arctanh
   b=log(1000);
   deltaT=1.0;
   A = 0.25;
   B = 1.9
   adv = 0.0;
   beta = 0.0;
   mass = 0.0;
   rho = 1.0;
   x = XX[0];
   y = XX[1];
   Su = A*B*b*exp(-0.5*(2*A*sin(0.5*(arctanh((y/pi - 0.5)*B)/arctanh(0.5*B) + 1)*pi)*cos(0.5*(arctanh((x/pi - 0.5)*B)/arctanh(0.5*B) + 1)*pi) - arctanh((y/pi - 0.5)*B)/arctanh(0.5*B) + 1)*b/deltaT)*sin(0.5*(arctanh((x/pi - 0.5)*B)/arctanh(0.5*B) + 1)*pi)*sin(0.5*(arctanh((y/pi - 0.5)*B)/arctanh(0.5*B) + 1)*pi)*cos(x)*cos(y)/(((x/pi - 0.5)**2*B**2 - 1)*deltaT*arctanh(0.5*B)) + (sin(x)*sin(y)**2*cos(x) + sin(x)*cos(x)*cos(y)**2)*adv*rho + 2*exp(-0.5*(2*A*sin(0.5*(arctanh((y/pi - 0.5)*B)/arctanh(0.5*B) + 1)*pi)*cos(0.5*(arctanh((x/pi - 0.5)*B)/arctanh(0.5*B) + 1)*pi) - arctanh((y/pi - 0.5)*B)/arctanh(0.5*B) + 1)*b/deltaT)*sin(x)*cos(y) - sin(x)*cos(y)
   Sv = (A*B*cos(0.5*(arctanh((x/pi - 0.5)*B)/arctanh(0.5*B) + 1)*pi)*cos(0.5*(arctanh((y/pi - 0.5)*B)/arctanh(0.5*B) + 1)*pi)/(((y/pi - 0.5)**2*B**2 - 1)*arctanh(0.5*B)) - B/(((y/pi - 0.5)**2*B**2 - 1)*pi*arctanh(0.5*B)))*b*exp(-0.5*(2*A*sin(0.5*(arctanh((y/pi - 0.5)*B)/arctanh(0.5*B) + 1)*pi)*cos(0.5*(arctanh((x/pi - 0.5)*B)/arctanh(0.5*B) + 1)*pi) - arctanh((y/pi - 0.5)*B)/arctanh(0.5*B) + 1)*b/deltaT)*cos(x)*cos(y)/deltaT + (sin(x)**2*sin(y)*cos(y) + sin(y)*cos(x)**2*cos(y))*adv*rho - 2*exp(-0.5*(2*A*sin(0.5*(arctanh((y/pi - 0.5)*B)/arctanh(0.5*B) + 1)*pi)*cos(0.5*(arctanh((x/pi - 0.5)*B)/arctanh(0.5*B) + 1)*pi) - arctanh((y/pi - 0.5)*B)/arctanh(0.5*B) + 1)*b/deltaT)*sin(y)*cos(x) - sin(y)*cos(x)
   return (Su, Sv)</string_value>
                <comment>u(x,y,rho,beta,nu,adv,mass,t) = sin(x)*cos(y)&#13;
v(x,y,rho,beta,nu,adv,mass,t) = -cos(x)*sin(y)
p(x,y,rho,beta,nu,adv,mass,t) = cos(x)*cos(y)
phi(x,pi,B)=(1+arctanh((x/pi-0.5)*B)/arctanh(0.5*B))*pi/2
T(x,y,t,nu,mass,adv,beta,pi,A) = 1 - phi(y,pi,B)/pi + A*(cos(phi(x,pi,B))*sin(phi(y,pi,B)))
nu(x,y,b,deltaT) = exp(-b*T/deltaT)&#13;

u_t = diff(u,t)
v_t = diff(v,t)

u_x = diff(u,x)&#13;
u_y = diff(u,y)
v_x = diff(v,x)
v_y = diff(v,y)

nu_u_x = nu*u_x
nu_u_y = nu*u_y
nu_v_x = nu*v_x
nu_v_y = nu*v_y

nu_u_xx = diff(nu_u_x,x)
nu_u_yy = diff(nu_u_y,y)
nu_v_xx = diff(nu_v_x,x)
nu_v_yy = diff(nu_v_y,y)
nu_v_yx = diff(nu_v_x,y)
nu_u_xy = diff(nu_u_y,x)

p_x = diff(p,x)
p_y = diff(p,y)

mass*rho*u_t + adv*rho*(u*u_x+v*u_y + beta*(u*u_x + u*v_y)) + p_x - 2*nu_u_xx - nu_u_yy - nu_v_yx
mass*rho*v_t + adv*rho*(u*v_x+v*v_y + beta*(v*u_x + v*v_y))  +  p_y - 2*nu_v_yy - nu_v_xx - nu_u_xy</comment>
              </python>
            </value>
            <output/>
            <stat>
              <include_in_stat/>
            </stat>
            <detectors>
              <exclude_from_detectors/>
            </detectors>
            <particles>
              <exclude_from_particles/>
            </particles>
          </prescribed>
        </vector_field>
        <output>
          <include_previous_time_step/>
        </output>
        <stat>
          <include_in_stat/>
          <previous_time_step>
            <exclude_from_stat/>
          </previous_time_step>
          <nonlinear_field>
            <exclude_from_stat/>
          </nonlinear_field>
        </stat>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
        <consistent_interpolation/>
      </prognostic>
    </vector_field>
    <scalar_field rank="0" name="CFLNumber">
      <diagnostic>
        <algorithm name="Internal" material_phase_support="multiple"/>
        <mesh name="VelocityMesh"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <scalar_field rank="0" name="PressureAnalytical">
      <prescribed>
        <mesh name="PressureMesh"/>
        <value name="WholeMesh">
          <python>
            <string_value type="code" language="python" lines="20">def val(X,t):
   from math import cos
   p = cos(X[0])*cos(X[1])
   return p</string_value>
          </python>
        </value>
        <output/>
        <stat/>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
      </prescribed>
    </scalar_field>
    <scalar_field rank="0" name="ScalarAbsoluteDifference">
      <diagnostic field_name_a="PressureAnalytical" field_name_b="Pressure">
        <algorithm name="Internal" material_phase_support="multiple"/>
        <mesh name="PressureMesh"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
        <relative_to_average/>
      </diagnostic>
    </scalar_field>
    <scalar_field rank="0" name="FiniteElementDivergence">
      <diagnostic field_name="Velocity">
        <algorithm name="Internal" material_phase_support="multiple" legacy="true"/>
        <mesh name="PressureMesh"/>
        <solver>
          <iterative_method name="cg"/>
          <preconditioner name="sor"/>
          <relative_error>
            <real_value rank="0">1.E-10</real_value>
          </relative_error>
          <max_iterations>
            <integer_value rank="0">10000</integer_value>
          </max_iterations>
          <never_ignore_solver_failures/>
          <diagnostics>
            <monitors/>
          </diagnostics>
        </solver>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <scalar_field rank="0" name="Temperature">
      <prognostic>
        <mesh name="VelocityMesh"/>
        <equation name="AdvectionDiffusion"/>
        <spatial_discretisation>
          <continuous_galerkin>
            <stabilisation>
              <no_stabilisation/>
            </stabilisation>
            <advection_terms/>
            <mass_terms>
              <exclude_mass_terms/>
            </mass_terms>
          </continuous_galerkin>
          <conservative_advection>
            <real_value rank="0">0.0</real_value>
          </conservative_advection>
        </spatial_discretisation>
        <temporal_discretisation>
          <theta>
            <real_value rank="0">1.0</real_value>
          </theta>
        </temporal_discretisation>
        <solver>
          <iterative_method name="gmres">
            <restart>
              <integer_value rank="0">30</integer_value>
            </restart>
          </iterative_method>
          <preconditioner name="sor"/>
          <relative_error>
            <real_value rank="0">1.e-8</real_value>
          </relative_error>
          <max_iterations>
            <integer_value rank="0">10000</integer_value>
          </max_iterations>
          <never_ignore_solver_failures/>
          <diagnostics>
            <monitors/>
          </diagnostics>
        </solver>
        <initial_condition name="WholeMesh">
          <constant>
            <real_value rank="0">0.0</real_value>
          </constant>
        </initial_condition>
        <boundary_conditions name="Top">
          <surface_ids>
            <integer_value rank="1" shape="1">9</integer_value>
          </surface_ids>
          <type name="dirichlet">
            <constant>
              <real_value rank="0">0.0</real_value>
            </constant>
          </type>
        </boundary_conditions>
        <boundary_conditions name="Bottom">
          <surface_ids>
            <integer_value rank="1" shape="1">7</integer_value>
          </surface_ids>
          <type name="dirichlet">
            <constant>
              <real_value rank="0">1.0</real_value>
            </constant>
          </type>
        </boundary_conditions>
        <tensor_field name="Diffusivity" rank="2">
          <prescribed>
            <value name="WholeMesh">
              <isotropic>
                <constant>
                  <real_value rank="0">0.7</real_value>
                </constant>
              </isotropic>
            </value>
            <output/>
            <particles>
              <exclude_from_particles/>
            </particles>
          </prescribed>
        </tensor_field>
        <scalar_field name="Source" rank="0">
          <prescribed>
            <value name="WholeMesh">
              <python>
                <string_value type="code" language="python" lines="20">def val(XX, t):
   from math import sin,cos,pi
   from numpy import arctanh
   nu = 0.7;
   omega = 0.0;
   mass = 0.0;
   adv = 1.0;
   beta = 0.0;
   A = 0.25;
   B = 1.9;
   x = XX[0];
   y = XX[1];
   S = 0.5*(A*B*sin(1.0/2.0*(arctanh((x/pi - 0.5)*B)/arctanh(0.5*B) + 1.0)*pi)*sin(1.0/2.0*(arctanh((y/pi - 0.5)*B)/arctanh(0.5*B) + 1.0)*pi)*sin(x)*cos(y)/(((x/pi - 0.5)**2.0*B**2.0 - 1.0)*arctanh(0.5*B)) + (A*B*cos(1.0/2.0*(arctanh((x/pi - 0.5)*B)/arctanh(0.5*B) + 1.0)*pi)*cos(1.0/2.0*(arctanh((y/pi - 0.5)*B)/arctanh(0.5*B) + 1.0)*pi)/(((y/pi - 0.5)**2.0*B**2.0 - 1.0)*arctanh(0.5*B)) - B/(((y/pi - 0.5)**2.0*B**2.0 - 1.0)*pi*arctanh(0.5*B)))*sin(y)*cos(x))*adv - 1.0/4*(2.0*(2.0*y/pi - 1.0)*A*B**3*cos(1.0/2.0*(arctanh((x/pi - 0.5)*B)/arctanh(0.5*B) + 1.0)*pi)*cos(1.0/2.0*(arctanh((y/pi - 0.5)*B)/arctanh(0.5*B) + 1.0)*pi)/(((y/pi - 0.5)**2.0*B**2.0 - 1.0)**2.0*pi*arctanh(0.5*B)) - 2.0*(2.0*x/pi - 1.0)*A*B**3*sin(1.0/2.0*(arctanh((x/pi - 0.5)*B)/arctanh(0.5*B) + 1.0)*pi)*sin(1.0/2.0*(arctanh((y/pi - 0.5)*B)/arctanh(0.5*B) + 1.0)*pi)/(((x/pi - 0.5)**2.0*B**2.0 - 1.0)**2.0*pi*arctanh(0.5*B)) - A*B**2.0*sin(1.0/2.0*(arctanh((y/pi - 0.5)*B)/arctanh(0.5*B) + 1.0)*pi)*cos(1.0/2.0*(arctanh((x/pi - 0.5)*B)/arctanh(0.5*B) + 1.0)*pi)/(((x/pi - 0.5)**2.0*B**2.0 - 1.0)**2.0*arctanh(0.5*B)**2.0) - A*B**2.0*sin(1.0/2.0*(arctanh((y/pi - 0.5)*B)/arctanh(0.5*B) + 1.0)*pi)*cos(1.0/2.0*(arctanh((x/pi - 0.5)*B)/arctanh(0.5*B) + 1.0)*pi)/(((y/pi - 0.5)**2.0*B**2.0 - 1.0)**2.0*arctanh(0.5*B)**2.0) - 2.0*(2.0*y/pi - 1.0)*B**3/(((y/pi - 0.5)**2.0*B**2.0 - 1.0)**2.0*pi**2.0*arctanh(0.5*B)))*nu
   return S</string_value>
                <comment>phi(x,pi,B)=(1+arctanh((x/pi-0.5)*B)/arctanh(0.5*B))*pi/2
T(x,y,t,nu,mass,adv,beta,pi,A,B) = 1 - phi(y,pi,B)/pi + A*(cos(phi(x,pi,B))*sin(phi(y,pi,B)))
T_t = diff(T,t)&#13;
T_x = diff(T,x)&#13;
T_y = diff(T,y)
T_xx = diff(T_x,x)
T_yy = diff(T_y,y)

u(x,y,rho,beta,nu,adv,mass,t) = sin(x)*cos(y)&#13;
v(x,y,rho,beta,nu,adv,masst) = -cos(x)*sin(y)
u_x = diff(u,x)&#13;
u_y = diff(u,y)
v_x = diff(v,x)&#13;
v_y = diff(v,y)

S = mass*T_t + adv*(u*T_x + v*T_y + beta*(T*(u_x + v_y))) - nu*(T_xx + T_yy)</comment>
              </python>
            </value>
            <output/>
            <stat/>
            <detectors>
              <exclude_from_detectors/>
            </detectors>
            <particles>
              <exclude_from_particles/>
            </particles>
          </prescribed>
        </scalar_field>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
        <consistent_interpolation/>
      </prognostic>
    </scalar_field>
    <scalar_field rank="0" name="TemperatureAnalytical">
      <prescribed>
        <mesh name="VelocityMesh"/>
        <value name="WholeMesh">
          <python>
            <string_value type="code" language="python" lines="20">def val(XX,t):
  from math import cos, sin, pi
  from numpy import arctanh
  A = 0.25;
  B = 1.9;
  x=XX[0];
  y=XX[1];
  phi_x=(arctanh((x/pi-0.5)*B)/arctanh(0.5*B)+1.0)*pi/2.0
  phi_y=(arctanh((y/pi-0.5)*B)/arctanh(0.5*B)+1.0)*pi/2.0
  T = 1 - phi_y/pi + A*(cos(phi_x)*sin(phi_y))
  return T</string_value>
          </python>
        </value>
        <output/>
        <stat/>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
      </prescribed>
    </scalar_field>
    <scalar_field rank="0" name="TemperatureAbsoluteDifference">
      <diagnostic>
        <algorithm name="scalar_difference" material_phase_support="single" source_field_1_name="Temperature" source_field_1_type="scalar" source_field_2_name="TemperatureAnalytical" source_field_2_type="scalar">
          <absolute_difference/>
        </algorithm>
        <mesh name="VelocityMesh"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <vector_field rank="1" name="VelocityAnalytical">
      <prescribed>
        <mesh name="VelocityMesh"/>
        <value name="WholeMesh">
          <python>
            <string_value type="code" language="python" lines="20">def val(X,t):
   from math import sin, cos
   # Shear rotation about origin.
   return (sin(X[0])*cos(X[1]), -1.0*cos(X[0])*sin(X[1]))</string_value>
          </python>
        </value>
        <output/>
        <stat>
          <include_in_stat/>
        </stat>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
      </prescribed>
    </vector_field>
    <vector_field rank="1" name="VectorAbsoluteDifference">
      <diagnostic field_name_a="VelocityAnalytical" field_name_b="Velocity">
        <algorithm name="Internal" material_phase_support="multiple"/>
        <mesh name="VelocityMesh"/>
        <output/>
        <stat>
          <include_in_stat/>
        </stat>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </vector_field>
    <tensor_field rank="2" name="ViscosityAnalytical">
      <diagnostic>
        <algorithm name="tensor_python_diagnostic" material_phase_support="single">
          <string_value type="code" language="python" lines="20">from math import exp, log
from numpy import zeros

Temperature=state.scalar_fields["TemperatureAnalytical"]

b=log(1000)
deltaT=1.0

dim = 2
visc = zeros((dim,dim))

for n in range(Temperature.node_count):
   T = Temperature.node_val(n)
   nu = exp(-b*T/deltaT)
   for i in range(dim):
      visc[i,i] = nu
   field.set(n, visc)</string_value>
        </algorithm>
        <mesh name="VelocityMesh"/>
        <output/>
        <stat>
          <include_in_stat/>
        </stat>
        <particles>
          <exclude_from_particles/>
        </particles>
      </diagnostic>
    </tensor_field>
  </material_phase>
</fluidity_options>
