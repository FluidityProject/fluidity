<?xml version='1.0' encoding='utf-8'?>
<testproblem>
  <name>petsc_readnsolve</name>
  <owner userid="skramer"/>
  <tags> parallel </tags>
  <problem_definition length="special" nprocs="4">
    <comment>First make a common flredecomped mesh and edit the flml files to use this, then do the actual test.</comment>
    <command_line>mpiexec ../../bin/flredecomp -i 1 -o 4 -v -l standing_wave_failing_velocity standing_wave_failing_velocity_flredecomp;
mpiexec ../../bin/flredecomp -i 1 -o 4 -v -l standing_wave_failing_pressure standing_wave_failing_pressure_flredecomp;
mpiexec ../../bin/flredecomp -i 1 -o 4 -v -l standing_wave standing_wave_flredecomp;
make mesh_rename
rm -f *failing_velocity_flredecomp_CoordinateMesh* *failing_pressure_flredecomp_CoordinateMesh*
( mpiexec fluidity -v2 -l standing_wave_failing_velocity_flredecomp.flml 2&gt;&amp;1 ) &gt; /dev/null;
mv matrixdump velocity_matrixdump;
mkdir -p velocity_logs;
mv fluidity.log* fluidity.err* velocity_logs/;
( mpiexec fluidity -v2 -l standing_wave_failing_pressure_flredecomp.flml 2&gt;&amp;1 ) &gt; /dev/null;
mv matrixdump pressure_matrixdump;
rm matrixdump.info;
mpiexec petsc_readnsolve -v -l -prns_filename velocity_matrixdump  standing_wave_flredecomp.flml Velocity;
mv petsc_readnsolve.err* petsc_readnsolve.log* velocity_logs/;
mpiexec petsc_readnsolve -v -l -prns_filename pressure_matrixdump  standing_wave_flredecomp.flml Pressure;
rm -rf fluidity.err-*<comment>Note we use ; and no &amp;&amp; as most of these commands will actually fail (on purpose). Also removing fluidity.err-* from "failing solve runs" to prevent noise in testharness output. For same reason redirecting mpiexec output of failing fluidity runs to the bin.</comment></command_line>
  </problem_definition>
  <variables>
  <variable name="velocity_error_logs" language="python">import glob
velocity_error_logs=[]
for logname in glob.glob('velocity_logs/petsc_readnsolve.err-*'):
  f=open(logname)
  velocity_error_logs.append(f.read())
  f.close()
</variable>
<variable name="pressure_error_logs" language="python">import glob
pressure_error_logs=[]
for logname in glob.glob('petsc_readnsolve.err-*'):
  f=open(logname)
  pressure_error_logs.append(f.read())
  f.close()
</variable>
    <variable name="velocity_solve_failed" language="python">from numpy import array
import re

f=open('velocity_logs/fluidity.log-0')
log=f.read()
f.close()

reason_lines=re.findall('.*reason.*', log, re.MULTILINE)
reason_fields=array([i.split(' ')[0] for i in reason_lines])
reason_numbers=array([eval(i.split(':')[1]) for i in reason_lines])
velocity_solve_failed = reason_fields.compress(reason_numbers&lt;=0)[0]=='DeltaU'
<comment>Check that the first solve that failed was indeed the velocity ('DeltaU') solve</comment></variable>
    <variable name="pressure_solve_failed" language="python">from numpy import array
import re

f=open('fluidity.log-0')
log=f.read()
f.close()

reason_lines=re.findall('.*reason.*', log, re.MULTILINE)
reason_fields=array([i.split(' ')[0] for i in reason_lines])
reason_numbers=array([eval(i.split(':')[1]) for i in reason_lines])
pressure_solve_failed = reason_fields.compress(reason_numbers&lt;=0)[0]=='PressureTheta'
</variable>
    <variable name="prns_velocity_solve_success" language="python">from numpy import array
import re

f=open('velocity_logs/petsc_readnsolve.log-0')
log=f.read()
f.close()

reason_lines=re.findall('.*reason.*', log, re.MULTILINE)
reason_number=eval(reason_lines[0].split(':')[1])
prns_velocity_solve_success= reason_number&gt;1
</variable>
    <variable name="prns_pressure_solve_success" language="python">from numpy import array
import re

f=open('petsc_readnsolve.log-0')
log=f.read()
f.close()

reason_lines=re.findall('.*reason.*', log, re.MULTILINE)
reason_number=eval(reason_lines[0].split(':')[1])
prns_pressure_solve_success= reason_number&gt;1
</variable>
    <variable name="no_new_matrixdump" language="python">import os
files = os.listdir("./")
no_new_matrixdump = not "matrixdump" in files and not "matrixdump.info" in files</variable>
    </variables>  
  <pass_tests>
    <test name="check_velocity_solve_failed" language="python">assert velocity_solve_failed</test>
    <test name="check_pressure_solve_failed" language="python">assert pressure_solve_failed</test>
    <test name="check_prns_velocity_solve_success" language="python">assert prns_velocity_solve_success</test>
    <test name="check_prns_pressure_solve_success" language="python">assert prns_pressure_solve_success</test>
    <test name="check_no_new_matrixdump" language="python">assert no_new_matrixdump</test>
    <test name="empty_velocity_error_logs" language="python">assert ''.join(velocity_error_logs).strip() == ''
</test>
    <test name="empty_pressure_error_logs" language="python">assert ''.join(pressure_error_logs).strip() == ''
</test>
  </pass_tests>
  <comment>This test tests petsc_readnsolve by making fluidity do a run with a failing Velocity, resp. a failing Pressure solve, and run petsc_readnsolve afterwards from the matrixdump - this time succeeding the solve due to different solver settings.</comment>
</testproblem>
