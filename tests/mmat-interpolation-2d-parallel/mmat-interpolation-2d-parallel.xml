<?xml version='1.0' encoding='UTF-8'?>
<testproblem>
  <name>Multimaterial adaptivity and interpolation test</name>
  <owner userid="cwilson"/>
  <tags>flml 2dadapt zoltan parallel</tags>
  <problem_definition length="short" nprocs="2">
    <command_line>mpiexec ../../bin/flredecomp -i 1 -o 2 -v -l mmat-interpolation mmat-interpolation_flredecomp &amp;&amp;
      mpiexec ../../bin/fluidity -v2 -l mmat-interpolation_flredecomp.flml &amp;&amp; mv fluidity.log-0 first.log-0 &amp;&amp; mv fluidity.log-1 first.log-1 &amp;&amp; mv fluidity.err-0 first.err-0 &amp;&amp; mv fluidity.err-1 first.err-1 &amp;&amp; ./change_options.py &amp;&amp; mpiexec ../../bin/fluidity -v2 -l mmat-interpolation_2_checkpoint.flml &amp;&amp; mv fluidity.log-0 checkpoint.log-0 &amp;&amp; mv fluidity.log-1 checkpoint.log-1 &amp;&amp; mv fluidity.err-0 checkpoint.err-0 &amp;&amp; mv fluidity.err-1 checkpoint.err-1 </command_line>
  </problem_definition>
  <variables>
    <variable name="solvers_converged" language="python">
import os
files = os.listdir("./")
solvers_converged = not "matrixdump" in files and not "matrixdump.info" in files
    </variable>
    <variable name="material1integralstart" language="python"> 
from fluidity_tools import stat_parser as stat
material1integralstart = stat("mmat-interpolation.stat")["Material1"]["MaterialVolumeFraction"]["integral"][0]
    </variable>
    <variable name="material1integralend" language="python"> 
from fluidity_tools import stat_parser as stat
material1integralend = stat("mmat-interpolation.stat")["Material1"]["MaterialVolumeFraction"]["integral"][-1]
    </variable>
    <variable name="material1maxstart" language="python"> 
from fluidity_tools import stat_parser as stat
material1maxstart = stat("mmat-interpolation.stat")["Material1"]["MaterialVolumeFraction"]["max"][0]
    </variable>
    <variable name="material1maxend" language="python"> 
from fluidity_tools import stat_parser as stat
material1maxend = stat("mmat-interpolation.stat")["Material1"]["MaterialVolumeFraction"]["max"][-1]
    </variable>
    <variable name="material1minstart" language="python"> 
from fluidity_tools import stat_parser as stat
material1minstart = stat("mmat-interpolation.stat")["Material1"]["MaterialVolumeFraction"]["min"][0]
    </variable>
    <variable name="material1minend" language="python"> 
from fluidity_tools import stat_parser as stat
material1minend = stat("mmat-interpolation.stat")["Material1"]["MaterialVolumeFraction"]["min"][-1]
    </variable>
    <variable name="material2integralstart" language="python"> 
from fluidity_tools import stat_parser as stat
material2integralstart = stat("mmat-interpolation.stat")["Material2"]["MaterialVolumeFraction"]["integral"][0]
    </variable>
    <variable name="material2integralend" language="python"> 
from fluidity_tools import stat_parser as stat
material2integralend = stat("mmat-interpolation.stat")["Material2"]["MaterialVolumeFraction"]["integral"][-1]
    </variable>
    <variable name="material3integralstart" language="python"> 
from fluidity_tools import stat_parser as stat
material3integralstart = stat("mmat-interpolation.stat")["Material3"]["MaterialVolumeFraction"]["integral"][0]
    </variable>
    <variable name="material3integralend" language="python"> 
from fluidity_tools import stat_parser as stat
material3integralend = stat("mmat-interpolation.stat")["Material3"]["MaterialVolumeFraction"]["integral"][-1]
    </variable>
    <variable name="material3maxstart" language="python"> 
from fluidity_tools import stat_parser as stat
material3maxstart = stat("mmat-interpolation.stat")["Material3"]["MaterialVolumeFraction"]["max"][0]
    </variable>
    <variable name="material3maxend" language="python"> 
from fluidity_tools import stat_parser as stat
material3maxend = stat("mmat-interpolation.stat")["Material3"]["MaterialVolumeFraction"]["max"][-1]
    </variable>
    <variable name="material3minstart" language="python"> 
from fluidity_tools import stat_parser as stat
material3minstart = stat("mmat-interpolation.stat")["Material3"]["MaterialVolumeFraction"]["min"][0]
    </variable>
    <variable name="material3minend" language="python"> 
from fluidity_tools import stat_parser as stat
material3minend = stat("mmat-interpolation.stat")["Material3"]["MaterialVolumeFraction"]["min"][-1]
    </variable>
    <variable name="divergenceminstart" language="python"> 
from fluidity_tools import stat_parser as stat
divergenceminstart = stat("mmat-interpolation.stat")["Material1"]["ControlVolumeDivergence"]["min"][0]
    </variable>
    <variable name="divergenceminend" language="python"> 
from fluidity_tools import stat_parser as stat
divergenceminend = stat("mmat-interpolation.stat")["Material1"]["ControlVolumeDivergence"]["min"][-1]
    </variable>
    <variable name="divergencemaxstart" language="python"> 
from fluidity_tools import stat_parser as stat
divergencemaxstart = stat("mmat-interpolation.stat")["Material1"]["ControlVolumeDivergence"]["max"][0]
    </variable>
    <variable name="divergencemaxend" language="python"> 
from fluidity_tools import stat_parser as stat
divergencemaxend = stat("mmat-interpolation.stat")["Material1"]["ControlVolumeDivergence"]["max"][-1]
    </variable>
    <variable name="cflmaxstart" language="python"> 
from fluidity_tools import stat_parser as stat
cflmaxstart = stat("mmat-interpolation.stat")["Material1"]["ControlVolumeCFLNumber"]["max"][0]
    </variable>
    <variable name="cflmaxend" language="python"> 
from fluidity_tools import stat_parser as stat
cflmaxend = stat("mmat-interpolation.stat")["Material1"]["ControlVolumeCFLNumber"]["max"][-1]
    </variable>
    <variable name="lambdamaxstart" language="python"> 
from fluidity_tools import stat_parser as stat
lambdamaxstart = stat("mmat-interpolation.stat")["Material1"]["Lambda"]["max"][0]
    </variable>
    <variable name="lambdamaxend" language="python"> 
from fluidity_tools import stat_parser as stat
lambdamaxend = stat("mmat-interpolation.stat")["Material1"]["Lambda"]["max"][-1]
    </variable>
    <variable name="lambdaminstart" language="python"> 
from fluidity_tools import stat_parser as stat
lambdaminstart = stat("mmat-interpolation.stat")["Material1"]["Lambda"]["min"][0]
    </variable>
    <variable name="lambdaminend" language="python"> 
from fluidity_tools import stat_parser as stat
lambdaminend = stat("mmat-interpolation.stat")["Material1"]["Lambda"]["min"][-1]
    </variable>
    <variable name="material1integralstart_checkpoint" language="python"> 
from fluidity_tools import stat_parser as stat
material1integralstart_checkpoint = stat("mmat-interpolation_checkpoint.stat")["Material1"]["MaterialVolumeFraction"]["integral"][0]
    </variable>
    <variable name="material1integralend_checkpoint" language="python"> 
from fluidity_tools import stat_parser as stat
material1integralend_checkpoint = stat("mmat-interpolation_checkpoint.stat")["Material1"]["MaterialVolumeFraction"]["integral"][-1]
    </variable>
    <variable name="material1maxstart_checkpoint" language="python"> 
from fluidity_tools import stat_parser as stat
material1maxstart_checkpoint = stat("mmat-interpolation_checkpoint.stat")["Material1"]["MaterialVolumeFraction"]["max"][0]
    </variable>
    <variable name="material1maxend_checkpoint" language="python"> 
from fluidity_tools import stat_parser as stat
material1maxend_checkpoint = stat("mmat-interpolation_checkpoint.stat")["Material1"]["MaterialVolumeFraction"]["max"][-1]
    </variable>
    <variable name="material1minstart_checkpoint" language="python"> 
from fluidity_tools import stat_parser as stat
material1minstart_checkpoint = stat("mmat-interpolation_checkpoint.stat")["Material1"]["MaterialVolumeFraction"]["min"][0]
    </variable>
    <variable name="material1minend_checkpoint" language="python"> 
from fluidity_tools import stat_parser as stat
material1minend_checkpoint = stat("mmat-interpolation_checkpoint.stat")["Material1"]["MaterialVolumeFraction"]["min"][-1]
    </variable>
    <variable name="material2integralstart_checkpoint" language="python"> 
from fluidity_tools import stat_parser as stat
material2integralstart_checkpoint = stat("mmat-interpolation_checkpoint.stat")["Material2"]["MaterialVolumeFraction"]["integral"][0]
    </variable>
    <variable name="material2integralend_checkpoint" language="python"> 
from fluidity_tools import stat_parser as stat
material2integralend_checkpoint = stat("mmat-interpolation_checkpoint.stat")["Material2"]["MaterialVolumeFraction"]["integral"][-1]
    </variable>
    <variable name="material3integralstart_checkpoint" language="python"> 
from fluidity_tools import stat_parser as stat
material3integralstart_checkpoint = stat("mmat-interpolation_checkpoint.stat")["Material3"]["MaterialVolumeFraction"]["integral"][0]
    </variable>
    <variable name="material3integralend_checkpoint" language="python"> 
from fluidity_tools import stat_parser as stat
material3integralend_checkpoint = stat("mmat-interpolation_checkpoint.stat")["Material3"]["MaterialVolumeFraction"]["integral"][-1]
    </variable>
    <variable name="material3maxstart_checkpoint" language="python"> 
from fluidity_tools import stat_parser as stat
material3maxstart_checkpoint = stat("mmat-interpolation_checkpoint.stat")["Material3"]["MaterialVolumeFraction"]["max"][0]
    </variable>
    <variable name="material3maxend_checkpoint" language="python"> 
from fluidity_tools import stat_parser as stat
material3maxend_checkpoint = stat("mmat-interpolation_checkpoint.stat")["Material3"]["MaterialVolumeFraction"]["max"][-1]
    </variable>
    <variable name="material3minstart_checkpoint" language="python"> 
from fluidity_tools import stat_parser as stat
material3minstart_checkpoint = stat("mmat-interpolation_checkpoint.stat")["Material3"]["MaterialVolumeFraction"]["min"][0]
    </variable>
    <variable name="material3minend_checkpoint" language="python"> 
from fluidity_tools import stat_parser as stat
material3minend_checkpoint = stat("mmat-interpolation_checkpoint.stat")["Material3"]["MaterialVolumeFraction"]["min"][-1]
    </variable>
    <variable name="divergenceminstart_checkpoint" language="python"> 
from fluidity_tools import stat_parser as stat
divergenceminstart_checkpoint = stat("mmat-interpolation_checkpoint.stat")["Material1"]["ControlVolumeDivergence"]["min"][0]
    </variable>
    <variable name="divergenceminend_checkpoint" language="python"> 
from fluidity_tools import stat_parser as stat
divergenceminend_checkpoint = stat("mmat-interpolation_checkpoint.stat")["Material1"]["ControlVolumeDivergence"]["min"][-1]
    </variable>
    <variable name="divergencemaxstart_checkpoint" language="python"> 
from fluidity_tools import stat_parser as stat
divergencemaxstart_checkpoint = stat("mmat-interpolation_checkpoint.stat")["Material1"]["ControlVolumeDivergence"]["max"][0]
    </variable>
    <variable name="divergencemaxend_checkpoint" language="python"> 
from fluidity_tools import stat_parser as stat
divergencemaxend_checkpoint = stat("mmat-interpolation_checkpoint.stat")["Material1"]["ControlVolumeDivergence"]["max"][-1]
    </variable>
    <variable name="cflmaxstart_checkpoint" language="python"> 
from fluidity_tools import stat_parser as stat
cflmaxstart_checkpoint = stat("mmat-interpolation_checkpoint.stat")["Material1"]["ControlVolumeCFLNumber"]["max"][0]
    </variable>
    <variable name="cflmaxend_checkpoint" language="python"> 
from fluidity_tools import stat_parser as stat
cflmaxend_checkpoint = stat("mmat-interpolation_checkpoint.stat")["Material1"]["ControlVolumeCFLNumber"]["max"][-1]
    </variable>
    <variable name="lambdamaxstart_checkpoint" language="python"> 
from fluidity_tools import stat_parser as stat
lambdamaxstart_checkpoint = stat("mmat-interpolation_checkpoint.stat")["Material1"]["Lambda"]["max"][0]
    </variable>
    <variable name="lambdamaxend_checkpoint" language="python"> 
from fluidity_tools import stat_parser as stat
lambdamaxend_checkpoint = stat("mmat-interpolation_checkpoint.stat")["Material1"]["Lambda"]["max"][-1]
    </variable>
    <variable name="lambdaminstart_checkpoint" language="python"> 
from fluidity_tools import stat_parser as stat
lambdaminstart_checkpoint = stat("mmat-interpolation_checkpoint.stat")["Material1"]["Lambda"]["min"][0]
    </variable>
    <variable name="lambdaminend_checkpoint" language="python"> 
from fluidity_tools import stat_parser as stat
lambdaminend_checkpoint = stat("mmat-interpolation_checkpoint.stat")["Material1"]["Lambda"]["min"][-1]
    </variable>
    <variable name="absolutedifference" language="python"> 
from fluidity_tools import stat_parser as stat
absolutedifference = stat("mmat-interpolation.stat")["Material3"]["ScalarAbsoluteDifference"]["max"][1]
    </variable>
  </variables>
  <pass_tests>
    <test name="Solvers converged" language="python">
      assert(solvers_converged)
    </test>
    <test name="check material1 was conserved" language="python">
print('mass loss = ', abs(material1integralstart-material1integralend))
assert abs(material1integralstart-material1integralend) &lt; max(abs(divergencemaxstart), abs(divergencemaxend), abs(divergenceminstart), abs(divergenceminend), 5.E-6)
</test>
    <test name="check material2 was conserved" language="python">
print('mass loss = ', abs(material2integralstart-material2integralend))
assert abs(material2integralstart-material2integralend) &lt; max(abs(divergencemaxstart), abs(divergencemaxend), abs(divergenceminstart), abs(divergenceminend), 5.E-6)
</test>
    <test name="check material3 was conserved" language="python">
print('mass loss = ', abs(material3integralstart-material3integralend))
assert abs(material3integralstart-material3integralend) &lt; max(abs(divergencemaxstart), abs(divergencemaxend), abs(divergenceminstart), abs(divergenceminend), 5.E-6)
</test>
    <test name="check that reasonable tolerance is being used to test conservation" language="python">
print('divergence tolerance = ', max(abs(divergencemaxstart), abs(divergencemaxend), abs(divergenceminstart), abs(divergenceminend)))
assert max(abs(divergencemaxstart), abs(divergencemaxend), abs(divergenceminstart), abs(divergenceminend)) &lt; 1.E-6
</test>
    <test name="check material1 max bound was conserved" language="python">
assert abs(material1maxstart-material1maxend) &lt; 1.E-10
    </test>
    <test name="check material3 max was conserved" language="python">
assert abs(material3maxstart-material3maxend) &lt; 1.E-10
    </test>
    <test name="check material1 min bound was conserved" language="python">
assert abs(material1minstart-material1minend) &lt; 1.E-5
    </test>
    <test name="check material3 min bound was conserved" language="python">
assert abs(material3minstart-material3minend) &lt; 1.E-5
    </test>
    <test name="check initial max divergence was zero" language="python">
assert abs(divergencemaxstart) &lt; 1.E-7
    </test>
    <test name="check initial min divergence was zero" language="python">
assert abs(divergenceminstart) &lt; 1.E-7
    </test>
    <test name="check final max divergence was zero" language="python">
assert abs(divergencemaxend) &lt; 1.E-7
    </test>
    <test name="check final min divergence was zero" language="python">
assert abs(divergenceminend) &lt; 1.E-7
    </test>
    <test name="check initial max cfl was 0.1" language="python">
assert abs(cflmaxstart-0.1) &lt; 1.E-10
    </test>
    <test name="check final max cfl was 0.1" language="python">
assert abs(cflmaxend-0.1) &lt; 1.E-10
    </test>
    <test name="check checkpointed material1 was conserved" language="python">
print('mass loss = ', abs(material1integralstart_checkpoint-material1integralend_checkpoint))
assert abs(material1integralstart_checkpoint-material1integralend_checkpoint) &lt; max(abs(divergencemaxstart_checkpoint), abs(divergencemaxend_checkpoint), abs(divergenceminstart_checkpoint), abs(divergenceminend_checkpoint), 1.E-6)
</test>
    <test name="check checkpointed material2 was conserved" language="python">
print('mass loss = ', abs(material2integralstart_checkpoint-material2integralend_checkpoint))
assert abs(material2integralstart_checkpoint-material2integralend_checkpoint) &lt; max(abs(divergencemaxstart_checkpoint), abs(divergencemaxend_checkpoint), abs(divergenceminstart_checkpoint), abs(divergenceminend_checkpoint), 1.E-6)
</test>
    <test name="check checkpointed material3 was conserved" language="python">
print('mass loss = ', abs(material3integralstart_checkpoint-material3integralend_checkpoint))
assert abs(material3integralstart_checkpoint-material3integralend_checkpoint) &lt; max(abs(divergencemaxstart_checkpoint), abs(divergencemaxend_checkpoint), abs(divergenceminstart_checkpoint), abs(divergenceminend_checkpoint), 1.E-6)
</test>
    <test name="check that reasonable tolerance is being used to test checkpointed conservation" language="python">
print('divergence tolerance = ', max(abs(divergencemaxstart_checkpoint), abs(divergencemaxend_checkpoint), abs(divergenceminstart_checkpoint), abs(divergenceminend_checkpoint)))
assert max(abs(divergencemaxstart_checkpoint), abs(divergencemaxend_checkpoint), abs(divergenceminstart_checkpoint), abs(divergenceminend_checkpoint)) &lt; 1.E-6
</test>
    <test name="check checkpointed material1 max bound was conserved" language="python">
assert abs(material1maxstart_checkpoint-material1maxend_checkpoint) &lt; 1.E-10
    </test>
    <test name="check checkpointed material3 max was conserved" language="python">
assert abs(material3maxstart_checkpoint-material3maxend_checkpoint) &lt; 1.E-10
    </test>
    <test name="check checkpointed material1 min bound was conserved" language="python">
assert abs(material1minstart_checkpoint-material1minend_checkpoint) &lt; 1.E-5
    </test>
    <test name="check checkpointed material3 min bound was conserved" language="python">
assert abs(material3minstart_checkpoint-material3minend_checkpoint) &lt; 1.E-5
    </test>
    <test name="check checkpointed initial max divergence was zero" language="python">
assert abs(divergencemaxstart_checkpoint) &lt; 1.E-7
    </test>
    <test name="check checkpointed initial min divergence was zero" language="python">
assert abs(divergenceminstart_checkpoint) &lt; 1.E-7
    </test>
    <test name="check checkpointed final max divergence was zero" language="python">
assert abs(divergencemaxend_checkpoint) &lt; 1.E-7
    </test>
    <test name="check checkpointed final min divergence was zero" language="python">
assert abs(divergenceminend_checkpoint) &lt; 1.E-7
    </test>
    <test name="check checkpointed initial max cfl was 0.1" language="python">
assert abs(cflmaxstart_checkpoint-0.1) &lt; 1.E-10
    </test>
    <test name="check checkpointed final max cfl was 0.1" language="python">
assert abs(cflmaxend_checkpoint-0.1) &lt; 1.E-10
    </test>
    <test name="check material1 was conserved during pickup" language="python">
print('mass loss = ', abs(material1integralstart_checkpoint-material1integralend))
assert abs(material1integralstart_checkpoint-material1integralend) &lt; max(abs(divergencemaxstart), abs(divergencemaxend), abs(divergenceminstart), abs(divergenceminend), 1.E-6)
</test>
    <test name="check material2 was conserved during pickup" language="python">
print('mass loss = ', abs(material2integralstart_checkpoint-material2integralend))
assert abs(material2integralstart_checkpoint-material2integralend) &lt; max(abs(divergencemaxstart), abs(divergencemaxend), abs(divergenceminstart), abs(divergenceminend), 1.E-6)
</test>
    <test name="check material3 was conserved during pickup" language="python">
print('mass loss = ', abs(material3integralstart_checkpoint-material3integralend))
assert abs(material3integralstart_checkpoint-material3integralend) &lt; max(abs(divergencemaxstart), abs(divergencemaxend), abs(divergenceminstart), abs(divergenceminend), 1.E-6)
</test>
  </pass_tests>
  <warn_tests>
    <test name="check initial max lambda was updated" language="python">
assert abs(lambdamaxstart) &gt; 1.E-7
    </test>
    <test name="check initial min lambda was updated" language="python">
assert abs(lambdaminstart) &gt; 1.E-7
    </test>
    <test name="check final max lambda was updated" language="python">
assert abs(lambdamaxend) &gt; 1.E-7
    </test>
    <test name="check final min lambda was updated" language="python">
assert abs(lambdaminend) &gt; 1.E-7
    </test>
    <test name="check checkpointed initial max lambda is small (projection had to do very little)" language="python">
assert abs(lambdamaxstart_checkpoint) &lt; 1.E-7
    </test>
    <test name="check checkpointed initial min lambda is small (projection had to do very little)" language="python">
assert abs(lambdaminstart_checkpoint) &lt; 1.E-7
    </test>
    <test name="check checkpointed final max lambda was updated" language="python">
assert abs(lambdamaxend_checkpoint) &gt; 1.E-7
    </test>
    <test name="check checkpointed final min lambda was updated" language="python">
assert abs(lambdaminend_checkpoint) &gt; 1.E-7
    </test>
    <test name="check absolute difference isn't zero, i.e. aliased velocity is actually doing something" language="python">
assert abs(absolutedifference) &gt; 1.E-7
    </test>
  </warn_tests>
</testproblem>
