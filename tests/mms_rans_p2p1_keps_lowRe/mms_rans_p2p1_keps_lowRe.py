# This file was *autogenerated* from the file mms_rans_p2p1_keps_lowRe.sage.
from sage.all_cmdline import *   # import sage library
_sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_1p5 = RealNumber('1.5'); _sage_const_3p = RealNumber('3.'); _sage_const_13p2 = RealNumber('13.2'); _sage_const_0p05 = RealNumber('0.05'); _sage_const_1p8 = RealNumber('1.8'); _sage_const_1e2 = RealNumber('1e2'); _sage_const_1e1 = RealNumber('1e1'); _sage_const_1e0 = RealNumber('1e0'); _sage_const_1p0 = RealNumber('1.0'); _sage_const_1p3 = RealNumber('1.3'); _sage_const_0p3 = RealNumber('0.3'); _sage_const_0p707106781 = RealNumber('0.707106781'); _sage_const_1p7 = RealNumber('1.7'); _sage_const_0p0 = RealNumber('0.0'); _sage_const_3p8 = RealNumber('3.8'); _sage_const_0p5 = RealNumber('0.5'); _sage_const_0p4 = RealNumber('0.4'); _sage_const_0p7 = RealNumber('0.7'); _sage_const_0p6 = RealNumber('0.6'); _sage_const_0p9 = RealNumber('0.9'); _sage_const_0p8 = RealNumber('0.8'); _sage_const_3p0 = RealNumber('3.0'); _sage_const_3p7 = RealNumber('3.7'); _sage_const_20p5 = RealNumber('20.5'); _sage_const_2p1 = RealNumber('2.1'); _sage_const_2p0 = RealNumber('2.0'); _sage_const_0p75 = RealNumber('0.75'); _sage_const_5p2 = RealNumber('5.2'); _sage_const_2p = RealNumber('2.'); _sage_const_0p0165 = RealNumber('0.0165'); _sage_const_4p3 = RealNumber('4.3')
y = var('y')

def function(phi_0, phi_x, phi_y, phi_xy, 
             f_sin_x, f_cos_x, f_sin_y, f_cos_y, f_sin_xy, f_cos_xy, 
             alpha_x, alpha_y, alpha_xy):
    
    f_0 = phi_0 
    f_x = phi_x*(f_sin_x*sin(alpha_x*x) + f_cos_x*cos(alpha_x*x)) 
    f_y = phi_y*(f_sin_y*sin(alpha_y*y) + f_cos_y*cos(alpha_y*y)) 
    f_xy = phi_xy*(f_sin_xy*sin(alpha_xy*x*y/pi) + f_cos_xy*cos(alpha_xy*x*y/pi)) 
    f = f_0 + f_x + f_y + f_xy
    return f

vel_scale = _sage_const_1e1 
u = vel_scale*function(_sage_const_0p5 , _sage_const_1p0 , _sage_const_0p3 , _sage_const_0p0 , 
                       _sage_const_0p0 , _sage_const_1p0 , _sage_const_0p5 , _sage_const_0p5 , _sage_const_1p0 , _sage_const_0p0 ,
                       _sage_const_0p6 , _sage_const_0p75 , _sage_const_1p0 )
p_prime = function(-_sage_const_1p0 , _sage_const_1p0 , _sage_const_1p0 , _sage_const_1p0 ,
                    _sage_const_1p0 , _sage_const_0p0 , _sage_const_0p0 , _sage_const_1p0 , _sage_const_1p0 , _sage_const_0p0 ,
                    _sage_const_1p0 , _sage_const_1p0 , _sage_const_1p0 )
rho_scale = _sage_const_1e2 
rho = rho_scale*function(_sage_const_5p2 , -_sage_const_1p8 , -_sage_const_1p3 , _sage_const_3p7 , 
                         _sage_const_1p0 , _sage_const_0p0 , _sage_const_0p0 , _sage_const_1p0 , _sage_const_1p0 , _sage_const_0p0 ,
                         _sage_const_1p7 , _sage_const_2p1 , _sage_const_1p3 )
ke_scale = _sage_const_1e0 
eps_scale = _sage_const_1e0 
ke = ke_scale*function(_sage_const_1p0 , _sage_const_0p9 , _sage_const_0p6 , _sage_const_0p4 , 
                       _sage_const_0p0 , _sage_const_1p0 , _sage_const_1p0 , _sage_const_0p0 , _sage_const_0p0 , _sage_const_1p0 ,
                       _sage_const_0p6 , _sage_const_0p7 , _sage_const_0p8 )
eps = eps_scale*function(_sage_const_13p2 , -_sage_const_3p8 , _sage_const_4p3 , _sage_const_0p0 , 
                         _sage_const_1p0 , _sage_const_0p0 , _sage_const_0p0 , _sage_const_1p0 , _sage_const_1p0 , _sage_const_0p0 ,
                         _sage_const_0p7 , _sage_const_0p3 , _sage_const_0p0 )
v = integral(-diff(u,x),y)  # divergence free  
nu = _sage_const_1p0 

p = p_prime - _sage_const_2p /_sage_const_3p *ke

g_x = _sage_const_0p707106781 
g_y = _sage_const_0p707106781 

Y = _sage_const_1p5 
R_y = ke**_sage_const_0p5 *Y/nu
Re_T = ke**_sage_const_2p0 /(eps*nu)

f_mu = (_sage_const_1  - e**-(_sage_const_0p0165 *R_y))**_sage_const_2p0 *(_sage_const_1p0  + _sage_const_20p5 /Re_T)
f_1 = _sage_const_1p0  + (_sage_const_0p05 /f_mu)**_sage_const_3p0  
f_2 = _sage_const_1p0  - e**(- Re_T**_sage_const_2p0 )

nu_T = f_mu*ke**_sage_const_2 /eps

tau_xx = _sage_const_2 *nu*diff(u,x)            
tau_xy = nu*(diff(u,y) + diff(v,x))
tau_yy = _sage_const_2 *nu*diff(v,y)            
tau_yx = nu*(diff(u,y) + diff(v,x))  

tau_xx_R = _sage_const_2 *nu_T*diff(u,x) - (_sage_const_2p /_sage_const_3p )*ke
tau_xy_R = nu_T*(diff(u,y) + diff(v,x))
tau_yy_R = _sage_const_2 *nu_T*diff(v,y) - (_sage_const_2p /_sage_const_3p )*ke
tau_yx_R = nu_T*(diff(u,y) + diff(v,x))

Su = u*diff(u,x) + v*diff(u,y) - diff(tau_xx, x) - diff(tau_xy, y) - diff(tau_xx_R, x) - diff(tau_xy_R, y) - g_x*rho + diff(p,x)  
Sv = u*diff(v,x) + v*diff(v,y) - diff(tau_yx, x) - diff(tau_yy, y) - diff(tau_yx_R, x) - diff(tau_yy_R, y) - g_y*rho + diff(p,y)  

Srho = u*diff(rho,x) + v*diff(rho,y) - (_sage_const_1p0  + nu_T)*(diff(rho, x, x) + diff(rho, y, y)) - diff(nu_T, x)*diff(rho, x) - diff(nu_T, y)*diff(rho, y)

P = nu_T*(_sage_const_2 *(diff(u,x)**_sage_const_2  + diff(v,y)**_sage_const_2  + diff(u,y)*diff(v,x)) + diff(u,y)**_sage_const_2  + diff(v,x)**_sage_const_2 ) - (_sage_const_2p /_sage_const_3p )*ke*(diff(u,x) + diff(v,y))

u_z = g_x*u + g_y*v
u_xy = ((u**_sage_const_2p0  + v**_sage_const_2p0 ) - u_z**_sage_const_2p0 )**_sage_const_0p5 
C3 = tanh(u_z/u_xy)
B = -nu_T*(g_x*diff(rho,x) + g_y*diff(rho,y))  
pr = _sage_const_1p0 
ab = _sage_const_1p0 
bo = _sage_const_1p0 

Ske = u*diff(ke,x) + v*diff(ke,y) - (nu + nu_T)*(diff(ke, x, x) + diff(ke, y, y)) - diff(nu_T, x)*diff(ke, x) -  diff(nu_T, y)*diff(ke, y) - pr*P + ab*eps - bo*B
Seps = u*diff(eps,x) + v*diff(eps,y) - (nu + nu_T)*(diff(eps, x, x) + diff(eps, y, y)) - diff(nu_T, x)*diff(eps, x) -  diff(nu_T, y)*diff(eps, y) - f_1*pr*(eps/ke)*P + f_2*ab*(eps**_sage_const_2 /ke) - f_1*bo*C3*(eps/ke)*B
  
print 'from math import sin, cos, tanh, pi, e, sqrt'
print ''
print 'def u(X):'
print '    return', str(u).replace('^', '**').replace('000000000000', '').replace('x', 'X[0]').replace('y', 'X[1]')
print ''
print 'def v(X):'
print '    return', str(v).replace('^', '**').replace('000000000000', '').replace('x', 'X[0]').replace('y', 'X[1]')
print ''  
print 'def p(X):'
print '    return', str(p_prime).replace('^', '**').replace('000000000000', '').replace('x', 'X[0]').replace('y', 'X[1]')
print ''  
print 'def rho(X):'
print '    return', str(rho).replace('^', '**').replace('000000000000', '').replace('x', 'X[0]').replace('y', 'X[1]')
print ''  
print 'def ke(X):'
print '    return', str(ke).replace('^', '**').replace('000000000000', '').replace('x', 'X[0]').replace('y', 'X[1]')
print ''
print 'def eps(X):'
print '    return', str(eps).replace('^', '**').replace('000000000000', '').replace('x', 'X[0]').replace('y', 'X[1]')
print ''
print 'def forcing_u(X):'
print '    return', str(Su).replace('^', '**').replace('000000000000', '').replace('x', 'X[0]').replace('y', 'X[1]')
print ''
print 'def forcing_v(X):'
print '    return', str(Sv).replace('^', '**').replace('000000000000', '').replace('x', 'X[0]').replace('y', 'X[1]')
print ''
print 'def forcing_rho(X):'
print '    return', str(Srho).replace('^', '**').replace('000000000000', '').replace('x', 'X[0]').replace('y', 'X[1]')
print ''
print 'def forcing_ke(X):'
print '    return', str(Ske).replace('^', '**').replace('000000000000', '').replace('x', 'X[0]').replace('y', 'X[1]')
print ''
print 'def forcing_eps(X):'
print '    return', str(Seps).replace('^', '**').replace('000000000000', '').replace('x', 'X[0]').replace('y', 'X[1]')
print ''
print 'def P_ke(X):'
print '    return', str(P).replace('^', '**').replace('000000000000', '').replace('x', 'X[0]').replace('y', 'X[1]')
print ''
print 'def P_eps(X):'
print '    return', str(f_1*(eps/ke)*P).replace('^', '**').replace('000000000000', '').replace('x', 'X[0]').replace('y', 'X[1]')
print ''
print 'def A_ke(X):'
print '    return', str(-eps).replace('^', '**').replace('000000000000', '').replace('x', 'X[0]').replace('y', 'X[1]')
print ''
print 'def A_eps(X):'
print '    return', str(-eps**_sage_const_2p0 /ke).replace('^', '**').replace('000000000000', '').replace('x', 'X[0]').replace('y', 'X[1]')
print ''
print 'def B_ke(X):'
print '    return', str(B).replace('^', '**').replace('000000000000', '').replace('x', 'X[0]').replace('y', 'X[1]')
print ''
print 'def B_eps(X):'
print '    return', str(f_1*C3*(eps/ke)*B).replace('^', '**').replace('000000000000', '').replace('x', 'X[0]').replace('y', 'X[1]')
print ''
print 'def EV(X):'
print '    return', str(nu_T).replace('^', '**').replace('000000000000', '').replace('x', 'X[0]').replace('y', 'X[1]')
print ''
print 'def velocity(X):'
print '    return [u(X), v(X)]'
print ''
print 'def forcing_velocity(X):'
print '    return [forcing_u(X), forcing_v(X)]'
print ''
print 'def A_ke(X):'
print '    return', str(-eps).replace('^', '**').replace('000000000000', '').replace('x', 'X[0]').replace('y', 'X[1]')
print ''
print 'def A_eps(X):'
print '    return', str(-f_2*eps**_sage_const_2 /ke).replace('^', '**').replace('000000000000', '').replace('x', 'X[0]').replace('y', 'X[1]')
print ''
print 'def d_eps(X):'
print '    return', str(diff(eps,y)).replace('^', '**').replace('000000000000', '').replace('x', 'X[0]').replace('y', 'X[1]')
print ''
print 'def f_1(X):'
print '    return', str(f_1).replace('^', '**').replace('000000000000', '').replace('x', 'X[0]').replace('y', 'X[1]')
print ''
print 'def f_2(X):'
print '    return', str(f_2).replace('^', '**').replace('000000000000', '').replace('x', 'X[0]').replace('y', 'X[1]')
print ''
print 'def f_mu(X):'
print '    return', str(f_mu).replace('^', '**').replace('000000000000', '').replace('x', 'X[0]').replace('y', 'X[1]')
print ''
print 'def Y(X):'
print '    return', str(Y).replace('^', '**').replace('000000000000', '').replace('x', 'X[0]').replace('y', 'X[1]')
