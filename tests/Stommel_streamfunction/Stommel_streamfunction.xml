<?xml version='1.0' encoding='UTF-8'?>
<!-- Calculate wave speed in sloshing deep water tank
  -->
<testproblem>
  <name>Stommel streamfunction with western boundary current. Solve an adv-diff-source scalar problem and compare to analytical solution on fixed and adaptive meshes</name>
  <owner userid="piggott"/>
  <tags>flml 2dadapt</tags>
  <problem_definition length="medium" nprocs="1">
    <command_line>fluidity -v3 Stommel_gyre_A.flml &gt; Stommel_gyre_A.log 2&gt;&amp;1; fluidity -v3 Stommel_gyre_adapt_A.flml &gt; Stommel_gyre_adapt_A.log 2&gt;&amp;1;</command_line>
  </problem_definition>
  <variables>
    <variable name="solvers_converged" language="python">
import os
files = os.listdir("./")
solvers_converged = not "matrixdump" in files and not "matrixdump.info" in files
    </variable>
    <variable name="Fixed_error_norm" language="python">
from numpy import sqrt,pi,exp,sin,array,size,abs,max,amax,dot,zeros,reshape,transpose,arange
import vtktools

def function_psi(X,Y):
    lam = 1.0;      b = 1.0;
    r = 1.0;        rho = 1.0;
    beta = 100.0;   alpha = beta/r;
    D = 200;        F = 0.1;
    gamma = F*pi/(rho*r*b);
    A = -alpha/2 + sqrt(0.25*(alpha**2) + (pi/b)**2);
    B = -alpha/2 - sqrt(0.25*(alpha**2) + (pi/b)**2);
    p = (1-exp(B*lam))/(exp(A*lam)-exp(B*lam));
    q = 1-p;
    return (1/rho)*gamma*((b/pi)**2)*sin(pi*Y/b)*(p*exp(A*X)+q*exp(B*X)-1)


def function_trivol(X,Y):
    a = sqrt( (X[1] - X[0])**2 + (Y[1] - Y[0])**2)
    b = sqrt( (X[2] - X[0])**2 + (Y[2] - Y[0])**2)
    c = sqrt( (X[2] - X[1])**2 + (Y[2] - Y[1])**2)
    s = 0.5*(a+b+c)
    VOL = sqrt(s*(s-a)*(s-b)*(s-c))
    return abs(VOL/2)

file = 'Stommel_gyre_A_10.vtu'
ug=vtktools.vtu(file)
ug.GetFieldNames()
temp=ug.GetScalarField('Temperature')
psi=ug.GetScalarField('Analytical')
pos=ug.GetLocations()
x=pos[:,0]; y=pos[:,1]; z=pos[:,2]

NE=ug.ugrid.GetNumberOfCells()
ML=zeros(size(x), float)
for ele in range(NE):
    ndglno=ug.GetCellPoints(ele)
    trivol=function_trivol(x[ndglno],y[ndglno])
    for nod in ndglno:
        ML[nod] = ML[nod] + trivol/3


err = abs(psi - temp)
norm1 = dot(ML,err)
norm2 = dot(ML,err**2)
snorm2 = sqrt(abs(norm2))
##print(norm1)
##print(snorm2)
##print(amax(err))
print(norm1, snorm2, amax(err))

Fixed_error_norm = snorm2
</variable>
    <variable name="Adapt_error_norm" language="python">
from numpy import sqrt,pi,exp,sin,array,size,abs,max,amax,dot,zeros,reshape,transpose,arange
import vtktools

def function_psi(X,Y):
    lam = 1.0;      b = 1.0;
    r = 1.0;        rho = 1.0;
    beta = 100.0;   alpha = beta/r;
    D = 200;        F = 0.1;
    gamma = F*pi/(rho*r*b);
    A = -alpha/2 + sqrt(0.25*(alpha**2) + (pi/b)**2);
    B = -alpha/2 - sqrt(0.25*(alpha**2) + (pi/b)**2);
    p = (1-exp(B*lam))/(exp(A*lam)-exp(B*lam));
    q = 1-p;
    return (1/rho)*gamma*((b/pi)**2)*sin(pi*Y/b)*(p*exp(A*X)+q*exp(B*X)-1)


def function_trivol(X,Y):
    a = sqrt( (X[1] - X[0])**2 + (Y[1] - Y[0])**2)
    b = sqrt( (X[2] - X[0])**2 + (Y[2] - Y[0])**2)
    c = sqrt( (X[2] - X[1])**2 + (Y[2] - Y[1])**2)
    s = 0.5*(a+b+c)
    VOL = sqrt(s*(s-a)*(s-b)*(s-c))
    return abs(VOL/2)

file = 'Stommel_gyre_adapt_A_10.vtu'
ug=vtktools.vtu(file)
ug.GetFieldNames()
temp=ug.GetScalarField('Temperature')
psi=ug.GetScalarField('Analytical')
pos=ug.GetLocations()
x=pos[:,0]; y=pos[:,1]; z=pos[:,2]

NE=ug.ugrid.GetNumberOfCells()
ML=zeros(size(x), float)
for ele in range(NE):
    ndglno=ug.GetCellPoints(ele)
    trivol=function_trivol(x[ndglno],y[ndglno])
    for nod in ndglno:
        ML[nod] = ML[nod] + trivol/3


err = abs(psi - temp)
norm1 = dot(ML,err)
norm2 = dot(ML,err**2)
snorm2 = sqrt(abs(norm2))
##print(norm1)
##print(snorm2)
##print(amax(err))
print(norm1, snorm2, amax(err))

Adapt_error_norm = snorm2
</variable>
    <variable name="Adapt_node_count" language="python">
import vtktools
file = 'Stommel_gyre_adapt_A_10.vtu'
ug=vtktools.vtu(file)
Adapt_node_count = ug.ugrid.GetNumberOfPoints()
    </variable>
  </variables>
  <pass_tests>
    <test name="Solvers converged" language="python">
      assert(solvers_converged)
    </test>
    <test name="Check that the L2 norm of the error on the fixed mesh is less than 5e-5." language="python">
print(Fixed_error_norm)
assert(Fixed_error_norm &lt; 5e-5)
</test>
    <test name="Check that the L2 norm of the error on the adaptive mesh is less than 5.5e-6." language="python">
print(Adapt_error_norm)
assert(Adapt_error_norm &lt; 5.5e-6)
</test>
    <test name="Check that number of nodes in the adaptive case is less than 550." language="python">
print(Adapt_node_count)
assert(Adapt_node_count &lt; 550)
</test>
  </pass_tests>
  <warn_tests>
  </warn_tests>
</testproblem>
