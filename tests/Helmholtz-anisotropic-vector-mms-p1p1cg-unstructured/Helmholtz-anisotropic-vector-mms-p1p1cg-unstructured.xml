<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE testproblem SYSTEM "regressiontest.dtd">
<testproblem>
  <name>p1p1-cg unstructured-mesh inverse Helmholtz filter convergence test</name>
  <owner userid="jbull"/>
  <tags>flml</tags>
  <problem_definition length="medium" nprocs="1">
    <command_line>fluidity -v2 -l MMS_A_unstructured.flml &amp;&amp; fluidity MMS_B_unstructured.flml &amp;&amp; fluidity MMS_C_unstructured.flml &amp;&amp; fluidity MMS_D_unstructured.flml</command_line>
  </problem_definition>
  <variables>
    <variable name="ab_convergence_vel_f" language="python">
#
from fluidity_tools import stat_parser as stat
from math import log
output=open('errorconv_unstructured.log','w')
errorlog=open('error_unstructured.log','w')

a_error_x = stat("MMS_A_unstructured.stat")["NS"]["AnisoFilterDifference%1"]["l2norm"][-1]
b_error_x = stat("MMS_B_unstructured.stat")["NS"]["AnisoFilterDifference%1"]["l2norm"][-1]
a_error_y = stat("MMS_A_unstructured.stat")["NS"]["AnisoFilterDifference%2"]["l2norm"][-1]
b_error_y = stat("MMS_B_unstructured.stat")["NS"]["AnisoFilterDifference%2"]["l2norm"][-1]
a_error_norm = stat("MMS_A_unstructured.stat")["NS"]["AnisoFilterDifference%magnitude"]["l2norm"][-1]

a_error_inf_x = stat("MMS_A_unstructured.stat")["NS"]["AnisoFilterDifference%1"]["max"][-1]
b_error_inf_x = stat("MMS_B_unstructured.stat")["NS"]["AnisoFilterDifference%1"]["max"][-1]
a_error_inf_y = stat("MMS_A_unstructured.stat")["NS"]["AnisoFilterDifference%2"]["max"][-1]
b_error_inf_y = stat("MMS_B_unstructured.stat")["NS"]["AnisoFilterDifference%2"]["max"][-1]

ab_ratio_x = a_error_x / b_error_x
ab_ratio_y = a_error_y / b_error_y
ab_ratio_inf_x = a_error_inf_x / b_error_inf_x
ab_ratio_inf_y = a_error_inf_y / b_error_inf_y

output.write('ab_convergence_vel_f '+str(log(ab_ratio_x, 2))+' '+str(log(ab_ratio_inf_x, 2))+' '+str(log(ab_ratio_y, 2))+' '+str(log(ab_ratio_inf_y, 2))+'\n')
output.close()

errorlog.write('A_error_norm_aniso '+str(a_error_norm)+'\n')
errorlog.close()

ab_convergence_vel_f = [[log(ab_ratio_x, 2), log(ab_ratio_inf_x, 2)], [log(ab_ratio_y, 2), log(ab_ratio_inf_y, 2)]]
    </variable>
    <variable name="ab_convergence_vel_if" language="python">
from fluidity_tools import stat_parser as stat
from math import log
output=open('errorconv_unstructured.log','a')
errorlog=open('error_unstructured.log','a')

a_error_x = stat("MMS_A_unstructured.stat")["NS"]["IsoFilterDifference%1"]["l2norm"][-1]
b_error_x = stat("MMS_B_unstructured.stat")["NS"]["IsoFilterDifference%1"]["l2norm"][-1]
a_error_y = stat("MMS_A_unstructured.stat")["NS"]["IsoFilterDifference%2"]["l2norm"][-1]
b_error_y = stat("MMS_B_unstructured.stat")["NS"]["IsoFilterDifference%2"]["l2norm"][-1]
a_error_norm = stat("MMS_A_unstructured.stat")["NS"]["IsoFilterDifference%magnitude"]["l2norm"][-1]

a_error_inf_x = stat("MMS_A_unstructured.stat")["NS"]["IsoFilterDifference%1"]["max"][-1]
b_error_inf_x = stat("MMS_B_unstructured.stat")["NS"]["IsoFilterDifference%1"]["max"][-1]
a_error_inf_y = stat("MMS_A_unstructured.stat")["NS"]["IsoFilterDifference%2"]["max"][-1]
b_error_inf_y = stat("MMS_B_unstructured.stat")["NS"]["IsoFilterDifference%2"]["max"][-1]

ab_ratio_x = a_error_x / b_error_x
ab_ratio_y = a_error_y / b_error_y
ab_ratio_inf_x = a_error_inf_x / b_error_inf_x
ab_ratio_inf_y = a_error_inf_y / b_error_inf_y

output.write('ab_convergence_vel_if '+str(log(ab_ratio_x, 2))+' '+str(log(ab_ratio_inf_x, 2))+' '+str(log(ab_ratio_y, 2))+' '+str(log(ab_ratio_inf_y, 2))+'\n')
output.close()
errorlog.write('A_error_norm_iso '+str(a_error_norm)+'\n')
errorlog.close()

ab_convergence_vel_if = [[log(ab_ratio_x, 2), log(ab_ratio_inf_x, 2)], [log(ab_ratio_y, 2), log(ab_ratio_inf_y, 2)]]
    </variable>
    <variable name="ab_convergence_vel_mlf" language="python">
from fluidity_tools import stat_parser as stat
from math import log
output=open('errorconv_unstructured.log','a')
errorlog=open('error_unstructured.log','a')

a_error_x = stat("MMS_A_unstructured.stat")["NS"]["MLFilterDifference%1"]["l2norm"][-1]
b_error_x = stat("MMS_B_unstructured.stat")["NS"]["MLFilterDifference%1"]["l2norm"][-1]
a_error_y = stat("MMS_A_unstructured.stat")["NS"]["MLFilterDifference%2"]["l2norm"][-1]
b_error_y = stat("MMS_B_unstructured.stat")["NS"]["MLFilterDifference%2"]["l2norm"][-1]
a_error_norm = stat("MMS_A_unstructured.stat")["NS"]["MLFilterDifference%magnitude"]["l2norm"][-1]

a_error_inf_x = stat("MMS_A_unstructured.stat")["NS"]["MLFilterDifference%1"]["max"][-1]
b_error_inf_x = stat("MMS_B_unstructured.stat")["NS"]["MLFilterDifference%1"]["max"][-1]
a_error_inf_y = stat("MMS_A_unstructured.stat")["NS"]["MLFilterDifference%2"]["max"][-1]
b_error_inf_y = stat("MMS_B_unstructured.stat")["NS"]["MLFilterDifference%2"]["max"][-1]

ab_ratio_x = a_error_x / b_error_x
ab_ratio_y = a_error_y / b_error_y
ab_ratio_inf_x = a_error_inf_x / b_error_inf_x
ab_ratio_inf_y = a_error_inf_y / b_error_inf_y

output.write('ab_convergence_vel_ml '+str(log(ab_ratio_x, 2))+' '+str(log(ab_ratio_inf_x, 2))+' '+str(log(ab_ratio_y, 2))+' '+str(log(ab_ratio_inf_y, 2))+'\n')
output.close()
errorlog.write('A_error_norm_ml '+str(a_error_norm)+'\n')
errorlog.close()

ab_convergence_vel_mlf = [[log(ab_ratio_x, 2), log(ab_ratio_inf_x, 2)], [log(ab_ratio_y, 2), log(ab_ratio_inf_y, 2)]]
    </variable>
    <variable name="ab_convergence_vel" language="python">
from fluidity_tools import stat_parser as stat
from math import log
output=open('errorconv_unstructured.log','a')
errorlog=open('error_unstructured.log','a')

a_error_x = stat("MMS_A_unstructured.stat")["NS"]["AnalyticalDifference%1"]["l2norm"][-1]
b_error_x = stat("MMS_B_unstructured.stat")["NS"]["AnalyticalDifference%1"]["l2norm"][-1]
a_error_y = stat("MMS_A_unstructured.stat")["NS"]["AnalyticalDifference%2"]["l2norm"][-1]
b_error_y = stat("MMS_B_unstructured.stat")["NS"]["AnalyticalDifference%2"]["l2norm"][-1]
a_error_norm = stat("MMS_A_unstructured.stat")["NS"]["AnalyticalDifference%magnitude"]["l2norm"][-1]

a_error_inf_x = stat("MMS_A_unstructured.stat")["NS"]["AnalyticalDifference%1"]["max"][-1]
b_error_inf_x = stat("MMS_B_unstructured.stat")["NS"]["AnalyticalDifference%1"]["max"][-1]
a_error_inf_y = stat("MMS_A_unstructured.stat")["NS"]["AnalyticalDifference%2"]["max"][-1]
b_error_inf_y = stat("MMS_B_unstructured.stat")["NS"]["AnalyticalDifference%2"]["max"][-1]

ab_ratio_x = a_error_x / b_error_x
ab_ratio_y = a_error_y / b_error_y
ab_ratio_inf_x = a_error_inf_x / b_error_inf_x
ab_ratio_inf_y = a_error_inf_y / b_error_inf_y

output.write('ab_convergence_vel '+str(log(ab_ratio_x, 2))+' '+str(log(ab_ratio_inf_x, 2))+' '+str(log(ab_ratio_y, 2))+' '+str(log(ab_ratio_inf_y, 2))+'\n')
output.close()
errorlog.write('A_error_norm '+str(a_error_norm)+'\n')
errorlog.close()

ab_convergence_vel = [[log(ab_ratio_x, 2), log(ab_ratio_inf_x, 2)], [log(ab_ratio_y, 2), log(ab_ratio_inf_y, 2)]]
    </variable>
    <variable name="bc_convergence_vel_f" language="python">
from fluidity_tools import stat_parser as stat
from math import log
output=open('errorconv_unstructured.log','a')
errorlog=open('error_unstructured.log','a')

a_error_x = stat("MMS_B_unstructured.stat")["NS"]["AnisoFilterDifference%1"]["l2norm"][-1]
b_error_x = stat("MMS_C_unstructured.stat")["NS"]["AnisoFilterDifference%1"]["l2norm"][-1]
a_error_y = stat("MMS_B_unstructured.stat")["NS"]["AnisoFilterDifference%2"]["l2norm"][-1]
b_error_y = stat("MMS_C_unstructured.stat")["NS"]["AnisoFilterDifference%2"]["l2norm"][-1]
a_error_norm = stat("MMS_B_unstructured.stat")["NS"]["AnisoFilterDifference%magnitude"]["l2norm"][-1]

a_error_inf_x = stat("MMS_B_unstructured.stat")["NS"]["AnisoFilterDifference%1"]["max"][-1]
b_error_inf_x = stat("MMS_C_unstructured.stat")["NS"]["AnisoFilterDifference%1"]["max"][-1]
a_error_inf_y = stat("MMS_B_unstructured.stat")["NS"]["AnisoFilterDifference%2"]["max"][-1]
b_error_inf_y = stat("MMS_C_unstructured.stat")["NS"]["AnisoFilterDifference%2"]["max"][-1]

ab_ratio_x = a_error_x / b_error_x
ab_ratio_y = a_error_y / b_error_y
ab_ratio_inf_x = a_error_inf_x / b_error_inf_x
ab_ratio_inf_y = a_error_inf_y / b_error_inf_y

output.write('bc_convergence_vel_f '+str(log(ab_ratio_x, 2))+' '+str(log(ab_ratio_inf_x, 2))+' '+str(log(ab_ratio_y, 2))+' '+str(log(ab_ratio_inf_y, 2))+'\n')
output.close()
errorlog.write('B_error_norm_aniso '+str(a_error_norm)+'\n')
errorlog.close()

bc_convergence_vel_f = [[log(ab_ratio_x, 2), log(ab_ratio_inf_x, 2)], [log(ab_ratio_y, 2), log(ab_ratio_inf_y, 2)]]
    </variable>
    <variable name="bc_convergence_vel_if" language="python">
from fluidity_tools import stat_parser as stat
from math import log
output=open('errorconv_unstructured.log','a')
errorlog=open('error_unstructured.log','a')

a_error_x = stat("MMS_B_unstructured.stat")["NS"]["IsoFilterDifference%1"]["l2norm"][-1]
b_error_x = stat("MMS_C_unstructured.stat")["NS"]["IsoFilterDifference%1"]["l2norm"][-1]
a_error_y = stat("MMS_B_unstructured.stat")["NS"]["IsoFilterDifference%2"]["l2norm"][-1]
b_error_y = stat("MMS_C_unstructured.stat")["NS"]["IsoFilterDifference%2"]["l2norm"][-1]
a_error_norm = stat("MMS_B_unstructured.stat")["NS"]["IsoFilterDifference%magnitude"]["l2norm"][-1]

a_error_inf_x = stat("MMS_B_unstructured.stat")["NS"]["IsoFilterDifference%1"]["max"][-1]
b_error_inf_x = stat("MMS_C_unstructured.stat")["NS"]["IsoFilterDifference%1"]["max"][-1]
a_error_inf_y = stat("MMS_B_unstructured.stat")["NS"]["IsoFilterDifference%2"]["max"][-1]
b_error_inf_y = stat("MMS_C_unstructured.stat")["NS"]["IsoFilterDifference%2"]["max"][-1]

ab_ratio_x = a_error_x / b_error_x
ab_ratio_y = a_error_y / b_error_y
ab_ratio_inf_x = a_error_inf_x / b_error_inf_x
ab_ratio_inf_y = a_error_inf_y / b_error_inf_y

output.write('bc_convergence_vel_if '+str(log(ab_ratio_x, 2))+' '+str(log(ab_ratio_inf_x, 2))+' '+str(log(ab_ratio_y, 2))+' '+str(log(ab_ratio_inf_y, 2))+'\n')
output.close()
errorlog.write('B_error_norm_iso '+str(a_error_norm)+'\n')
errorlog.close()

bc_convergence_vel_if = [[log(ab_ratio_x, 2), log(ab_ratio_inf_x, 2)], [log(ab_ratio_y, 2), log(ab_ratio_inf_y, 2)]]
    </variable>
    <variable name="bc_convergence_vel_mlf" language="python">
from fluidity_tools import stat_parser as stat
from math import log
output=open('errorconv_unstructured.log','a')
errorlog=open('error_unstructured.log','a')

a_error_x = stat("MMS_B_unstructured.stat")["NS"]["MLFilterDifference%1"]["l2norm"][-1]
b_error_x = stat("MMS_C_unstructured.stat")["NS"]["MLFilterDifference%1"]["l2norm"][-1]
a_error_y = stat("MMS_B_unstructured.stat")["NS"]["MLFilterDifference%2"]["l2norm"][-1]
b_error_y = stat("MMS_C_unstructured.stat")["NS"]["MLFilterDifference%2"]["l2norm"][-1]
a_error_norm = stat("MMS_B_unstructured.stat")["NS"]["MLFilterDifference%magnitude"]["l2norm"][-1]

a_error_inf_x = stat("MMS_B_unstructured.stat")["NS"]["MLFilterDifference%1"]["max"][-1]
b_error_inf_x = stat("MMS_C_unstructured.stat")["NS"]["MLFilterDifference%1"]["max"][-1]
a_error_inf_y = stat("MMS_B_unstructured.stat")["NS"]["MLFilterDifference%2"]["max"][-1]
b_error_inf_y = stat("MMS_C_unstructured.stat")["NS"]["MLFilterDifference%2"]["max"][-1]

ab_ratio_x = a_error_x / b_error_x
ab_ratio_y = a_error_y / b_error_y
ab_ratio_inf_x = a_error_inf_x / b_error_inf_x
ab_ratio_inf_y = a_error_inf_y / b_error_inf_y

output.write('bc_convergence_vel_ml '+str(log(ab_ratio_x, 2))+' '+str(log(ab_ratio_inf_x, 2))+' '+str(log(ab_ratio_y, 2))+' '+str(log(ab_ratio_inf_y, 2))+'\n')
output.close()
errorlog.write('B_error_norm_ml '+str(a_error_norm)+'\n')
errorlog.close()

bc_convergence_vel_mlf = [[log(ab_ratio_x, 2), log(ab_ratio_inf_x, 2)], [log(ab_ratio_y, 2), log(ab_ratio_inf_y, 2)]]
    </variable>
   <variable name="bc_convergence_vel" language="python">
from fluidity_tools import stat_parser as stat
from math import log
output=open('errorconv_unstructured.log','a')
errorlog=open('error_unstructured.log','a')

a_error_x = stat("MMS_B_unstructured.stat")["NS"]["AnalyticalDifference%1"]["l2norm"][-1]
b_error_x = stat("MMS_C_unstructured.stat")["NS"]["AnalyticalDifference%1"]["l2norm"][-1]
a_error_y = stat("MMS_B_unstructured.stat")["NS"]["AnalyticalDifference%2"]["l2norm"][-1]
b_error_y = stat("MMS_C_unstructured.stat")["NS"]["AnalyticalDifference%2"]["l2norm"][-1]
a_error_norm = stat("MMS_B_unstructured.stat")["NS"]["AnalyticalDifference%magnitude"]["l2norm"][-1]

a_error_inf_x = stat("MMS_B_unstructured.stat")["NS"]["AnalyticalDifference%1"]["max"][-1]
b_error_inf_x = stat("MMS_C_unstructured.stat")["NS"]["AnalyticalDifference%1"]["max"][-1]
a_error_inf_y = stat("MMS_B_unstructured.stat")["NS"]["AnalyticalDifference%2"]["max"][-1]
b_error_inf_y = stat("MMS_C_unstructured.stat")["NS"]["AnalyticalDifference%2"]["max"][-1]

ab_ratio_x = a_error_x / b_error_x
ab_ratio_y = a_error_y / b_error_y
ab_ratio_inf_x = a_error_inf_x / b_error_inf_x
ab_ratio_inf_y = a_error_inf_y / b_error_inf_y

output.write('bc_convergence_vel '+str(log(ab_ratio_x, 2))+' '+str(log(ab_ratio_inf_x, 2))+' '+str(log(ab_ratio_y, 2))+' '+str(log(ab_ratio_inf_y, 2))+'\n')
output.close()
errorlog.write('B_error_norm '+str(a_error_norm)+'\n')
errorlog.close()

bc_convergence_vel = [[log(ab_ratio_x, 2), log(ab_ratio_inf_x, 2)], [log(ab_ratio_y, 2), log(ab_ratio_inf_y, 2)]]
    </variable>
    <variable name="cd_convergence_vel_f" language="python">
from fluidity_tools import stat_parser as stat
from math import log
output=open('errorconv_unstructured.log','a')
errorlog=open('error_unstructured.log','a')

a_error_x = stat("MMS_C_unstructured.stat")["NS"]["AnisoFilterDifference%1"]["l2norm"][-1]
b_error_x = stat("MMS_D_unstructured.stat")["NS"]["AnisoFilterDifference%1"]["l2norm"][-1]
a_error_y = stat("MMS_C_unstructured.stat")["NS"]["AnisoFilterDifference%2"]["l2norm"][-1]
b_error_y = stat("MMS_D_unstructured.stat")["NS"]["AnisoFilterDifference%2"]["l2norm"][-1]
a_error_norm = stat("MMS_C_unstructured.stat")["NS"]["AnisoFilterDifference%magnitude"]["l2norm"][-1]

a_error_inf_x = stat("MMS_C_unstructured.stat")["NS"]["AnisoFilterDifference%1"]["max"][-1]
b_error_inf_x = stat("MMS_D_unstructured.stat")["NS"]["AnisoFilterDifference%1"]["max"][-1]
a_error_inf_y = stat("MMS_C_unstructured.stat")["NS"]["AnisoFilterDifference%2"]["max"][-1]
b_error_inf_y = stat("MMS_D_unstructured.stat")["NS"]["AnisoFilterDifference%2"]["max"][-1]

ab_ratio_x = a_error_x / b_error_x
ab_ratio_y = a_error_y / b_error_y
ab_ratio_inf_x = a_error_inf_x / b_error_inf_x
ab_ratio_inf_y = a_error_inf_y / b_error_inf_y

output.write('cd_convergence_vel_f '+str(log(ab_ratio_x, 2))+' '+str(log(ab_ratio_inf_x, 2))+' '+str(log(ab_ratio_y, 2))+' '+str(log(ab_ratio_inf_y, 2))+'\n')
output.close()
errorlog.write('C_error_norm_aniso '+str(a_error_norm)+'\n')
errorlog.close()

cd_convergence_vel_f = [[log(ab_ratio_x, 2), log(ab_ratio_inf_x, 2)], [log(ab_ratio_y, 2), log(ab_ratio_inf_y, 2)]]
    </variable>
    <variable name="cd_convergence_vel_if" language="python">
from fluidity_tools import stat_parser as stat
from math import log
output=open('errorconv_unstructured.log','a')
errorlog=open('error_unstructured.log','a')

a_error_x = stat("MMS_C_unstructured.stat")["NS"]["IsoFilterDifference%1"]["l2norm"][-1]
b_error_x = stat("MMS_D_unstructured.stat")["NS"]["IsoFilterDifference%1"]["l2norm"][-1]
a_error_y = stat("MMS_C_unstructured.stat")["NS"]["IsoFilterDifference%2"]["l2norm"][-1]
b_error_y = stat("MMS_D_unstructured.stat")["NS"]["IsoFilterDifference%2"]["l2norm"][-1]
a_error_norm = stat("MMS_C_unstructured.stat")["NS"]["IsoFilterDifference%magnitude"]["l2norm"][-1]

a_error_inf_x = stat("MMS_C_unstructured.stat")["NS"]["IsoFilterDifference%1"]["max"][-1]
b_error_inf_x = stat("MMS_D_unstructured.stat")["NS"]["IsoFilterDifference%1"]["max"][-1]
a_error_inf_y = stat("MMS_C_unstructured.stat")["NS"]["IsoFilterDifference%2"]["max"][-1]
b_error_inf_y = stat("MMS_D_unstructured.stat")["NS"]["IsoFilterDifference%2"]["max"][-1]

ab_ratio_x = a_error_x / b_error_x
ab_ratio_y = a_error_y / b_error_y
ab_ratio_inf_x = a_error_inf_x / b_error_inf_x
ab_ratio_inf_y = a_error_inf_y / b_error_inf_y

output.write('cd_convergence_vel_if '+str(log(ab_ratio_x, 2))+' '+str(log(ab_ratio_inf_x, 2))+' '+str(log(ab_ratio_y, 2))+' '+str(log(ab_ratio_inf_y, 2))+'\n')
output.close()
errorlog.write('C_error_norm_iso '+str(a_error_norm)+'\n')
errorlog.close()

cd_convergence_vel_if = [[log(ab_ratio_x, 2), log(ab_ratio_inf_x, 2)], [log(ab_ratio_y, 2), log(ab_ratio_inf_y, 2)]]
    </variable>
    <variable name="cd_convergence_vel_mlf" language="python">
from fluidity_tools import stat_parser as stat
from math import log
output=open('errorconv_unstructured.log','a')
errorlog=open('error_unstructured.log','a')

a_error_x = stat("MMS_C_unstructured.stat")["NS"]["MLFilterDifference%1"]["l2norm"][-1]
b_error_x = stat("MMS_D_unstructured.stat")["NS"]["MLFilterDifference%1"]["l2norm"][-1]
a_error_y = stat("MMS_C_unstructured.stat")["NS"]["MLFilterDifference%2"]["l2norm"][-1]
b_error_y = stat("MMS_D_unstructured.stat")["NS"]["MLFilterDifference%2"]["l2norm"][-1]
a_error_norm = stat("MMS_C_unstructured.stat")["NS"]["MLFilterDifference%magnitude"]["l2norm"][-1]

a_error_inf_x = stat("MMS_C_unstructured.stat")["NS"]["MLFilterDifference%1"]["max"][-1]
b_error_inf_x = stat("MMS_D_unstructured.stat")["NS"]["MLFilterDifference%1"]["max"][-1]
a_error_inf_y = stat("MMS_C_unstructured.stat")["NS"]["MLFilterDifference%2"]["max"][-1]
b_error_inf_y = stat("MMS_D_unstructured.stat")["NS"]["MLFilterDifference%2"]["max"][-1]

ab_ratio_x = a_error_x / b_error_x
ab_ratio_y = a_error_y / b_error_y
ab_ratio_inf_x = a_error_inf_x / b_error_inf_x
ab_ratio_inf_y = a_error_inf_y / b_error_inf_y

output.write('cd_convergence_vel_ml '+str(log(ab_ratio_x, 2))+' '+str(log(ab_ratio_inf_x, 2))+' '+str(log(ab_ratio_y, 2))+' '+str(log(ab_ratio_inf_y, 2))+'\n')
output.close()
errorlog.write('C_error_norm_ml '+str(a_error_norm)+'\n')
errorlog.close()

cd_convergence_vel_mlf = [[log(ab_ratio_x, 2), log(ab_ratio_inf_x, 2)], [log(ab_ratio_y, 2), log(ab_ratio_inf_y, 2)]]
    </variable>
    <variable name="cd_convergence_vel" language="python">
from fluidity_tools import stat_parser as stat
from math import log
output=open('errorconv_unstructured.log','a')
errorlog=open('error_unstructured.log','a')

a_error_x = stat("MMS_C_unstructured.stat")["NS"]["AnalyticalDifference%1"]["l2norm"][-1]
b_error_x = stat("MMS_D_unstructured.stat")["NS"]["AnalyticalDifference%1"]["l2norm"][-1]
a_error_y = stat("MMS_C_unstructured.stat")["NS"]["AnalyticalDifference%2"]["l2norm"][-1]
b_error_y = stat("MMS_D_unstructured.stat")["NS"]["AnalyticalDifference%2"]["l2norm"][-1]

a_error_inf_x = stat("MMS_C_unstructured.stat")["NS"]["AnalyticalDifference%1"]["max"][-1]
b_error_inf_x = stat("MMS_D_unstructured.stat")["NS"]["AnalyticalDifference%1"]["max"][-1]
a_error_inf_y = stat("MMS_C_unstructured.stat")["NS"]["AnalyticalDifference%2"]["max"][-1]
b_error_inf_y = stat("MMS_D_unstructured.stat")["NS"]["AnalyticalDifference%2"]["max"][-1]

a_error_norm = stat("MMS_C_unstructured.stat")["NS"]["AnalyticalDifference%magnitude"]["l2norm"][-1]
b_error_norm = stat("MMS_D_unstructured.stat")["NS"]["AnalyticalDifference%magnitude"]["l2norm"][-1]
b1_error_norm = stat("MMS_D_unstructured.stat")["NS"]["MLFilterDifference%magnitude"]["l2norm"][-1]
b2_error_norm = stat("MMS_D_unstructured.stat")["NS"]["IsoFilterDifference%magnitude"]["l2norm"][-1]
b3_error_norm = stat("MMS_D_unstructured.stat")["NS"]["AnisoFilterDifference%magnitude"]["l2norm"][-1]

ab_ratio_x = a_error_x / b_error_x
ab_ratio_y = a_error_y / b_error_y
ab_ratio_inf_x = a_error_inf_x / b_error_inf_x
ab_ratio_inf_y = a_error_inf_y / b_error_inf_y

output.write('cd_convergence_vel '+str(log(ab_ratio_x, 2))+' '+str(log(ab_ratio_inf_x, 2))+' '+str(log(ab_ratio_y, 2))+' '+str(log(ab_ratio_inf_y, 2))+'\n')
output.close()
errorlog.write('C_error_norm '+str(a_error_norm)+'\n')
errorlog.write('D_error_norm_aniso '+str(b3_error_norm)+'\n')
errorlog.write('D_error_norm_iso '+str(b2_error_norm)+'\n')
errorlog.write('D_error_norm_ml '+str(b1_error_norm)+'\n')
errorlog.write('D_error_norm '+str(b_error_norm)+'\n')
errorlog.close()

cd_convergence_vel = [[log(ab_ratio_x, 2), log(ab_ratio_inf_x, 2)], [log(ab_ratio_y, 2), log(ab_ratio_inf_y, 2)]]
    </variable>
    <variable name="ab_convergence_isocomm" language="python">
from fluidity_tools import stat_parser as stat
from math import log
convlog=open('commconv_unstructured.log','w')
commlog=open('commerror_unstructured.log','w')

a_error_norm = stat("MMS_A_unstructured.stat")["NS"]["IsoCommError%magnitude"]["l2norm"][-1]
b_error_norm = stat("MMS_B_unstructured.stat")["NS"]["IsoCommError%magnitude"]["l2norm"][-1]
a_error_inf = stat("MMS_A_unstructured.stat")["NS"]["IsoCommError%magnitude"]["max"][-1]
b_error_inf = stat("MMS_B_unstructured.stat")["NS"]["IsoCommError%magnitude"]["max"][-1]

ab_ratio_norm = a_error_norm / b_error_norm
ab_ratio_inf = a_error_inf / b_error_inf

convlog.write('AB_comm_norm_conv_iso '+str(log(ab_ratio_norm,2))+' '+str(log(ab_ratio_inf,2))+'\n')
commlog.write('A_comm_error_iso '+str(a_error_norm)+' '+str(a_error_inf)+'\n')
convlog.close()
commlog.close()
ab_convergence_isocomm = [[log(ab_ratio_norm, 2), log(ab_ratio_inf, 2)]]
    </variable>
    <variable name="ab_convergence_anisocomm" language="python">
from fluidity_tools import stat_parser as stat
from math import log
convlog=open('commconv_unstructured.log','a')
commlog=open('commerror_unstructured.log','a')

a_error_norm = stat("MMS_A_unstructured.stat")["NS"]["AnisoCommError%magnitude"]["l2norm"][-1]
b_error_norm = stat("MMS_B_unstructured.stat")["NS"]["AnisoCommError%magnitude"]["l2norm"][-1]
a_error_inf = stat("MMS_A_unstructured.stat")["NS"]["AnisoCommError%magnitude"]["max"][-1]
b_error_inf = stat("MMS_B_unstructured.stat")["NS"]["AnisoCommError%magnitude"]["max"][-1]

ab_ratio_norm = a_error_norm / b_error_norm
ab_ratio_inf = a_error_inf / b_error_inf

convlog.write('AB_comm_norm_conv_aniso '+str(log(ab_ratio_norm,2))+' '+str(log(ab_ratio_inf,2))+'\n')
commlog.write('A_comm_error_aniso '+str(a_error_norm)+' '+str(a_error_inf)+'\n')
convlog.close()
commlog.close()
ab_convergence_anisocomm = [[log(ab_ratio_norm, 2), log(ab_ratio_inf, 2)]]
    </variable>
    <variable name="bc_convergence_isocomm" language="python">
from fluidity_tools import stat_parser as stat
from math import log
convlog=open('commconv_unstructured.log','a')
commlog=open('commerror_unstructured.log','a')

a_error_norm = stat("MMS_B_unstructured.stat")["NS"]["IsoCommError%magnitude"]["l2norm"][-1]
b_error_norm = stat("MMS_C_unstructured.stat")["NS"]["IsoCommError%magnitude"]["l2norm"][-1]
a_error_inf = stat("MMS_B_unstructured.stat")["NS"]["IsoCommError%magnitude"]["max"][-1]
b_error_inf = stat("MMS_C_unstructured.stat")["NS"]["IsoCommError%magnitude"]["max"][-1]

ab_ratio_norm = a_error_norm / b_error_norm
ab_ratio_inf = a_error_inf / b_error_inf

convlog.write('BC_comm_norm_conv_iso '+str(log(ab_ratio_norm,2))+' '+str(log(ab_ratio_inf,2))+'\n')
commlog.write('B_comm_error_iso '+str(a_error_norm)+' '+str(a_error_inf)+'\n')
convlog.close()
commlog.close()
bc_convergence_isocomm = [[log(ab_ratio_norm, 2), log(ab_ratio_inf, 2)]]
    </variable>
    <variable name="bc_convergence_anisocomm" language="python">
from fluidity_tools import stat_parser as stat
from math import log
convlog=open('commconv_unstructured.log','a')
commlog=open('commerror_unstructured.log','a')

a_error_norm = stat("MMS_B_unstructured.stat")["NS"]["AnisoCommError%magnitude"]["l2norm"][-1]
b_error_norm = stat("MMS_C_unstructured.stat")["NS"]["AnisoCommError%magnitude"]["l2norm"][-1]
a_error_inf = stat("MMS_B_unstructured.stat")["NS"]["AnisoCommError%magnitude"]["max"][-1]
b_error_inf = stat("MMS_C_unstructured.stat")["NS"]["AnisoCommError%magnitude"]["max"][-1]

ab_ratio_norm = a_error_norm / b_error_norm
ab_ratio_inf = a_error_inf / b_error_inf

convlog.write('BC_comm_norm_conv_aniso '+str(log(ab_ratio_norm,2))+' '+str(log(ab_ratio_inf,2))+'\n')
commlog.write('B_comm_error_aniso '+str(a_error_norm)+' '+str(a_error_inf)+'\n')
convlog.close()
commlog.close()
bc_convergence_anisocomm = [[log(ab_ratio_norm, 2), log(ab_ratio_inf, 2)]]
    </variable>
    <variable name="cd_convergence_isocomm" language="python">
from fluidity_tools import stat_parser as stat
from math import log
convlog=open('commconv_unstructured.log','a')
commlog=open('commerror_unstructured.log','a')

a_error_norm = stat("MMS_C_unstructured.stat")["NS"]["IsoCommError%magnitude"]["l2norm"][-1]
b_error_norm = stat("MMS_D_unstructured.stat")["NS"]["IsoCommError%magnitude"]["l2norm"][-1]
a_error_inf = stat("MMS_C_unstructured.stat")["NS"]["IsoCommError%magnitude"]["max"][-1]
b_error_inf = stat("MMS_D_unstructured.stat")["NS"]["IsoCommError%magnitude"]["max"][-1]

ab_ratio_norm = a_error_norm / b_error_norm
ab_ratio_inf = a_error_inf / b_error_inf

convlog.write('CD_comm_norm_conv_iso '+str(log(ab_ratio_norm,2))+' '+str(log(ab_ratio_inf,2))+'\n')
commlog.write('C_comm_error_iso '+str(a_error_norm)+' '+str(a_error_inf)+'\n')
convlog.close()
commlog.close()
cd_convergence_isocomm = [[log(ab_ratio_norm, 2), log(ab_ratio_inf, 2)]]
    </variable>
    <variable name="cd_convergence_anisocomm" language="python">
from fluidity_tools import stat_parser as stat
from math import log
convlog=open('commconv_unstructured.log','a')
commlog=open('commerror_unstructured.log','a')

a_error_norm = stat("MMS_C_unstructured.stat")["NS"]["AnisoCommError%magnitude"]["l2norm"][-1]
b_error_norm = stat("MMS_D_unstructured.stat")["NS"]["IsoCommError%magnitude"]["l2norm"][-1]
b2_error_norm = stat("MMS_D_unstructured.stat")["NS"]["AnisoCommError%magnitude"]["l2norm"][-1]
a_error_inf = stat("MMS_C_unstructured.stat")["NS"]["AnisoCommError%magnitude"]["max"][-1]
b_error_inf = stat("MMS_D_unstructured.stat")["NS"]["IsoCommError%magnitude"]["max"][-1]
b2_error_inf = stat("MMS_D_unstructured.stat")["NS"]["AnisoCommError%magnitude"]["max"][-1]

ab_ratio_norm = a_error_norm / b_error_norm
ab_ratio_inf = a_error_inf / b_error_inf

convlog.write('CD_comm_norm_conv_aniso '+str(log(ab_ratio_norm,2))+' '+str(log(ab_ratio_inf,2))+'\n')
commlog.write('C_comm_error_aniso '+str(a_error_norm)+' '+str(a_error_inf)+'\n')
commlog.write('D_comm_error_iso '+str(b_error_norm)+' '+str(b_error_inf)+'\n')
commlog.write('D_comm_error_aniso '+str(b2_error_norm)+' '+str(b2_error_inf)+'\n')
convlog.close()
commlog.close()
cd_convergence_anisocomm = [[log(ab_ratio_norm, 2), log(ab_ratio_inf, 2)]]
    </variable>
   <variable name="a_zdiff" language="python">
from fluidity_tools import stat_parser as stat
a_zdiff = stat("MMS_A_unstructured.stat")["NS"]["ZeroFilterDifference%magnitude"]["l2norm"][-1]
    </variable>
   <variable name="b_zdiff" language="python">
from fluidity_tools import stat_parser as stat
b_zdiff = stat("MMS_B_unstructured.stat")["NS"]["ZeroFilterDifference%magnitude"]["l2norm"][-1]
    </variable>
   <variable name="c_zdiff" language="python">
from fluidity_tools import stat_parser as stat
c_zdiff = stat("MMS_C_unstructured.stat")["NS"]["ZeroFilterDifference%magnitude"]["l2norm"][-1]
    </variable>
   <variable name="d_zdiff" language="python">
from fluidity_tools import stat_parser as stat
d_zdiff = stat("MMS_D_unstructured.stat")["NS"]["ZeroFilterDifference%magnitude"]["l2norm"][-1]
    </variable>
  </variables>
  <pass_tests>
    <test name="ab_convergence_vel_f_x: L2 order > 1.2" language="python">
assert(ab_convergence_vel_f[0][0] &gt; 1.2)
    </test>
    <test name="ab_convergence_vel_f_y: L2 order > 1.6" language="python">
assert(ab_convergence_vel_f[1][0] &gt; 1.6)
    </test>
    <test name="bc_convergence_vel_f_x: L2 order > 1.7" language="python">
assert(bc_convergence_vel_f[0][0] &gt; 1.7)
    </test>
    <test name="bc_convergence_vel_f_y: L2 order > 1.7" language="python">
assert(bc_convergence_vel_f[1][0] &gt; 1.7)
    </test>
    <test name="cd_convergence_vel_f_x: L2 order > 1.7" language="python">
assert(cd_convergence_vel_f[0][0] &gt; 1.7)
    </test>
    <test name="cd_convergence_vel_f_y: L2 order > 1.7" language="python">
assert(cd_convergence_vel_f[1][0] &gt; 1.7)
    </test>
    <test name="ab_convergence_vel_if_x: L2 order > 1.4" language="python">
assert(ab_convergence_vel_if[0][0] &gt; 1.4)
    </test>
    <test name="ab_convergence_vel_if_y: L2 order > 1.6" language="python">
assert(ab_convergence_vel_if[1][0] &gt; 1.6)
    </test>
    <test name="bc_convergence_vel_if_x: L2 order > 1.7" language="python">
assert(bc_convergence_vel_if[0][0] &gt; 1.7)
    </test>
    <test name="bc_convergence_vel_if_y: L2 order > 1.7" language="python">
assert(bc_convergence_vel_if[1][0] &gt; 1.7)
    </test>
    <test name="cd_convergence_vel_if_x: L2 order > 1.6" language="python">
assert(cd_convergence_vel_if[0][0] &gt; 1.6)
    </test>
    <test name="cd_convergence_vel_if_y: L2 order > 1.6" language="python">
assert(cd_convergence_vel_if[1][0] &gt; 1.6)
    </test>
    <test name="ab_convergence_vel_ml_x: L2 order > 1.3" language="python">
assert(ab_convergence_vel_mlf[0][0] &gt; 1.3)
    </test>
    <test name="ab_convergence_vel_ml_y: L2 order > 1.4" language="python">
assert(ab_convergence_vel_mlf[1][0] &gt; 1.4)
    </test>
    <test name="bc_convergence_vel_ml_x: L2 order > 1.5" language="python">
assert(bc_convergence_vel_mlf[0][0] &gt; 1.5)
    </test>
    <test name="bc_convergence_vel_ml_y: L2 order > 1.5" language="python">
assert(bc_convergence_vel_mlf[1][0] &gt; 1.5)
    </test>
    <test name="cd_convergence_vel_ml_x: L2 order > 1.4" language="python">
assert(cd_convergence_vel_mlf[0][0] &gt; 1.4)
    </test>
    <test name="cd_convergence_vel_ml_y: L2 order > 1.4" language="python">
assert(cd_convergence_vel_mlf[1][0] &gt; 1.4)
    </test>
    <test name="ab_convergence_isocomm: L2 order > 0.9" language="python">
assert(ab_convergence_isocomm[0][0] &gt; 0.9)
    </test>
    <test name="ab_convergence_anisocomm: L2 order > 0.9" language="python">
assert(ab_convergence_anisocomm[0][0] &gt; 0.9)
    </test>
    <test name="bc_convergence_isocomm: L2 order > 0.7" language="python">
assert(bc_convergence_isocomm[0][0] &gt; 0.7)
    </test>
    <test name="bc_convergence_anisocomm: L2 order > 0.55" language="python">
assert(bc_convergence_anisocomm[0][0] &gt; 0.55)
    </test>
    <test name="cd_convergence_isocomm: L2 order > 0.4" language="python">
assert(cd_convergence_isocomm[0][0] &gt; 0.3)
    </test>
    <test name="cd_convergence_anisocomm: L2 order > 0.9" language="python">
assert(cd_convergence_anisocomm[0][0] &gt; 0.8)
    </test>
    <test name="checking zero-filtered vel A with tolerance 1.2e-07" language="python">
assert(a_zdiff &lt; 1.2e-7)
    </test>
    <test name="checking zero-filtered vel B with tolerance 1.0e-07" language="python">
assert(b_zdiff &lt; 1.e-7)
    </test>
    <test name="checking zero-filtered vel C with tolerance 1.0e-07" language="python">
assert(c_zdiff &lt; 1.e-7)
    </test>
    <test name="checking zero-filtered vel D with tolerance 1.6e-07" language="python">
assert(d_zdiff &lt; 1.6e-7)
    </test>
    <test name="ab_convergence_vel_x: L2 order > 2.1" language="python">
assert(ab_convergence_vel[0][0] &gt; 2.1)
    </test>
    <test name="ab_convergence_vel_y: L2 order > 1.4" language="python">
assert(ab_convergence_vel[1][0] &gt; 1.4)
    </test>
    <test name="bc_convergence_vel_x: L2 order > 2.1" language="python">
assert(bc_convergence_vel[0][0] &gt; 2.1)
    </test>
    <test name="bc_convergence_vel_y: L2 order > 1.6" language="python">
assert(bc_convergence_vel[1][0] &gt; 1.6)
    </test>
    <test name="cd_convergence_vel_x: L2 order > 2.0" language="python">
assert(cd_convergence_vel[0][0] &gt; 2.0)
    </test>
    <test name="cd_convergence_vel_y: L2 order > 1.6" language="python">
assert(cd_convergence_vel[1][0] &gt; 1.6)
    </test>
  </pass_tests>
  <warn_tests>
  </warn_tests>
</testproblem>

