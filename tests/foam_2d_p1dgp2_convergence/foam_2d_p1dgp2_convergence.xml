<?xml version='1.0' encoding='UTF-8'?>
<testproblem>
  <name>2d square unstructured mesh p1dgp2 foam drainage convergence test with weak bcs for velocity and strong for pressure</name>
  <owner userid="pbritopa"/>
  <tags>flml</tags>
  <problem_definition length="long" nprocs="1">
    <command_line>mpiexec fluidity drainage_a.flml &gt; drainage_a.log; mpiexec fluidity drainage_b.flml -l -v1 &gt; drainage_b.log; mpiexec fluidity  drainage_c.flml -l -v1 &gt; drainage_c.log; mpiexec fluidity drainage_d.flml -l -v1 &gt; drainage_d.log</command_line>
  </problem_definition>
  <variables>
    <variable name="ab_convergence_rho" language="python">
from fluidity_tools import stat_parser as stat
from math import log

a_error = stat("drainage_a.stat")["foam"]["ScalarAbsoluteDifference"]["l2norm"][-1]
b_error = stat("drainage_b.stat")["foam"]["ScalarAbsoluteDifference"]["l2norm"][-1]

a_error_inf = stat("drainage_a.stat")["foam"]["ScalarAbsoluteDifference"]["max"][-1]
b_error_inf = stat("drainage_b.stat")["foam"]["ScalarAbsoluteDifference"]["max"][-1]

print(a_error)
print(b_error)

print(a_error_inf)
print(b_error_inf)

ab_ratio = a_error / b_error
ab_ratio_inf = a_error_inf / b_error_inf
ab_convergence_rho = [log(ab_ratio, 2), log(ab_ratio_inf, 2)]
    </variable>
    <variable name="bc_convergence_rho" language="python">
from fluidity_tools import stat_parser as stat
from math import log

b_error = stat("drainage_b.stat")["foam"]["ScalarAbsoluteDifference"]["l2norm"][-1]
c_error = stat("drainage_c.stat")["foam"]["ScalarAbsoluteDifference"]["l2norm"][-1]

b_error_inf = stat("drainage_b.stat")["foam"]["ScalarAbsoluteDifference"]["max"][-1]
c_error_inf = stat("drainage_c.stat")["foam"]["ScalarAbsoluteDifference"]["max"][-1]

print(b_error)
print(c_error)

print(b_error_inf)
print(c_error_inf)

bc_ratio = b_error / c_error
bc_ratio_inf = b_error_inf / c_error_inf
bc_convergence_rho = [log(bc_ratio, 2), log(bc_ratio_inf, 2)]
    </variable>
    <variable name="cd_convergence_rho" language="python">
from fluidity_tools import stat_parser as stat
from math import log

c_error = stat("drainage_c.stat")["foam"]["ScalarAbsoluteDifference"]["l2norm"][-1]
d_error = stat("drainage_d.stat")["foam"]["ScalarAbsoluteDifference"]["l2norm"][-1]

c_error_inf = stat("drainage_c.stat")["foam"]["ScalarAbsoluteDifference"]["max"][-1]
d_error_inf = stat("drainage_d.stat")["foam"]["ScalarAbsoluteDifference"]["max"][-1]

print(c_error)
print(d_error)

print(c_error_inf)
print(d_error_inf)

cd_ratio = c_error / d_error
cd_ratio_inf = c_error_inf / d_error_inf
cd_convergence_rho = [log(cd_ratio, 2), log(cd_ratio_inf, 2)]
    </variable>
    <variable name="ab_convergence_vel" language="python">
from fluidity_tools import stat_parser as stat
from math import log

a_error_x = stat("drainage_a.stat")["foam"]["VectorAbsoluteDifference%1"]["l2norm"][-1]
b_error_x = stat("drainage_b.stat")["foam"]["VectorAbsoluteDifference%1"]["l2norm"][-1]
a_error_y = stat("drainage_a.stat")["foam"]["VectorAbsoluteDifference%2"]["l2norm"][-1]
b_error_y = stat("drainage_b.stat")["foam"]["VectorAbsoluteDifference%2"]["l2norm"][-1]

a_error_inf_x = stat("drainage_a.stat")["foam"]["VectorAbsoluteDifference%1"]["max"][-1]
b_error_inf_x = stat("drainage_b.stat")["foam"]["VectorAbsoluteDifference%1"]["max"][-1]
a_error_inf_y = stat("drainage_a.stat")["foam"]["VectorAbsoluteDifference%2"]["max"][-1]
b_error_inf_y = stat("drainage_b.stat")["foam"]["VectorAbsoluteDifference%2"]["max"][-1]

print(a_error_x)
print(b_error_x)
print(a_error_y)
print(b_error_y)

print(a_error_inf_x)
print(b_error_inf_x)
print(a_error_inf_y)
print(b_error_inf_y)

ab_ratio_x = a_error_x / b_error_x
ab_ratio_y = a_error_y / b_error_y
ab_ratio_inf_x = a_error_inf_x / b_error_inf_x
ab_ratio_inf_y = a_error_inf_y / b_error_inf_y
ab_convergence_vel = [[log(ab_ratio_x, 2), log(ab_ratio_inf_x, 2)], [log(ab_ratio_y, 2), log(ab_ratio_inf_y, 2)]]
    </variable>
    <variable name="bc_convergence_vel" language="python">
from fluidity_tools import stat_parser as stat
from math import log

b_error_x = stat("drainage_b.stat")["foam"]["VectorAbsoluteDifference%1"]["l2norm"][-1]
c_error_x = stat("drainage_c.stat")["foam"]["VectorAbsoluteDifference%1"]["l2norm"][-1]
b_error_y = stat("drainage_b.stat")["foam"]["VectorAbsoluteDifference%2"]["l2norm"][-1]
c_error_y = stat("drainage_c.stat")["foam"]["VectorAbsoluteDifference%2"]["l2norm"][-1]

b_error_inf_x = stat("drainage_b.stat")["foam"]["VectorAbsoluteDifference%1"]["max"][-1]
c_error_inf_x = stat("drainage_c.stat")["foam"]["VectorAbsoluteDifference%1"]["max"][-1]
b_error_inf_y = stat("drainage_b.stat")["foam"]["VectorAbsoluteDifference%2"]["max"][-1]
c_error_inf_y = stat("drainage_c.stat")["foam"]["VectorAbsoluteDifference%2"]["max"][-1]

print(b_error_x)
print(c_error_x)
print(b_error_y)
print(c_error_y)

print(b_error_inf_x)
print(c_error_inf_x)
print(b_error_inf_y)
print(c_error_inf_y)

bc_ratio_x = b_error_x / c_error_x
bc_ratio_y = b_error_y / c_error_y
bc_ratio_inf_x = b_error_inf_x / c_error_inf_x
bc_ratio_inf_y = b_error_inf_y / c_error_inf_y
bc_convergence_vel = [[log(bc_ratio_x, 2), log(bc_ratio_inf_x, 2)], [log(bc_ratio_y, 2), log(bc_ratio_inf_y, 2)]]
    </variable>
    <variable name="cd_convergence_vel" language="python">
from fluidity_tools import stat_parser as stat
from math import log

c_error_x = stat("drainage_c.stat")["foam"]["VectorAbsoluteDifference%1"]["l2norm"][-1]
d_error_x = stat("drainage_d.stat")["foam"]["VectorAbsoluteDifference%1"]["l2norm"][-1]
c_error_y = stat("drainage_c.stat")["foam"]["VectorAbsoluteDifference%2"]["l2norm"][-1]
d_error_y = stat("drainage_d.stat")["foam"]["VectorAbsoluteDifference%2"]["l2norm"][-1]

c_error_inf_x = stat("drainage_c.stat")["foam"]["VectorAbsoluteDifference%1"]["max"][-1]
d_error_inf_x = stat("drainage_d.stat")["foam"]["VectorAbsoluteDifference%1"]["max"][-1]
c_error_inf_y = stat("drainage_c.stat")["foam"]["VectorAbsoluteDifference%2"]["max"][-1]
d_error_inf_y = stat("drainage_d.stat")["foam"]["VectorAbsoluteDifference%2"]["max"][-1]

print(c_error_x)
print(d_error_x)
print(c_error_y)
print(d_error_y)

print(c_error_inf_x)
print(d_error_inf_x)
print(c_error_inf_y)
print(d_error_inf_y)

cd_ratio_x = c_error_x / d_error_x
cd_ratio_y = c_error_y / d_error_y
cd_ratio_inf_x = c_error_inf_x / d_error_inf_x
cd_ratio_inf_y = c_error_inf_y / d_error_inf_y
cd_convergence_vel = [[log(cd_ratio_x, 2), log(cd_ratio_inf_x, 2)], [log(cd_ratio_y, 2), log(cd_ratio_inf_y, 2)]]
    </variable>
    <variable name="a_finish_time" language="python">
from fluidity_tools import stat_parser as stat
a_finish_time = stat("drainage_a.stat")["ElapsedTime"]["value"][-1]

print(a_finish_time)
    </variable>
    <variable name="b_finish_time" language="python">
from fluidity_tools import stat_parser as stat
b_finish_time = stat("drainage_b.stat")["ElapsedTime"]["value"][-1]

print(b_finish_time)
    </variable>
    <variable name="c_finish_time" language="python">
from fluidity_tools import stat_parser as stat
c_finish_time = stat("drainage_c.stat")["ElapsedTime"]["value"][-1]

print(c_finish_time)
    </variable>
    <variable name="d_finish_time" language="python">
from fluidity_tools import stat_parser as stat
d_finish_time = stat("drainage_d.stat")["ElapsedTime"]["value"][-1]

print(d_finish_time)
    </variable>
    <variable name="a_final_change_rho" language="python">
import vtktools
from fluidity_tools import stat_parser as stat
vtu = vtktools.vtu("drainage_a_1.vtu")
dt = stat("drainage_a.stat")["dt"]["value"][-1]
a_final_change_rho = max(abs(vtu.GetScalarField("Density")-vtu.GetScalarField("OldDensity"))/dt)

print(a_final_change_rho)
    </variable>
    <variable name="b_final_change_rho" language="python">
import vtktools
from fluidity_tools import stat_parser as stat
vtu = vtktools.vtu("drainage_b_1.vtu")
dt = stat("drainage_b.stat")["dt"]["value"][-1]
b_final_change_rho = max(abs(vtu.GetScalarField("Density")-vtu.GetScalarField("OldDensity"))/dt)

print(b_final_change_rho)
    </variable>
    <variable name="c_final_change_rho" language="python">
import vtktools
from fluidity_tools import stat_parser as stat
vtu = vtktools.vtu("drainage_c_1.vtu")
dt = stat("drainage_c.stat")["dt"]["value"][-1]
c_final_change_rho = max(abs(vtu.GetScalarField("Density")-vtu.GetScalarField("OldDensity"))/dt)

print(c_final_change_rho)
    </variable>
    <variable name="d_final_change_rho" language="python">
import vtktools
from fluidity_tools import stat_parser as stat
vtu = vtktools.vtu("drainage_d_1.vtu")
dt = stat("drainage_d.stat")["dt"]["value"][-1]
d_final_change_rho = max(abs(vtu.GetScalarField("Density")-vtu.GetScalarField("OldDensity"))/dt)

print(d_final_change_rho)
    </variable>
    <variable name="a_final_change_vel" language="python">
import vtktools
from fluidity_tools import stat_parser as stat
vtu = vtktools.vtu("drainage_a_1.vtu")
dt = stat("drainage_a.stat")["dt"]["value"][-1]
a_final_change_vel = max(max(abs(vtu.GetVectorField("Velocity")[:,0]-vtu.GetVectorField("OldVelocity")[:,0])/dt), max(abs(vtu.GetVectorField("Velocity")[:,1]-vtu.GetVectorField("OldVelocity")[:,1])/dt), max(abs(vtu.GetVectorField("Velocity")[:,2]-vtu.GetVectorField("OldVelocity")[:,2])/dt))
print(a_final_change_vel)
    </variable>
    <variable name="b_final_change_vel" language="python">
import vtktools
from fluidity_tools import stat_parser as stat
vtu = vtktools.vtu("drainage_b_1.vtu")
dt = stat("drainage_b.stat")["dt"]["value"][-1]
b_final_change_vel = max(max(abs(vtu.GetVectorField("Velocity")[:,0]-vtu.GetVectorField("OldVelocity")[:,0])/dt), max(abs(vtu.GetVectorField("Velocity")[:,1]-vtu.GetVectorField("OldVelocity")[:,1])/dt), max(abs(vtu.GetVectorField("Velocity")[:,2]-vtu.GetVectorField("OldVelocity")[:,2])/dt))
print(b_final_change_vel)
    </variable>
    <variable name="c_final_change_vel" language="python">
import vtktools
from fluidity_tools import stat_parser as stat
vtu = vtktools.vtu("drainage_c_1.vtu")
dt = stat("drainage_c.stat")["dt"]["value"][-1]
c_final_change_vel = max(max(abs(vtu.GetVectorField("Velocity")[:,0]-vtu.GetVectorField("OldVelocity")[:,0])/dt), max(abs(vtu.GetVectorField("Velocity")[:,1]-vtu.GetVectorField("OldVelocity")[:,1])/dt), max(abs(vtu.GetVectorField("Velocity")[:,2]-vtu.GetVectorField("OldVelocity")[:,2])/dt))
print(c_final_change_vel)
    </variable>
    <variable name="d_final_change_vel" language="python">
import vtktools
from fluidity_tools import stat_parser as stat
vtu = vtktools.vtu("drainage_d_1.vtu")
dt = stat("drainage_d.stat")["dt"]["value"][-1]
d_final_change_vel = max(max(abs(vtu.GetVectorField("Velocity")[:,0]-vtu.GetVectorField("OldVelocity")[:,0])/dt), max(abs(vtu.GetVectorField("Velocity")[:,1]-vtu.GetVectorField("OldVelocity")[:,1])/dt), max(abs(vtu.GetVectorField("Velocity")[:,2]-vtu.GetVectorField("OldVelocity")[:,2])/dt))
print(d_final_change_vel)
    </variable>
    <variable name="a_max_divergence" language="python">
from fluidity_tools import stat_parser as stat
a_max_divergence = stat("drainage_a.stat")["foam"]["FEDivergence"]["max"][-1]

print(a_max_divergence)
    </variable>
    <variable name="a_min_divergence" language="python">
from fluidity_tools import stat_parser as stat
a_min_divergence = stat("drainage_a.stat")["foam"]["FEDivergence"]["min"][-1]

print(a_min_divergence)
    </variable>
    <variable name="d_max_divergence" language="python">
from fluidity_tools import stat_parser as stat
d_max_divergence = stat("drainage_d.stat")["foam"]["FEDivergence"]["max"][-1]

print(d_max_divergence)
    </variable>
    <variable name="d_min_divergence" language="python">
from fluidity_tools import stat_parser as stat
d_min_divergence = stat("drainage_d.stat")["foam"]["FEDivergence"]["min"][-1]

print(d_min_divergence)
    </variable>
  </variables>
  <pass_tests>
    <test name="ss_reached_in_a_rho" language="python">assert(a_final_change_rho &lt; 1.E-8)
    </test>
    <test name="ss_reached_in_b_rho" language="python">assert(b_final_change_rho &lt; 1.E-8)
    </test>
    <test name="ss_reached_in_c_rho" language="python">assert(c_final_change_rho &lt; 1.E-8)
    </test>
    <test name="ss_reached_in_d_rho" language="python">assert(d_final_change_rho &lt; 1.E-8)
    </test>
    <test name="ss_reached_in_a_vel" language="python">assert(a_final_change_vel &lt; 1.E-9)
    </test>
    <test name="ss_reached_in_b_vel" language="python">assert(b_final_change_vel &lt; 1.E-10)
    </test>
    <test name="ss_reached_in_c_vel" language="python">assert(c_final_change_vel &lt; 1.E-10)
    </test>
    <test name="ss_reached_in_d_vel" language="python">assert(d_final_change_vel &lt; 1.E-10)
    </test>
    <test name="ab_convergence_rho: L2 order between 3.25 and 3.45" language="python">assert(abs(ab_convergence_rho[0]-3.35) &lt; 0.1)
    </test>
    <test name="bc_convergence_rho: L2 order between 3.6 and 3.8" language="python">assert(abs(bc_convergence_rho[0]-3.7) &lt; 0.1)
    </test>
    <test name="cd_convergence_rho: L2 order between 2.8 and 3.2" language="python">assert(abs(cd_convergence_rho[0]-3.0) &lt; 0.2)
    </test>
    <test name="ab_convergence_vel_y: L2 order between 1.6 and 1.8" language="python">assert(abs(ab_convergence_vel[1][0]-1.7) &lt; 0.1)
    </test>
    <test name="bc_convergence_vel_y: L2 order between 1.8 and 2.0" language="python">assert(abs(bc_convergence_vel[1][0]-1.9) &lt; 0.1)
    </test>
    <test name="cd_convergence_vel_y: L2 order between 1.5 and 1.7" language="python">assert(abs(cd_convergence_vel[1][0]-1.6) &lt; 0.1)
    </test>
  </pass_tests>
  <warn_tests/>
</testproblem>
