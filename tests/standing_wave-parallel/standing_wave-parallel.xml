<?xml version='1.0' encoding='utf-8'?>
<testproblem>
  <name>Standing free surface wave in channel using P1DG-P2.</name>
  <owner userid="skramer"/>
  <tags>flml parallel zoltan</tags>
  <problem_definition length="medium" nprocs="2">
    <command_line>mpiexec ../../bin/flredecomp -i 1 -o 2 -v -l standing_wave standing_wave_flredecomp

mpiexec ../../bin/fluidity -v3 -l  standing_wave_flredecomp.flml;
mkdir -p run1_logs; 
mv fluidity.* run1_logs; 
spud-set standing_wave_1_checkpoint.flml /material_phase::water/scalar_field::Pressure/prognostic/scheme/poisson_pressure_solution never;
mpiexec ../../bin/fluidity -v3 -l standing_wave_1_checkpoint.flml</command_line>
  </problem_definition>
  <variables>
    <variable name="solvers_converged" language="python">import os
files = os.listdir("./")
solvers_converged = not "matrixdump" in files and not "matrixdump.info" in files</variable>
    <variable name="max_pressure_diff_left" language="python">
import h5py
import numpy as np
f = h5py.File('standing_wave.detectors.h5part', 'r')
lb = f.attrs['LeftBottom%ids'][0]
lt = f.attrs['LeftTop%ids'][0]
plb = np.empty(len(f))
plt = np.empty(len(f))

for i in range(len(f)):
  s = f[f'/Step#{i}']
  lb_id, = np.where(s['id'][:] == lb)
  lt_id, = np.where(s['id'][:] == lt)
  plb[i] = s['water%Pressure'][lb_id[0]]
  plt[i] = s['water%Pressure'][lt_id[0]]
g=10.0
max_pressure_diff_left=abs(plb-plt).max()/g</variable>
    <variable name="max_pressure_diff_right" language="python">
import h5py
import numpy as np
f = h5py.File('standing_wave.detectors.h5part', 'r')
rb = f.attrs['RightBottom%ids'][0]
rt = f.attrs['RightTop%ids'][0]
prb = np.empty(len(f))
prt = np.empty(len(f))

for i in range(len(f)):
  s = f[f'/Step#{i}']
  rb_id, = np.where(s['id'][:] == rb)
  rt_id, = np.where(s['id'][:] == rt)
  prb[i] = s['water%Pressure'][rb_id[0]]
  prt[i] = s['water%Pressure'][rt_id[0]]
g=10.0
max_pressure_diff_right=abs(prt-prb).max()/g</variable>
    <variable name="max_pressure_diff_middle" language="python">
import h5py
import numpy as np
f = h5py.File('standing_wave.detectors.h5part', 'r')
mb = f.attrs['MiddleBottom%ids'][0]
mt = f.attrs['MiddleTop%ids'][0]
pmb = np.empty(len(f))
pmt = np.empty(len(f))

for i in range(len(f)):
  s = f[f'/Step#{i}']
  mb_id, = np.where(s['id'][:] == mb)
  mt_id, = np.where(s['id'][:] == mt)
  pmb[i] = s['water%Pressure'][mb_id[0]]
  pmt[i] = s['water%Pressure'][mt_id[0]]
g=10.0
max_pressure_diff_middle=abs(pmt-pmb).max()/g</variable>
    <variable name="fs_left" language="python">
import h5py
import numpy as np
f = h5py.File('standing_wave.detectors.h5part', 'r')
lt = f.attrs['LeftTop%ids'][0]
fsl = np.empty(len(f))
for i in range(len(f)):
  s = f[f'/Step#{i}']
  lt_id, = np.where(s['id'][:] == lt)
  fsl[i] = s['water%FreeSurface'][lt_id[0]]

tm = fsl.argmin()
t=f[f'/Step#{tm}'].attrs['time'].item()
fs_left={}
fs_left['min']=fsl.min()
fs_left['min_time']=t
fs_left['end_value']=fsl[-1]</variable>
    <variable name="fs_right" language="python">
import h5py
import numpy as np
f = h5py.File('standing_wave.detectors.h5part', 'r')
rt = f.attrs['RightTop%ids'][0]
fsr = np.empty(len(f))
for i in range(len(f)):
  s = f[f'/Step#{i}']
  rt_id, = np.where(s['id'][:] == rt)
  fsr[i] = s['water%FreeSurface'][rt_id[0]]

tm = fsr.argmax()
t=f[f'/Step#{tm}'].attrs['time'].item()
fs_right={}
fs_right['max']=fsr.max()
fs_right['max_time']=t
fs_right['end_value']=fsr[-1]</variable>
    <variable name="checkpoint_differences" language="python">import vtktools
vtu_init_run=vtktools.vtu('standing_wave_2.pvtu')
vtu_checkp=vtktools.vtu('standing_wave_checkpoint_1.pvtu')
diff=vtktools.VtuDiff(vtu_init_run, vtu_checkp)
checkpoint_differences=dict([(name,abs(diff.GetField(name)).max()) for name in diff.GetFieldNames()])<comment>The checkpoint is run from half-way the initial run to the end. The outcome of the checkpoint run at the end should then be the same as the initial run at the end.</comment></variable>
  </variables>
  <pass_tests>
    <test name="Solvers converged" language="python">assert(solvers_converged)</test>
    <test name="pressure_diff_left" language="python">assert(max_pressure_diff_left&lt;0.05)</test>
    <test name="pressure_diff_right" language="python">assert(max_pressure_diff_right&lt;0.05)</test>
    <test name="pressure_diff_middle" language="python">assert(max_pressure_diff_middle&lt;0.005)</test>
    <test name="fs_left_min" language="python">assert(fs_left['min']&lt;-0.95)</test>
    <test name="fs_left_min_time" language="python">assert abs(fs_left['min_time']-1e4)&lt;200</test>
    <test name="fs_end_value" language="python">assert abs(fs_left['end_value']-1.0)&lt;0.2</test>
    <test name="fs_right_max" language="python">assert(fs_right['max']&gt;-0.95)</test>
    <test name="fs_right_max_time" language="python">assert abs(fs_right['max_time']-1e4)&lt;200</test>
    <test name="fs_end_value" language="python">assert abs(fs_right['end_value']+1.0)&lt;0.2</test>
    <test name="checkpoint_differences_zero" language="python">assert len(checkpoint_differences.values())==7
assert max(checkpoint_differences.values())&lt;1e-9<comment>For me it comes out as 0 exactly, but let's allow for some round off.</comment></test>
  </pass_tests>
  <warn_tests/>
</testproblem>
