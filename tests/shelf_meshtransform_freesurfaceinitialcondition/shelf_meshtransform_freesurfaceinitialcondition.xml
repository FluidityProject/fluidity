<?xml version='1.0' encoding='utf-8'?>

<testproblem>
  <name>shelf_meshtransform_freesurfaceinitialcondition</name>
  <owner userid="asc"/>
  <tags>flml</tags>
  <problem_definition length="short" nprocs="1">
    <command_line>fluidity -v3 -l shelf.flml</command_line>
  </problem_definition>
  <variables>
    <variable name="solvers_converged" language="python">
import os
files = os.listdir("./")
solvers_converged = not "matrixdump" in files and not "matrixdump.info" in files
    </variable>
    <variable name="tolerance" language="python">tolerance=1.0E-12</variable>
    <variable name="surface_node_number" language="python">import vtktools
import math

u=vtktools.vtu("shelf_0.vtu")
location=u.GetLocations()
(ilen, jlen) = location.shape

surface_node_number=0
for i in range(ilen):
  if location[i,1] &gt; -1.0E3:
    surface_node_number += 1
    </variable>
  </variables>
  <pass_tests>
    <test name="Solvers converged" language="python">
      assert(solvers_converged)
    </test>
    <test name="mesh_geometry_in_bound_x_lower" language="python">import vtktools
import math

u=vtktools.vtu("shelf_0.vtu")
location=u.GetLocations()
(ilen, jlen) = location.shape

for i in range(ilen):
  if location[i,0] + tolerance &lt; 0.0:
    raise Exception("Failure: Node outside of x in [0.0,1.0E6].  Lower bound exceeded.")
    </test>
    <test name="mesh_geometry_in_bound_x_upper" language="python">import vtktools
import math

u=vtktools.vtu("shelf_0.vtu")
location=u.GetLocations()
(ilen, jlen) = location.shape

for i in range(ilen):
  if 1.0E6 &lt; location[i,0] - tolerance:
    raise Exception("Failure: Node outside of x in [0.0,1.0E6].  Upper bound exceeded.")
      </test>
    <test name="mesh_geometry_in_bound_y_lower" language="python">import vtktools
import math

u=vtktools.vtu("shelf_0.vtu")
location=u.GetLocations()
(ilen, jlen) = location.shape

for i in range(ilen):
  if location[i,1] + tolerance &lt; -1.0E3:
    raise Exception("Failure: Node outside of y in [-1.0E3,1.0E2].  Lower bound exceeded.")
    </test>
    <test name="mesh_geometry_in_bound_y_upper" language="python">import vtktools
import math

u=vtktools.vtu("shelf_0.vtu")
location=u.GetLocations()
(ilen, jlen) = location.shape

for i in range(ilen):
  if 1.0E2 &lt; location[i,1] - tolerance:
    raise Exception("Failure: Node outside of y in [-1.0E3,1.0E2].  Upper bound exceeded.")
    </test>
    <test name="surface_node_in_bound_mesh_transform" language="python">import vtktools
import math

u=vtktools.vtu("shelf_0.vtu")
location=u.GetLocations()
(ilen, jlen) = location.shape

for i in range(ilen):
  if location[i,1] &gt; -1.0E3:
    if 0.0 &lt;= location[i,0] &lt; 5.0E5:
      if ( location[i,1] - ( - 9.0E2 + (9.0E2/5.0E5) * location[i,0] ) ) &gt; tolerance:
        raise Exception("Failure: Surface node out of bounds in the region where the mesh is transformed.  Check scripts/gmsh_mesh_transform.")
    </test>
    <test name="surface_node_in_bound_freesurface_initial_condition" language="python">import vtktools
import math

u=vtktools.vtu("shelf_0.vtu")
location=u.GetLocations()
(ilen, jlen) = location.shape

for i in range(ilen):
  if location[i,1] &gt; -1.0E3:
    if 5.0E5 &lt;= location[i,0] &lt;= 1.0E6:
      if ( location[i,1] - 1.0E2 ) &gt; tolerance:
        raise Exception("Failure: Surface node out of bounds in the region where the free-surface initial condition is applied.")
    </test>
    <test name="surface_node_number_check_within_bound" language="python">import math
assert ( ( abs(surface_node_number) % 3 == 0 ) and ( abs(102 - surface_node_number) / 3 &lt;= 2 ) )
      <comment>Surface node number should be 102, but is allowed to deviate by three nodes either way (and nothing less - i.e. it can only be a modulo three change)</comment>
    </test>
  </pass_tests>
  <warn_tests/>
</testproblem>
