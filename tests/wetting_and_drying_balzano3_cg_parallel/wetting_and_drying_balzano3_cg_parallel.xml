<?xml version='1.0' encoding='UTF-8'?>
<testproblem>
  <name>balzano1_2plus1</name>
  <owner userid="sf1409"/>
  <tags>parallel zoltan</tags>
  <problem_definition length="medium" nprocs="4">
    <command_line>mpiexec ../../bin/flredecomp -i 1 -o 4 -v -l balzano1_2plus1 balzano1_2plus1_flredecomp &amp;&amp;
mpiexec fluidity balzano1_2plus1_flredecomp.flml; ./plotfs_detec.py --file=balzano1_2plus1.detectors --save=fluidity</command_line>
  </problem_definition>
  <variables>
    <variable name="solvers_converged" language="python">import os
files = os.listdir("./")
solvers_converged = not "matrixdump" in files and not "matrixdump.info" in files</variable>
    <variable name="velocity" language="python">
import h5py
import numpy as np
f = h5py.File('balzano1_2plus1.detectors.h5part', 'r')
n = len(f)-1

d = f[f'/Step#{n}']
ind = np.argsort(d['id'])
velocity = np.vstack([d[f'water%Velocity%{dim}'][:][ind] for dim in 'xyz'])
    </variable>
    <variable name="wetting_drying_alpha" language="python">
import h5py
import numpy as np
f = h5py.File('balzano1_2plus1.detectors.h5part', 'r')
n = len(f)-1

d = f[f'/Step#{n}']
ind = np.argsort(d['id'])
wetting_drying_alpha = d['water%WettingDryingAlpha'][:][ind]
    </variable>
    <variable name="ElapsedTime" language="python">
import h5py
import numpy as np
f = h5py.File('balzano1_2plus1.detectors.h5part', 'r')
n = len(f)-1
ElapsedTime = f[f'/Step#{n}'].attrs['time'].item()
    </variable>
    <variable name="freesurface" language="python">
import h5py
import numpy as np
f = h5py.File('balzano1_2plus1.detectors.h5part', 'r')
n = len(f)-1

d = f[f'/Step#{n}']
ind = np.argsort(d['id'])
freesurface = d['water%FreeSurface'][:][ind]
    </variable>
  </variables>
  <pass_tests>
    <test name="Solvers converged" language="python">assert(solvers_converged)</test>
    <test name="endtime" language="python">assert(ElapsedTime==360000.0)</test>
    <test name="wetting_drying_alpha" language="python">print("Checking if domain is dry for X&lt;2374 at last timestep...",)
for det in range(169):
    assert(wetting_drying_alpha[det]&gt;1e-16)
print("okay.")
print("Checking if right half of domain is wet at last timestep...")
for det in range(499,1001):
    assert(wetting_drying_alpha[det]==0.0)
print("okay.")
<comment>this test checks if the wetting and drying alpa is correct at the last timestep. It should be 0 for detectors located left of X=5520 (det_01...det_4) and 1 for detectors right of that postition (det_06...det_11).

In Balzano3 domain should be dry for X&lt;0.86 * 2760 = 2373.6 at the last timestep</comment></test>
    <test name="Velocity" language="python">print("Checking if velocity is tiny at last timestep...",)
import numpy as np
for det in range(1001):
    magnitude = np.abs(velocity[:,det]).sum()
    assert(magnitude&lt;=0.1)
print("okay.")
</test>
    <test name="waterlevel_in_pond" language="python">print("Checking waterlevel in pond...")
det=int(3600.0/13800.0*1002)
pondfs=freesurface[det]
threshold=-1.1
print("Should be ideally -0.87. It's ", pondfs, " &gt;(!) ", threshold, ".")
assert(pondfs&gt;=threshold)
print("okay.")
<comment>pondsf should be ideally -4800/2760+60/23=0.8696
larger means that water is lost during time.</comment></test>
  </pass_tests>
</testproblem>
