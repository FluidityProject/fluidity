<?xml version='1.0' encoding='utf-8'?>
<testproblem>
  <name>Test of analytical mapping onto a sphere</name>
  <owner userid="cwilson"/>
  <problem_definition length="short" nprocs="1">
    <command_line>fluidity -v3 -l  linear_circle.flml; fluidity -v3 -l  analytic_circle.flml; fluidity -v3 -l  super_circle.flml; fluidity -v3 -l  super_analytic_circle.flml; fluidity -v3 -l linear_hemisphere.flml; fluidity -v3 -l analytic_hemisphere.flml; fluidity -v3 -l super_hemisphere.flml; fluidity -v3 -l super_analytic_hemisphere.flml</command_line>
  </problem_definition>
  <variables>
    <variable name="linear_circle_integral" language="python">from fluidity_tools import stat_parser
stat = stat_parser("linear_circle.stat")
linear_circle_integral = stat["State"]["Field"]["integral"][-1]</variable>
    <variable name="linear_circle_inner_surfaceintegrals" language="python">from fluidity_tools import stat_parser
import numpy
stat = stat_parser("linear_circle.stat")
linear_circle_inner_surfaceintegrals = numpy.array([stat["State"]["Field"]["surface_integral%"+`i`][-1] for i in xrange(1,9)])</variable>
    <variable name="linear_circle_outer_surfaceintegrals" language="python">from fluidity_tools import stat_parser
import numpy
stat = stat_parser("linear_circle.stat")
linear_circle_outer_surfaceintegrals = numpy.array([stat["State"]["Field"]["surface_integral%"+`i`][-1] for i in xrange(9,17)])</variable>
    <variable name="linear_circle_radius_inner_surfaceintegrals" language="python">from fluidity_tools import stat_parser
import numpy
stat = stat_parser("linear_circle.stat")
linear_circle_radius_inner_surfaceintegrals = numpy.array([stat["State"]["Radius"]["surface_integral%"+`i`][-1] for i in xrange(1,9)])</variable>
    <variable name="linear_circle_radius_outer_surfaceintegrals" language="python">from fluidity_tools import stat_parser
import numpy
stat = stat_parser("linear_circle.stat")
linear_circle_radius_outer_surfaceintegrals = numpy.array([stat["State"]["Radius"]["surface_integral%"+`i`][-1] for i in xrange(9,17)])</variable>
    <variable name="analytic_circle_integral" language="python">from fluidity_tools import stat_parser
stat = stat_parser("analytic_circle.stat")
analytic_circle_integral = stat["State"]["Field"]["integral"][-1]</variable>
    <variable name="analytic_circle_inner_surfaceintegrals" language="python">from fluidity_tools import stat_parser
import numpy
stat = stat_parser("analytic_circle.stat")
analytic_circle_inner_surfaceintegrals = numpy.array([stat["State"]["Field"]["surface_integral%"+`i`][-1] for i in xrange(1,9)])</variable>
    <variable name="analytic_circle_outer_surfaceintegrals" language="python">from fluidity_tools import stat_parser
import numpy
stat = stat_parser("analytic_circle.stat")
analytic_circle_outer_surfaceintegrals = numpy.array([stat["State"]["Field"]["surface_integral%"+`i`][-1] for i in xrange(9,17)])</variable>
    <variable name="analytic_circle_radius_inner_surfaceintegrals" language="python">from fluidity_tools import stat_parser
import numpy
stat = stat_parser("analytic_circle.stat")
analytic_circle_radius_inner_surfaceintegrals = numpy.array([stat["State"]["Radius"]["surface_integral%"+`i`][-1] for i in xrange(1,9)])</variable>
    <variable name="analytic_circle_radius_outer_surfaceintegrals" language="python">from fluidity_tools import stat_parser
import numpy
stat = stat_parser("analytic_circle.stat")
analytic_circle_radius_outer_surfaceintegrals = numpy.array([stat["State"]["Radius"]["surface_integral%"+`i`][-1] for i in xrange(9,17)])</variable>
    <variable name="super_circle_integral" language="python">from fluidity_tools import stat_parser
stat = stat_parser("super_circle.stat")
super_circle_integral = stat["State"]["Field"]["integral"][-1]</variable>
    <variable name="super_circle_inner_surfaceintegrals" language="python">from fluidity_tools import stat_parser
import numpy
stat = stat_parser("super_circle.stat")
super_circle_inner_surfaceintegrals = numpy.array([stat["State"]["Field"]["surface_integral%"+`i`][-1] for i in xrange(1,9)])</variable>
    <variable name="super_circle_outer_surfaceintegrals" language="python">from fluidity_tools import stat_parser
import numpy
stat = stat_parser("super_circle.stat")
super_circle_outer_surfaceintegrals = numpy.array([stat["State"]["Field"]["surface_integral%"+`i`][-1] for i in xrange(9,17)])</variable>
    <variable name="super_circle_radius_inner_surfaceintegrals" language="python">from fluidity_tools import stat_parser
import numpy
stat = stat_parser("super_circle.stat")
super_circle_radius_inner_surfaceintegrals = numpy.array([stat["State"]["Radius"]["surface_integral%"+`i`][-1] for i in xrange(1,9)])</variable>
    <variable name="super_circle_radius_outer_surfaceintegrals" language="python">from fluidity_tools import stat_parser
import numpy
stat = stat_parser("super_circle.stat")
super_circle_radius_outer_surfaceintegrals = numpy.array([stat["State"]["Radius"]["surface_integral%"+`i`][-1] for i in xrange(9,17)])</variable>
    <variable name="super_analytic_circle_integral" language="python">from fluidity_tools import stat_parser
stat = stat_parser("super_analytic_circle.stat")
super_analytic_circle_integral = stat["State"]["Field"]["integral"][-1]</variable>
    <variable name="super_analytic_circle_inner_surfaceintegrals" language="python">from fluidity_tools import stat_parser
import numpy
stat = stat_parser("super_analytic_circle.stat")
super_analytic_circle_inner_surfaceintegrals = numpy.array([stat["State"]["Field"]["surface_integral%"+`i`][-1] for i in xrange(1,9)])</variable>
    <variable name="super_analytic_circle_outer_surfaceintegrals" language="python">from fluidity_tools import stat_parser
import numpy
stat = stat_parser("super_analytic_circle.stat")
super_analytic_circle_outer_surfaceintegrals = numpy.array([stat["State"]["Field"]["surface_integral%"+`i`][-1] for i in xrange(9,17)])</variable>
    <variable name="super_analytic_circle_radius_inner_surfaceintegrals" language="python">from fluidity_tools import stat_parser
import numpy
stat = stat_parser("super_analytic_circle.stat")
super_analytic_circle_radius_inner_surfaceintegrals = numpy.array([stat["State"]["Radius"]["surface_integral%"+`i`][-1] for i in xrange(1,9)])</variable>
    <variable name="super_analytic_circle_radius_outer_surfaceintegrals" language="python">from fluidity_tools import stat_parser
import numpy
stat = stat_parser("super_analytic_circle.stat")
super_analytic_circle_radius_outer_surfaceintegrals = numpy.array([stat["State"]["Radius"]["surface_integral%"+`i`][-1] for i in xrange(9,17)])</variable>
    <variable name="linear_hemisphere_integral" language="python">from fluidity_tools import stat_parser
stat = stat_parser("linear_hemisphere.stat")
linear_hemisphere_integral = stat["State"]["Field"]["integral"][-1]</variable>
    <variable name="linear_hemisphere_inner_upper_surfaceintegrals" language="python">from fluidity_tools import stat_parser
import numpy
stat = stat_parser("linear_hemisphere.stat")
linear_hemisphere_inner_upper_surfaceintegrals = numpy.array([stat["State"]["Field"]["surface_integral%"+`i`][-1] for i in xrange(9,17)])</variable>
    <variable name="linear_hemisphere_inner_middle_surfaceintegrals" language="python">from fluidity_tools import stat_parser
import numpy
stat = stat_parser("linear_hemisphere.stat")
linear_hemisphere_inner_middle_surfaceintegrals = numpy.array([stat["State"]["Field"]["surface_integral%"+`i`][-1] for i in xrange(1,9)])</variable>
    <variable name="linear_hemisphere_outer_upper_surfaceintegrals" language="python">from fluidity_tools import stat_parser
import numpy
stat = stat_parser("linear_hemisphere.stat")
linear_hemisphere_outer_upper_surfaceintegrals = numpy.array([stat["State"]["Field"]["surface_integral%"+`i`][-1] for i in xrange(33,41)])</variable>
    <variable name="linear_hemisphere_outer_middle_surfaceintegrals" language="python">from fluidity_tools import stat_parser
import numpy
stat = stat_parser("linear_hemisphere.stat")
linear_hemisphere_outer_middle_surfaceintegrals = numpy.array([stat["State"]["Field"]["surface_integral%"+`i`][-1] for i in xrange(25,33)])</variable>
    <variable name="linear_hemisphere_flat_surfaceintegrals" language="python">from fluidity_tools import stat_parser
import numpy
stat = stat_parser("linear_hemisphere.stat")
linear_hemisphere_flat_surfaceintegrals = numpy.array([stat["State"]["Field"]["surface_integral%"+`i`][-1] for i in xrange(17,25)])</variable>
    <variable name="linear_hemisphere_radius_inner_upper_surfaceintegrals" language="python">from fluidity_tools import stat_parser
import numpy
stat = stat_parser("linear_hemisphere.stat")
linear_hemisphere_radius_inner_upper_surfaceintegrals = numpy.array([stat["State"]["Radius"]["surface_integral%"+`i`][-1] for i in xrange(9,17)])</variable>
    <variable name="linear_hemisphere_radius_inner_middle_surfaceintegrals" language="python">from fluidity_tools import stat_parser
import numpy
stat = stat_parser("linear_hemisphere.stat")
linear_hemisphere_radius_inner_middle_surfaceintegrals = numpy.array([stat["State"]["Radius"]["surface_integral%"+`i`][-1] for i in xrange(1,9)])</variable>
    <variable name="linear_hemisphere_radius_outer_upper_surfaceintegrals" language="python">from fluidity_tools import stat_parser
import numpy
stat = stat_parser("linear_hemisphere.stat")
linear_hemisphere_radius_outer_upper_surfaceintegrals = numpy.array([stat["State"]["Radius"]["surface_integral%"+`i`][-1] for i in xrange(33,41)])</variable>
    <variable name="linear_hemisphere_radius_outer_middle_surfaceintegrals" language="python">from fluidity_tools import stat_parser
import numpy
stat = stat_parser("linear_hemisphere.stat")
linear_hemisphere_radius_outer_middle_surfaceintegrals = numpy.array([stat["State"]["Radius"]["surface_integral%"+`i`][-1] for i in xrange(25,33)])</variable>
    <variable name="analytic_hemisphere_integral" language="python">from fluidity_tools import stat_parser
stat = stat_parser("analytic_hemisphere.stat")
analytic_hemisphere_integral = stat["State"]["Field"]["integral"][-1]</variable>
    <variable name="analytic_hemisphere_inner_upper_surfaceintegrals" language="python">from fluidity_tools import stat_parser
import numpy
stat = stat_parser("analytic_hemisphere.stat")
analytic_hemisphere_inner_upper_surfaceintegrals = numpy.array([stat["State"]["Field"]["surface_integral%"+`i`][-1] for i in xrange(9,17)])</variable>
    <variable name="analytic_hemisphere_inner_middle_surfaceintegrals" language="python">from fluidity_tools import stat_parser
import numpy
stat = stat_parser("analytic_hemisphere.stat")
analytic_hemisphere_inner_middle_surfaceintegrals = numpy.array([stat["State"]["Field"]["surface_integral%"+`i`][-1] for i in xrange(1,9)])</variable>
    <variable name="analytic_hemisphere_outer_upper_surfaceintegrals" language="python">from fluidity_tools import stat_parser
import numpy
stat = stat_parser("analytic_hemisphere.stat")
analytic_hemisphere_outer_upper_surfaceintegrals = numpy.array([stat["State"]["Field"]["surface_integral%"+`i`][-1] for i in xrange(33,41)])</variable>
    <variable name="analytic_hemisphere_outer_middle_surfaceintegrals" language="python">from fluidity_tools import stat_parser
import numpy
stat = stat_parser("analytic_hemisphere.stat")
analytic_hemisphere_outer_middle_surfaceintegrals = numpy.array([stat["State"]["Field"]["surface_integral%"+`i`][-1] for i in xrange(25,33)])</variable>
    <variable name="analytic_hemisphere_flat_surfaceintegrals" language="python">from fluidity_tools import stat_parser
import numpy
stat = stat_parser("analytic_hemisphere.stat")
analytic_hemisphere_flat_surfaceintegrals = numpy.array([stat["State"]["Field"]["surface_integral%"+`i`][-1] for i in xrange(17,25)])</variable>
    <variable name="analytic_hemisphere_radius_inner_upper_surfaceintegrals" language="python">from fluidity_tools import stat_parser
import numpy
stat = stat_parser("analytic_hemisphere.stat")
analytic_hemisphere_radius_inner_upper_surfaceintegrals = numpy.array([stat["State"]["Radius"]["surface_integral%"+`i`][-1] for i in xrange(9,17)])</variable>
    <variable name="analytic_hemisphere_radius_inner_middle_surfaceintegrals" language="python">from fluidity_tools import stat_parser
import numpy
stat = stat_parser("analytic_hemisphere.stat")
analytic_hemisphere_radius_inner_middle_surfaceintegrals = numpy.array([stat["State"]["Radius"]["surface_integral%"+`i`][-1] for i in xrange(1,9)])</variable>
    <variable name="analytic_hemisphere_radius_outer_upper_surfaceintegrals" language="python">from fluidity_tools import stat_parser
import numpy
stat = stat_parser("analytic_hemisphere.stat")
analytic_hemisphere_radius_outer_upper_surfaceintegrals = numpy.array([stat["State"]["Radius"]["surface_integral%"+`i`][-1] for i in xrange(33,41)])</variable>
    <variable name="analytic_hemisphere_radius_outer_middle_surfaceintegrals" language="python">from fluidity_tools import stat_parser
import numpy
stat = stat_parser("analytic_hemisphere.stat")
analytic_hemisphere_radius_outer_middle_surfaceintegrals = numpy.array([stat["State"]["Radius"]["surface_integral%"+`i`][-1] for i in xrange(25,33)])</variable>
    <variable name="super_hemisphere_integral" language="python">from fluidity_tools import stat_parser
stat = stat_parser("super_hemisphere.stat")
super_hemisphere_integral = stat["State"]["Field"]["integral"][-1]</variable>
    <variable name="super_hemisphere_inner_upper_surfaceintegrals" language="python">from fluidity_tools import stat_parser
import numpy
stat = stat_parser("super_hemisphere.stat")
super_hemisphere_inner_upper_surfaceintegrals = numpy.array([stat["State"]["Field"]["surface_integral%"+`i`][-1] for i in xrange(9,17)])</variable>
    <variable name="super_hemisphere_inner_middle_surfaceintegrals" language="python">from fluidity_tools import stat_parser
import numpy
stat = stat_parser("super_hemisphere.stat")
super_hemisphere_inner_middle_surfaceintegrals = numpy.array([stat["State"]["Field"]["surface_integral%"+`i`][-1] for i in xrange(1,9)])</variable>
    <variable name="super_hemisphere_outer_upper_surfaceintegrals" language="python">from fluidity_tools import stat_parser
import numpy
stat = stat_parser("super_hemisphere.stat")
super_hemisphere_outer_upper_surfaceintegrals = numpy.array([stat["State"]["Field"]["surface_integral%"+`i`][-1] for i in xrange(33,41)])</variable>
    <variable name="super_hemisphere_outer_middle_surfaceintegrals" language="python">from fluidity_tools import stat_parser
import numpy
stat = stat_parser("super_hemisphere.stat")
super_hemisphere_outer_middle_surfaceintegrals = numpy.array([stat["State"]["Field"]["surface_integral%"+`i`][-1] for i in xrange(25,33)])</variable>
    <variable name="super_hemisphere_flat_surfaceintegrals" language="python">from fluidity_tools import stat_parser
import numpy
stat = stat_parser("super_hemisphere.stat")
super_hemisphere_flat_surfaceintegrals = numpy.array([stat["State"]["Field"]["surface_integral%"+`i`][-1] for i in xrange(17,25)])</variable>
    <variable name="super_hemisphere_radius_inner_upper_surfaceintegrals" language="python">from fluidity_tools import stat_parser
import numpy
stat = stat_parser("super_hemisphere.stat")
super_hemisphere_radius_inner_upper_surfaceintegrals = numpy.array([stat["State"]["Radius"]["surface_integral%"+`i`][-1] for i in xrange(9,17)])</variable>
    <variable name="super_hemisphere_radius_inner_middle_surfaceintegrals" language="python">from fluidity_tools import stat_parser
import numpy
stat = stat_parser("super_hemisphere.stat")
super_hemisphere_radius_inner_middle_surfaceintegrals = numpy.array([stat["State"]["Radius"]["surface_integral%"+`i`][-1] for i in xrange(1,9)])</variable>
    <variable name="super_hemisphere_radius_outer_upper_surfaceintegrals" language="python">from fluidity_tools import stat_parser
import numpy
stat = stat_parser("super_hemisphere.stat")
super_hemisphere_radius_outer_upper_surfaceintegrals = numpy.array([stat["State"]["Radius"]["surface_integral%"+`i`][-1] for i in xrange(33,41)])</variable>
    <variable name="super_hemisphere_radius_outer_middle_surfaceintegrals" language="python">from fluidity_tools import stat_parser
import numpy
stat = stat_parser("super_hemisphere.stat")
super_hemisphere_radius_outer_middle_surfaceintegrals = numpy.array([stat["State"]["Radius"]["surface_integral%"+`i`][-1] for i in xrange(25,33)])</variable>
    <variable name="super_analytic_hemisphere_integral" language="python">from fluidity_tools import stat_parser
stat = stat_parser("super_analytic_hemisphere.stat")
super_analytic_hemisphere_integral = stat["State"]["Field"]["integral"][-1]</variable>
    <variable name="super_analytic_hemisphere_inner_upper_surfaceintegrals" language="python">from fluidity_tools import stat_parser
import numpy
stat = stat_parser("super_analytic_hemisphere.stat")
super_analytic_hemisphere_inner_upper_surfaceintegrals = numpy.array([stat["State"]["Field"]["surface_integral%"+`i`][-1] for i in xrange(9,17)])</variable>
    <variable name="super_analytic_hemisphere_inner_middle_surfaceintegrals" language="python">from fluidity_tools import stat_parser
import numpy
stat = stat_parser("super_analytic_hemisphere.stat")
super_analytic_hemisphere_inner_middle_surfaceintegrals = numpy.array([stat["State"]["Field"]["surface_integral%"+`i`][-1] for i in xrange(1,9)])</variable>
    <variable name="super_analytic_hemisphere_outer_upper_surfaceintegrals" language="python">from fluidity_tools import stat_parser
import numpy
stat = stat_parser("super_analytic_hemisphere.stat")
super_analytic_hemisphere_outer_upper_surfaceintegrals = numpy.array([stat["State"]["Field"]["surface_integral%"+`i`][-1] for i in xrange(33,41)])</variable>
    <variable name="super_analytic_hemisphere_outer_middle_surfaceintegrals" language="python">from fluidity_tools import stat_parser
import numpy
stat = stat_parser("super_analytic_hemisphere.stat")
super_analytic_hemisphere_outer_middle_surfaceintegrals = numpy.array([stat["State"]["Field"]["surface_integral%"+`i`][-1] for i in xrange(25,33)])</variable>
    <variable name="super_analytic_hemisphere_flat_surfaceintegrals" language="python">from fluidity_tools import stat_parser
import numpy
stat = stat_parser("super_analytic_hemisphere.stat")
super_analytic_hemisphere_flat_surfaceintegrals = numpy.array([stat["State"]["Field"]["surface_integral%"+`i`][-1] for i in xrange(17,25)])</variable>
    <variable name="super_analytic_hemisphere_radius_inner_upper_surfaceintegrals" language="python">from fluidity_tools import stat_parser
import numpy
stat = stat_parser("super_analytic_hemisphere.stat")
super_analytic_hemisphere_radius_inner_upper_surfaceintegrals = numpy.array([stat["State"]["Radius"]["surface_integral%"+`i`][-1] for i in xrange(9,17)])</variable>
    <variable name="super_analytic_hemisphere_radius_inner_middle_surfaceintegrals" language="python">from fluidity_tools import stat_parser
import numpy
stat = stat_parser("super_analytic_hemisphere.stat")
super_analytic_hemisphere_radius_inner_middle_surfaceintegrals = numpy.array([stat["State"]["Radius"]["surface_integral%"+`i`][-1] for i in xrange(1,9)])</variable>
    <variable name="super_analytic_hemisphere_radius_outer_upper_surfaceintegrals" language="python">from fluidity_tools import stat_parser
import numpy
stat = stat_parser("super_analytic_hemisphere.stat")
super_analytic_hemisphere_radius_outer_upper_surfaceintegrals = numpy.array([stat["State"]["Radius"]["surface_integral%"+`i`][-1] for i in xrange(33,41)])</variable>
    <variable name="super_analytic_hemisphere_radius_outer_middle_surfaceintegrals" language="python">from fluidity_tools import stat_parser
import numpy
stat = stat_parser("super_analytic_hemisphere.stat")
super_analytic_hemisphere_radius_outer_middle_surfaceintegrals = numpy.array([stat["State"]["Radius"]["surface_integral%"+`i`][-1] for i in xrange(25,33)])</variable>
  </variables>
  <pass_tests>
    <test name="linear_circle_integral" language="python">from math import pi
print abs(linear_circle_integral-3*pi)/(3*pi)
assert abs(linear_circle_integral-3*pi)/(3*pi) &lt; 0.1</test>
    <test name="linear_circle_inner_surfaceintegrals" language="python">from math import pi
print abs(linear_circle_inner_surfaceintegrals-0.25*pi)/(0.25*pi)
assert all(abs(linear_circle_inner_surfaceintegrals-0.25*pi)/(0.25*pi) &lt; 0.03)</test>
    <test name="linear_circle_outer_surfaceintegrals" language="python">from math import pi
print abs(linear_circle_outer_surfaceintegrals-0.5*pi)/(0.5*pi)
assert all(abs(linear_circle_outer_surfaceintegrals-0.5*pi)/(0.5*pi) &lt; 0.03)</test>
    <test name="linear_circle_radius_inner_surfaceintegrals" language="python">from math import pi
print abs(linear_circle_radius_inner_surfaceintegrals-0.25*pi)/(0.25*pi)
assert all(abs(linear_circle_radius_inner_surfaceintegrals-0.25*pi)/(0.25*pi) &lt; 0.08)</test>
    <test name="linear_circle_radius_outer_surfaceintegrals" language="python">from math import pi
print abs(linear_circle_radius_outer_surfaceintegrals-pi)/(pi)
assert all(abs(linear_circle_radius_outer_surfaceintegrals-pi)/(pi) &lt; 0.08)</test>
    <test name="analytic_circle_integral" language="python">from math import pi
print abs(analytic_circle_integral-3*pi)/(3*pi)
assert abs(analytic_circle_integral-3*pi)/(3*pi) &lt; 1.e-4</test>
    <test name="analytic_circle_inner_surfaceintegrals" language="python">from math import pi
print abs(analytic_circle_inner_surfaceintegrals-0.25*pi)/(0.25*pi)
assert all(abs(analytic_circle_inner_surfaceintegrals-0.25*pi)/(0.25*pi) &lt; 1.e-6)</test>
    <test name="analytic_circle_outer_surfaceintegrals" language="python">from math import pi
print abs(analytic_circle_outer_surfaceintegrals-0.5*pi)/(0.5*pi)
assert all(abs(analytic_circle_outer_surfaceintegrals-0.5*pi)/(0.5*pi) &lt; 1.e-6)</test>
    <test name="analytic_circle_radius_inner_surfaceintegrals" language="python">from math import pi
print abs(analytic_circle_radius_inner_surfaceintegrals-0.25*pi)/(0.25*pi)
assert all(abs(analytic_circle_radius_inner_surfaceintegrals-0.25*pi)/(0.25*pi) &lt; 0.06)</test>
    <test name="analytic_circle_radius_outer_surfaceintegrals" language="python">from math import pi
print abs(analytic_circle_radius_outer_surfaceintegrals-pi)/(pi)
assert all(abs(analytic_circle_radius_outer_surfaceintegrals-pi)/(pi) &lt; 0.06)</test>
    <test name="super_circle_integral" language="python">from math import pi
print abs(super_circle_integral-3*pi)/(3*pi)
assert abs(super_circle_integral-3*pi)/(3*pi) &lt; 0.001</test>
    <test name="super_circle_inner_surfaceintegrals" language="python">from math import pi
print abs(super_circle_inner_surfaceintegrals-0.25*pi)/(0.25*pi)
assert all(abs(super_circle_inner_surfaceintegrals-0.25*pi)/(0.25*pi) &lt; 0.001)</test>
    <test name="super_circle_outer_surfaceintegrals" language="python">from math import pi
print abs(super_circle_outer_surfaceintegrals-0.5*pi)/(0.5*pi)
assert all(abs(super_circle_outer_surfaceintegrals-0.5*pi)/(0.5*pi) &lt; 0.001)</test>
    <test name="super_circle_radius_inner_surfaceintegrals" language="python">from math import pi
print abs(super_circle_radius_inner_surfaceintegrals-0.25*pi)/(0.25*pi)
assert all(abs(super_circle_radius_inner_surfaceintegrals-0.25*pi)/(0.25*pi) &lt; 0.001)</test>
    <test name="super_circle_radius_outer_surfaceintegrals" language="python">from math import pi
print abs(super_circle_radius_outer_surfaceintegrals-pi)/(pi)
assert all(abs(super_circle_radius_outer_surfaceintegrals-pi)/(pi) &lt; 0.001)</test>
    <test name="super_analytic_circle_integral" language="python">from math import pi
print abs(super_analytic_circle_integral-3*pi)/(3*pi)
assert abs(super_analytic_circle_integral-3*pi)/(3*pi) &lt; 1.e-4</test>
    <test name="super_analytic_circle_inner_surfaceintegrals" language="python">from math import pi
print abs(super_analytic_circle_inner_surfaceintegrals-0.25*pi)/(0.25*pi)
assert all(abs(super_analytic_circle_inner_surfaceintegrals-0.25*pi)/(0.25*pi) &lt; 1.e-8)</test>
    <test name="super_analytic_circle_outer_surfaceintegrals" language="python">from math import pi
print abs(super_analytic_circle_outer_surfaceintegrals-0.5*pi)/(0.5*pi)
assert all(abs(super_analytic_circle_outer_surfaceintegrals-0.5*pi)/(0.5*pi) &lt; 1.e-8)</test>
    <test name="super_analytic_circle_radius_inner_surfaceintegrals" language="python">from math import pi
print abs(super_analytic_circle_radius_inner_surfaceintegrals-0.25*pi)/(0.25*pi)
assert all(abs(super_analytic_circle_radius_inner_surfaceintegrals-0.25*pi)/(0.25*pi) &lt; 1.e-8)</test>
    <test name="super_analytic_circle_radius_outer_surfaceintegrals" language="python">from math import pi
print abs(super_analytic_circle_radius_outer_surfaceintegrals-pi)/(pi)
assert all(abs(super_analytic_circle_radius_outer_surfaceintegrals-pi)/(pi) &lt; 1.e-8)</test>
    <test name="linear_hemisphere_integral" language="python">from math import pi
print abs(linear_hemisphere_integral-28*pi/6)/(28*pi/6)
assert abs(linear_hemisphere_integral-28*pi/6)/(28*pi/6) &lt; 0.25</test>
    <test name="linear_hemisphere_inner_upper_surfaceintegrals" language="python">from math import pi
print abs(linear_hemisphere_inner_upper_surfaceintegrals-pi*(1**2)*(2-(2**0.5))/8)/(pi*(1**2)*(2-(2**0.5))/8)
assert all(abs(linear_hemisphere_inner_upper_surfaceintegrals-pi*(1**2)*(2-(2**0.5))/8)/(pi*(1**2)*(2-(2**0.5))/8) &lt; 0.16)</test>
    <test name="linear_hemisphere_inner_middle_surfaceintegrals" language="python">from math import pi
print abs(linear_hemisphere_inner_middle_surfaceintegrals-(2**0.5)*pi*(1**2)/8)/((2**0.5)*pi*(1**2)/8)
assert all(abs(linear_hemisphere_inner_middle_surfaceintegrals-(2**0.5)*pi*(1**2)/8)/((2**0.5)*pi*(1**2)/8) &lt; 0.11)</test>
    <test name="linear_hemisphere_outer_upper_surfaceintegrals" language="python">from math import pi
print abs(linear_hemisphere_outer_upper_surfaceintegrals-pi*(2**2)*(2-(2**0.5))/8)/(pi*(2**2)*(2-(2**0.5))/8)
assert all(abs(linear_hemisphere_outer_upper_surfaceintegrals-pi*(2**2)*(2-(2**0.5))/8)/(pi*(2**2)*(2-(2**0.5))/8) &lt; 0.16)</test>
    <test name="linear_hemisphere_outer_middle_surfaceintegrals" language="python">from math import pi
print abs(linear_hemisphere_outer_middle_surfaceintegrals-(2**0.5)*pi*(2**2)/8)/((2**0.5)*pi*(2**2)/8)
assert all(abs(linear_hemisphere_outer_middle_surfaceintegrals-(2**0.5)*pi*(2**2)/8)/((2**0.5)*pi*(2**2)/8) &lt; 0.11)</test>
    <test name="linear_hemisphere_flat_surfaceintegrals" language="python">from math import pi
print abs(linear_hemisphere_flat_surfaceintegrals-pi*(2**2-1**2)/8)/(pi*(2**2-1**2)/8)
assert all(abs(linear_hemisphere_flat_surfaceintegrals-pi*(2**2-1**2)/8)/(pi*(2**2-1**2)/8) &lt; 0.1)</test>
    <test name="linear_hemisphere_radius_inner_upper_surfaceintegrals" language="python">from math import pi
print abs(linear_hemisphere_radius_inner_upper_surfaceintegrals-pi*(1**2)*(2-(2**0.5))/8)/(pi*(1**2)*(2-(2**0.5))/8)
assert all(abs(linear_hemisphere_radius_inner_upper_surfaceintegrals-pi*(1**2)*(2-(2**0.5))/8)/(pi*(1**2)*(2-(2**0.5))/8) &lt; 0.25)</test>
    <test name="linear_hemisphere_radius_inner_middle_surfaceintegrals" language="python">from math import pi
print abs(linear_hemisphere_radius_inner_middle_surfaceintegrals-(2**0.5)*pi*(1**2)/8)/((2**0.5)*pi*(1**2)/8)
assert all(abs(linear_hemisphere_radius_inner_middle_surfaceintegrals-(2**0.5)*pi*(1**2)/8)/((2**0.5)*pi*(1**2)/8) &lt; 0.2)</test>
    <test name="linear_hemisphere_radius_outer_upper_surfaceintegrals" language="python">from math import pi
print abs(linear_hemisphere_radius_outer_upper_surfaceintegrals-pi*(2**2)*(2-(2**0.5))/4)/(pi*(2**2)*(2-(2**0.5))/4)
assert all(abs(linear_hemisphere_radius_outer_upper_surfaceintegrals-pi*(2**2)*(2-(2**0.5))/4)/(pi*(2**2)*(2-(2**0.5))/4) &lt; 0.25)</test>
    <test name="linear_hemisphere_radius_outer_middle_surfaceintegrals" language="python">from math import pi
print abs(linear_hemisphere_radius_outer_middle_surfaceintegrals-(2**0.5)*pi*(2**2)/4)/((2**0.5)*pi*(2**2)/4)
assert all(abs(linear_hemisphere_radius_outer_middle_surfaceintegrals-(2**0.5)*pi*(2**2)/4)/((2**0.5)*pi*(2**2)/4) &lt; 0.2)</test>
    <test name="analytic_hemisphere_integral" language="python">from math import pi
print abs(analytic_hemisphere_integral-28*pi/6)/(28*pi/6)
assert abs(analytic_hemisphere_integral-28*pi/6)/(28*pi/6) &lt; 1.e-3</test>
    <test name="analytic_hemisphere_inner_upper_surfaceintegrals" language="python">from math import pi
print abs(analytic_hemisphere_inner_upper_surfaceintegrals-pi*(1**2)*(2-(2**0.5))/8)/(pi*(1**2)*(2-(2**0.5))/8)
assert all(abs(analytic_hemisphere_inner_upper_surfaceintegrals-pi*(1**2)*(2-(2**0.5))/8)/(pi*(1**2)*(2-(2**0.5))/8) &lt; 0.07)</test>
    <test name="analytic_hemisphere_inner_middle_surfaceintegrals" language="python">from math import pi
print abs(analytic_hemisphere_inner_middle_surfaceintegrals-(2**0.5)*pi*(1**2)/8)/((2**0.5)*pi*(1**2)/8)
assert all(abs(analytic_hemisphere_inner_middle_surfaceintegrals-(2**0.5)*pi*(1**2)/8)/((2**0.5)*pi*(1**2)/8) &lt; 0.03)</test>
    <test name="analytic_hemisphere_outer_upper_surfaceintegrals" language="python">from math import pi
print abs(analytic_hemisphere_outer_upper_surfaceintegrals-pi*(2**2)*(2-(2**0.5))/8)/(pi*(2**2)*(2-(2**0.5))/8)
assert all(abs(analytic_hemisphere_outer_upper_surfaceintegrals-pi*(2**2)*(2-(2**0.5))/8)/(pi*(2**2)*(2-(2**0.5))/8) &lt; 0.07)</test>
    <test name="analytic_hemisphere_outer_middle_surfaceintegrals" language="python">from math import pi
print abs(analytic_hemisphere_outer_middle_surfaceintegrals-(2**0.5)*pi*(2**2)/8)/((2**0.5)*pi*(2**2)/8)
assert all(abs(analytic_hemisphere_outer_middle_surfaceintegrals-(2**0.5)*pi*(2**2)/8)/((2**0.5)*pi*(2**2)/8) &lt; 0.03)</test>
    <test name="analytic_hemisphere_flat_surfaceintegrals" language="python">from math import pi
print abs(analytic_hemisphere_flat_surfaceintegrals-pi*(2**2-1**2)/8)/(pi*(2**2-1**2)/8)
assert all(abs(analytic_hemisphere_flat_surfaceintegrals-pi*(2**2-1**2)/8)/(pi*(2**2-1**2)/8) &lt; 1.e-4)</test>
    <test name="analytic_hemisphere_radius_inner_upper_surfaceintegrals" language="python">from math import pi
print abs(analytic_hemisphere_radius_inner_upper_surfaceintegrals-pi*(1**2)*(2-(2**0.5))/8)/(pi*(1**2)*(2-(2**0.5))/8)
assert all(abs(analytic_hemisphere_radius_inner_upper_surfaceintegrals-pi*(1**2)*(2-(2**0.5))/8)/(pi*(1**2)*(2-(2**0.5))/8) &lt; 0.15)</test>
    <test name="analytic_hemisphere_radius_inner_middle_surfaceintegrals" language="python">from math import pi
print abs(analytic_hemisphere_radius_inner_middle_surfaceintegrals-(2**0.5)*pi*(1**2)/8)/((2**0.5)*pi*(1**2)/8)
assert all(abs(analytic_hemisphere_radius_inner_middle_surfaceintegrals-(2**0.5)*pi*(1**2)/8)/((2**0.5)*pi*(1**2)/8) &lt; 0.08)</test>
    <test name="analytic_hemisphere_radius_outer_upper_surfaceintegrals" language="python">from math import pi
print abs(analytic_hemisphere_radius_outer_upper_surfaceintegrals-pi*(2**2)*(2-(2**0.5))/4)/(pi*(2**2)*(2-(2**0.5))/4)
assert all(abs(analytic_hemisphere_radius_outer_upper_surfaceintegrals-pi*(2**2)*(2-(2**0.5))/4)/(pi*(2**2)*(2-(2**0.5))/4) &lt; 0.15)</test>
    <test name="analytic_hemisphere_radius_outer_middle_surfaceintegrals" language="python">from math import pi
print abs(analytic_hemisphere_radius_outer_middle_surfaceintegrals-(2**0.5)*pi*(2**2)/4)/((2**0.5)*pi*(2**2)/4)
assert all(abs(analytic_hemisphere_radius_outer_middle_surfaceintegrals-(2**0.5)*pi*(2**2)/4)/((2**0.5)*pi*(2**2)/4) &lt; 0.08)</test>
    <test name="super_hemisphere_integral" language="python">from math import pi
print abs(super_hemisphere_integral-28*pi/6)/(28*pi/6)
assert abs(super_hemisphere_integral-28*pi/6)/(28*pi/6) &lt; 1.e-2</test>
    <test name="super_hemisphere_inner_upper_surfaceintegrals" language="python">from math import pi
print abs(super_hemisphere_inner_upper_surfaceintegrals-pi*(1**2)*(2-(2**0.5))/8)/(pi*(1**2)*(2-(2**0.5))/8)
assert all(abs(super_hemisphere_inner_upper_surfaceintegrals-pi*(1**2)*(2-(2**0.5))/8)/(pi*(1**2)*(2-(2**0.5))/8) &lt; 0.07)</test>
    <test name="super_hemisphere_inner_middle_surfaceintegrals" language="python">from math import pi
print abs(super_hemisphere_inner_middle_surfaceintegrals-(2**0.5)*pi*(1**2)/8)/((2**0.5)*pi*(1**2)/8)
assert all(abs(super_hemisphere_inner_middle_surfaceintegrals-(2**0.5)*pi*(1**2)/8)/((2**0.5)*pi*(1**2)/8) &lt; 0.03)</test>
    <test name="super_hemisphere_outer_upper_surfaceintegrals" language="python">from math import pi
print abs(super_hemisphere_outer_upper_surfaceintegrals-pi*(2**2)*(2-(2**0.5))/8)/(pi*(2**2)*(2-(2**0.5))/8)
assert all(abs(super_hemisphere_outer_upper_surfaceintegrals-pi*(2**2)*(2-(2**0.5))/8)/(pi*(2**2)*(2-(2**0.5))/8) &lt; 0.07)</test>
    <test name="super_hemisphere_outer_middle_surfaceintegrals" language="python">from math import pi
print abs(super_hemisphere_outer_middle_surfaceintegrals-(2**0.5)*pi*(2**2)/8)/((2**0.5)*pi*(2**2)/8)
assert all(abs(super_hemisphere_outer_middle_surfaceintegrals-(2**0.5)*pi*(2**2)/8)/((2**0.5)*pi*(2**2)/8) &lt; 0.03)</test>
    <test name="super_hemisphere_flat_surfaceintegrals" language="python">from math import pi
print abs(super_hemisphere_flat_surfaceintegrals-pi*(2**2-1**2)/8)/(pi*(2**2-1**2)/8)
assert all(abs(super_hemisphere_flat_surfaceintegrals-pi*(2**2-1**2)/8)/(pi*(2**2-1**2)/8) &lt; 1.e-3)</test>
    <test name="super_hemisphere_radius_inner_upper_surfaceintegrals" language="python">from math import pi
print abs(super_hemisphere_radius_inner_upper_surfaceintegrals-pi*(1**2)*(2-(2**0.5))/8)/(pi*(1**2)*(2-(2**0.5))/8)
assert all(abs(super_hemisphere_radius_inner_upper_surfaceintegrals-pi*(1**2)*(2-(2**0.5))/8)/(pi*(1**2)*(2-(2**0.5))/8) &lt; 0.07)</test>
    <test name="super_hemisphere_radius_inner_middle_surfaceintegrals" language="python">from math import pi
print abs(super_hemisphere_radius_inner_middle_surfaceintegrals-(2**0.5)*pi*(1**2)/8)/((2**0.5)*pi*(1**2)/8)
assert all(abs(super_hemisphere_radius_inner_middle_surfaceintegrals-(2**0.5)*pi*(1**2)/8)/((2**0.5)*pi*(1**2)/8) &lt; 0.03)</test>
    <test name="super_hemisphere_radius_outer_upper_surfaceintegrals" language="python">from math import pi
print abs(super_hemisphere_radius_outer_upper_surfaceintegrals-pi*(2**2)*(2-(2**0.5))/4)/(pi*(2**2)*(2-(2**0.5))/4)
assert all(abs(super_hemisphere_radius_outer_upper_surfaceintegrals-pi*(2**2)*(2-(2**0.5))/4)/(pi*(2**2)*(2-(2**0.5))/4) &lt; 0.07)</test>
    <test name="super_hemisphere_radius_outer_middle_surfaceintegrals" language="python">from math import pi
print abs(super_hemisphere_radius_outer_middle_surfaceintegrals-(2**0.5)*pi*(2**2)/4)/((2**0.5)*pi*(2**2)/4)
assert all(abs(super_hemisphere_radius_outer_middle_surfaceintegrals-(2**0.5)*pi*(2**2)/4)/((2**0.5)*pi*(2**2)/4) &lt; 0.03)</test>
    <test name="super_analytic_hemisphere_integral" language="python">from math import pi
print abs(super_analytic_hemisphere_integral-28*pi/6)/(28*pi/6)
assert abs(super_analytic_hemisphere_integral-28*pi/6)/(28*pi/6) &lt; 1.e-3</test>
    <test name="super_analytic_hemisphere_inner_upper_surfaceintegrals" language="python">from math import pi
print abs(super_analytic_hemisphere_inner_upper_surfaceintegrals-pi*(1**2)*(2-(2**0.5))/8)/(pi*(1**2)*(2-(2**0.5))/8)
assert all(abs(super_analytic_hemisphere_inner_upper_surfaceintegrals-pi*(1**2)*(2-(2**0.5))/8)/(pi*(1**2)*(2-(2**0.5))/8) &lt; 0.07)</test>
    <test name="super_analytic_hemisphere_inner_middle_surfaceintegrals" language="python">from math import pi
print abs(super_analytic_hemisphere_inner_middle_surfaceintegrals-(2**0.5)*pi*(1**2)/8)/((2**0.5)*pi*(1**2)/8)
assert all(abs(super_analytic_hemisphere_inner_middle_surfaceintegrals-(2**0.5)*pi*(1**2)/8)/((2**0.5)*pi*(1**2)/8) &lt; 0.03)</test>
    <test name="super_analytic_hemisphere_outer_upper_surfaceintegrals" language="python">from math import pi
print abs(super_analytic_hemisphere_outer_upper_surfaceintegrals-pi*(2**2)*(2-(2**0.5))/8)/(pi*(2**2)*(2-(2**0.5))/8)
assert all(abs(super_analytic_hemisphere_outer_upper_surfaceintegrals-pi*(2**2)*(2-(2**0.5))/8)/(pi*(2**2)*(2-(2**0.5))/8) &lt; 0.07)</test>
    <test name="super_analytic_hemisphere_outer_middle_surfaceintegrals" language="python">from math import pi
print abs(super_analytic_hemisphere_outer_middle_surfaceintegrals-(2**0.5)*pi*(2**2)/8)/((2**0.5)*pi*(2**2)/8)
assert all(abs(super_analytic_hemisphere_outer_middle_surfaceintegrals-(2**0.5)*pi*(2**2)/8)/((2**0.5)*pi*(2**2)/8) &lt; 0.03)</test>
    <test name="super_analytic_hemisphere_flat_surfaceintegrals" language="python">from math import pi
print abs(super_analytic_hemisphere_flat_surfaceintegrals-pi*(2**2-1**2)/8)/(pi*(2**2-1**2)/8)
assert all(abs(super_analytic_hemisphere_flat_surfaceintegrals-pi*(2**2-1**2)/8)/(pi*(2**2-1**2)/8) &lt; 1.e-4)</test>
    <test name="super_analytic_hemisphere_radius_inner_upper_surfaceintegrals" language="python">from math import pi
print abs(super_analytic_hemisphere_radius_inner_upper_surfaceintegrals-pi*(1**2)*(2-(2**0.5))/8)/(pi*(1**2)*(2-(2**0.5))/8)
assert all(abs(super_analytic_hemisphere_radius_inner_upper_surfaceintegrals-pi*(1**2)*(2-(2**0.5))/8)/(pi*(1**2)*(2-(2**0.5))/8) &lt; 0.07)</test>
    <test name="super_analytic_hemisphere_radius_inner_middle_surfaceintegrals" language="python">from math import pi
print abs(super_analytic_hemisphere_radius_inner_middle_surfaceintegrals-(2**0.5)*pi*(1**2)/8)/((2**0.5)*pi*(1**2)/8)
assert all(abs(super_analytic_hemisphere_radius_inner_middle_surfaceintegrals-(2**0.5)*pi*(1**2)/8)/((2**0.5)*pi*(1**2)/8) &lt; 0.03)</test>
    <test name="super_analytic_hemisphere_radius_outer_upper_surfaceintegrals" language="python">from math import pi
print abs(super_analytic_hemisphere_radius_outer_upper_surfaceintegrals-pi*(2**2)*(2-(2**0.5))/4)/(pi*(2**2)*(2-(2**0.5))/4)
assert all(abs(super_analytic_hemisphere_radius_outer_upper_surfaceintegrals-pi*(2**2)*(2-(2**0.5))/4)/(pi*(2**2)*(2-(2**0.5))/4) &lt; 0.07)</test>
    <test name="super_analytic_hemisphere_radius_outer_middle_surfaceintegrals" language="python">from math import pi
print abs(super_analytic_hemisphere_radius_outer_middle_surfaceintegrals-(2**0.5)*pi*(2**2)/4)/((2**0.5)*pi*(2**2)/4)
assert all(abs(super_analytic_hemisphere_radius_outer_middle_surfaceintegrals-(2**0.5)*pi*(2**2)/4)/((2**0.5)*pi*(2**2)/4) &lt; 0.03)</test>
  </pass_tests>
  <warn_tests/>
</testproblem>
