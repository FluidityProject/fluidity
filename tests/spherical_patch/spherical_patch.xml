<?xml version='1.0' encoding='utf-8'?>
<testproblem>
  <name>spherical patch<comment>Tests gmsh reading and writing on the sphere with 2d horizontal spherical input mesh, checkpointing and flredecomp.</comment></name>
  <owner userid="skramer"/>
  <tags>zoltan</tags>
  <problem_definition length="short" nprocs="3">
    <command_line>mpiexec ../../bin/flredecomp -i 1 -o 3 -v -l spherical_segment spherical_segment_flredecomp &amp;&amp;
mpiexec fluidity -v2 -l spherical_segment_flredecomp.flml &amp;&amp;
mpiexec ../../bin/flredecomp -v -l -i 3 -o 1 spherical_segment_2_checkpoint serial &amp;&amp;
fluidity -v2 -l serial.flml</command_line>
  </problem_definition>
  <variables>
    <variable name="volume_before" language="python">from fluidity_tools import stat_parser
stat=stat_parser('spherical_segment.stat')
volume_before=stat['Fields']['Density']['integral']</variable>
    <variable name="volume_after" language="python">from fluidity_tools import stat_parser
stat=stat_parser('spherical_segment_checkpoint.stat')
volume_after=stat['Fields']['Density']['integral']</variable>
    <variable name="solvers_converged" language="python">import os
files = os.listdir("./")
solvers_converged = not "matrixdump" in files and not "matrixdump.info" in files</variable>
    <variable name="max_velocity_before" language="python">from fluidity_tools import stat_parser
stat=stat_parser('spherical_segment.stat')
max_velocity_before=stat['Fields']['Velocity%magnitude']['max']</variable>
    <variable name="max_velocity_after" language="python">from fluidity_tools import stat_parser
stat=stat_parser('spherical_segment_checkpoint.stat')
max_velocity_after=stat['Fields']['Velocity%magnitude']['max']</variable>
    <variable name="fs_integral_before" language="python">from fluidity_tools import stat_parser
stat=stat_parser('spherical_segment.stat')
fs_integral_before=stat['Fields']['FreeSurface']['surface_integral%Bottom']</variable>
    <variable name="fs_integral_after" language="python">from fluidity_tools import stat_parser
stat=stat_parser('spherical_segment_checkpoint.stat')
fs_integral_after=stat['Fields']['FreeSurface']['surface_integral%Bottom']</variable>
  </variables>
  <pass_tests>
    <test name="volume_conservation_run1" language="python">from fluidity_tools import compare_variable
compare_variable(volume_before[0], volume_before[-1], 5e-9)</test>
    <test name="volume_conservation_run12" language="python">from fluidity_tools import compare_variable
# compares volume at the end of first run with that of end first timestep second run
compare_variable(volume_before[-1], volume_after[0], 5e-9)</test>
    <test name="volume_conservation_run2" language="python">from fluidity_tools import compare_variable
compare_variable(volume_after[0], volume_after[-1], 5e-9)</test>
    <test name="solvers_converged" language="python">assert solvers_converged</test>
    <test name="max_velocity_run1" language="python"># make sure we're actually doing something and not blowing up
assert all(max_velocity_before&gt;0.01) and all(max_velocity_before&lt;0.02)</test>
    <test name="max_velocity_run2" language="python"># make sure we're actually doing something and not blowing up
assert all(max_velocity_after&gt;0.01) and all(max_velocity_after&lt;0.02)</test>
    <test name="fs_integral_run1" language="python">from fluidity_tools import compare_variable
compare_variable(fs_integral_before[0], fs_integral_before[-1], 2e-5)</test>
    <test name="fs_integral_run2" language="python">from fluidity_tools import compare_variable
compare_variable(fs_integral_after[0], fs_integral_after[-1], 2e-5)</test>
    <test name="fs_integral_run12" language="python">from fluidity_tools import compare_variable
# compares freesurface integral at the end of first run with that of end first timestep second run
compare_variable(fs_integral_before[-1], fs_integral_after[0], 2e-5)</test>
  </pass_tests>
</testproblem>
