<?xml version='1.0' encoding='utf-8'?>
<fluidity_options>
  <simulation_name>
    <string_value lines="1">MMS_A</string_value>
  </simulation_name>
  <problem_type>
    <string_value lines="1">fluids</string_value>
  </problem_type>
  <geometry>
    <dimension>
      <integer_value rank="0">2</integer_value>
    </dimension>
    <mesh name="CoordinateMesh">
      <from_file file_name="MMS_A">
        <format name="gmsh"/>
        <stat>
          <include_in_stat/>
        </stat>
      </from_file>
    </mesh>
    <mesh name="VelocityMesh">
      <from_mesh>
        <mesh name="CoordinateMesh"/>
        <mesh_shape>
          <polynomial_degree>
            <integer_value rank="0">2</integer_value>
          </polynomial_degree>
        </mesh_shape>
        <stat>
          <exclude_from_stat/>
        </stat>
      </from_mesh>
    </mesh>
    <mesh name="PressureMesh">
      <from_mesh>
        <mesh name="CoordinateMesh"/>
        <stat>
          <exclude_from_stat/>
        </stat>
      </from_mesh>
    </mesh>
    <mesh name="DensityMesh">
      <from_mesh>
        <mesh name="CoordinateMesh"/>
        <mesh_shape>
          <polynomial_degree>
            <integer_value rank="0">2</integer_value>
          </polynomial_degree>
        </mesh_shape>
        <stat>
          <exclude_from_stat/>
        </stat>
      </from_mesh>
    </mesh>
    <quadrature>
      <degree>
        <integer_value rank="0">4</integer_value>
      </degree>
      <controlvolume_surface_degree>
        <integer_value rank="0">1</integer_value>
      </controlvolume_surface_degree>
    </quadrature>
  </geometry>
  <io>
    <dump_format>
      <string_value>vtk</string_value>
    </dump_format>
    <dump_period>
      <constant>
        <real_value rank="0">1000.0</real_value>
      </constant>
    </dump_period>
    <output_mesh name="VelocityMesh"/>
    <convergence>
      <convergence_file/>
    </convergence>
    <checkpointing>
      <checkpoint_period_in_dumps>
        <integer_value rank="0">1000</integer_value>
      </checkpoint_period_in_dumps>
      <checkpoint_at_end/>
    </checkpointing>
    <stat/>
  </io>
  <timestepping>
    <current_time>
      <real_value rank="0">0.0</real_value>
    </current_time>
    <timestep>
      <real_value rank="0">0.0072673325013204136</real_value>
      <comment>gives a max cfl number of 0.1</comment>
    </timestep>
    <finish_time>
      <real_value rank="0">100.0</real_value>
      <comment>10.0</comment>
    </finish_time>
    <nonlinear_iterations>
      <integer_value rank="0">50</integer_value>
      <tolerance>
        <real_value rank="0">1.E-6</real_value>
        <infinity_norm/>
      </tolerance>
    </nonlinear_iterations>
    <steady_state>
      <tolerance>
        <real_value rank="0">1.E-10</real_value>
        <infinity_norm/>
      </tolerance>
    </steady_state>
  </timestepping>
  <physical_parameters/>
  <material_phase name="NS">
    <equation_of_state>
      <compressible>
        <stiffened_gas>
          <reference_density>
            <real_value rank="0">0.1</real_value>
          </reference_density>
          <ratio_specific_heats>
            <real_value rank="0">1.4</real_value>
          </ratio_specific_heats>
          <bulk_sound_speed_squared>
            <real_value rank="0">0.4</real_value>
          </bulk_sound_speed_squared>
        </stiffened_gas>
      </compressible>
    </equation_of_state>
    <scalar_field name="Pressure" rank="0">
      <prognostic>
        <mesh name="PressureMesh"/>
        <spatial_discretisation>
          <continuous_galerkin>
            <remove_stabilisation_term/>
          </continuous_galerkin>
        </spatial_discretisation>
        <reference_node>
          <integer_value rank="0">1</integer_value>
        </reference_node>
        <scheme>
          <poisson_pressure_solution>
            <string_value lines="1">never</string_value>
          </poisson_pressure_solution>
          <use_projection_method/>
        </scheme>
        <solver>
          <iterative_method name="gmres">
            <restart>
              <integer_value rank="0">30</integer_value>
            </restart>
          </iterative_method>
          <preconditioner name="eisenstat"/>
          <relative_error>
            <real_value rank="0">1.E-10</real_value>
          </relative_error>
          <max_iterations>
            <integer_value rank="0">10000</integer_value>
          </max_iterations>
          <never_ignore_solver_failures/>
          <diagnostics>
            <monitors/>
          </diagnostics>
        </solver>
        <initial_condition name="WholeMesh">
          <constant>
            <real_value rank="0">0.4</real_value>
          </constant>
        </initial_condition>
        <boundary_conditions name="incoming">
          <surface_ids>
            <integer_value shape="2" rank="1">7 10</integer_value>
          </surface_ids>
          <type name="dirichlet">
            <python>
              <string_value lines="20" type="code" language="python">def val(XX,t):
   from math import sin, cos
   csq = 0.4
   rho0 = 0.1
   gamma = 1.4
   x = XX[0];
   x2 = x*x;
   y = XX[1];
   y2 = y*y;
   p = 0.25*(cos(y + x) + 1.5)*(sin(y2 + x2) + 1.5)*(gamma - 1) + csq*(0.5*(sin(y2 + x2) + 1.5) - rho0)
   return p</string_value>
            </python>
          </type>
        </boundary_conditions>
        <output>
          <include_previous_time_step/>
        </output>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
        <consistent_interpolation/>
      </prognostic>
    </scalar_field>
    <scalar_field name="Density" rank="0">
      <prognostic>
        <mesh name="DensityMesh"/>
        <spatial_discretisation>
          <continuous_galerkin>
            <stabilisation>
              <streamline_upwind_petrov_galerkin>
                <nu_bar_optimal/>
                <nu_scale name="0.5">
                  <real_value shape="1" rank="0">0.5</real_value>
                </nu_scale>
              </streamline_upwind_petrov_galerkin>
            </stabilisation>
            <advection_terms/>
            <mass_terms/>
          </continuous_galerkin>
          <conservative_advection>
            <real_value rank="0">1.0</real_value>
          </conservative_advection>
        </spatial_discretisation>
        <temporal_discretisation>
          <theta>
            <real_value rank="0">0.5</real_value>
          </theta>
        </temporal_discretisation>
        <initial_condition name="WholeMesh">
          <constant>
            <real_value rank="0">1.0</real_value>
          </constant>
        </initial_condition>
        <boundary_conditions name="incoming">
          <surface_ids>
            <integer_value shape="2" rank="1">7 10</integer_value>
          </surface_ids>
          <type name="dirichlet">
            <python>
              <string_value lines="20" type="code" language="python">def val(XX,t):
   from math import sin, cos
   x = XX[0]
   x2 = x*x
   y = XX[1]
   y2 = y*y
   rho = 0.5*(sin(x2 + y2) + 1.5)
   return rho</string_value>
            </python>
          </type>
        </boundary_conditions>
        <scalar_field name="Source" rank="0">
          <prescribed>
            <value name="WholeMesh">
              <python>
                <string_value lines="20" type="code" language="python">def val(XX,t):
   from math import sin,cos
   x = XX[0]
   x2 = x*x
   y = XX[1]
   y2 = y*y
   S = -0.1*y*sin(y2 + x2)*(sin(y2 + x2) + 1.5) + x*cos(y2 + x2)*(sin(y2 + x2) + 1.5) + x*cos(y2 + x2)*(sin(y2 + x2) + 0.5) + 0.1*y*cos(y2 + x2)*(cos(y2 + x2) + 0.5)
   return S</string_value>
                <comment>u(x,y,t,rho,beta,nu,adv,mass,csq,rho0,gamma) = 1.0*(sin(x*x+y*y)+0.5)&#13;
v(x,y,t,rho,beta,nu,adv,mass,csq,rho0,gamma) = 0.1*(cos(x*x+y*y)+0.5)
rho(x,y,t,beta,nu,adv,mass,csq,rho0,gamma) = 0.5*(sin(x*x+y*y)+1.5)
e(x,y,t,beta,nu,adv,mass,csq,rho0,gamma) = 0.5*(cos(x+y)+1.5)

rhou = rho*u
rhov = rho*v

rho_t = diff(rho,t)
rhou_x = diff(rhou,x)
rhov_y = diff(rhov,y)

S = rho_t + rhou_x + rhov_y</comment>
              </python>
            </value>
            <output/>
            <stat/>
            <detectors>
              <exclude_from_detectors/>
            </detectors>
          </prescribed>
        </scalar_field>
        <output>
          <include_previous_time_step/>
        </output>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
        <consistent_interpolation/>
      </prognostic>
    </scalar_field>
    <vector_field name="Velocity" rank="1">
      <prognostic>
        <mesh name="VelocityMesh"/>
        <equation name="LinearMomentum"/>
        <spatial_discretisation>
          <continuous_galerkin>
            <stabilisation>
              <no_stabilisation/>
            </stabilisation>
            <mass_terms>
              <lump_mass_matrix>
                <use_submesh/>
              </lump_mass_matrix>
            </mass_terms>
            <advection_terms/>
            <stress_terms>
              <stress_form/>
            </stress_terms>
          </continuous_galerkin>
          <conservative_advection>
            <real_value rank="0">0.0</real_value>
          </conservative_advection>
        </spatial_discretisation>
        <temporal_discretisation>
          <theta>
            <real_value rank="0">0.5</real_value>
          </theta>
          <relaxation>
            <real_value rank="0">0.5</real_value>
          </relaxation>
        </temporal_discretisation>
        <solver>
          <iterative_method name="gmres">
            <restart>
              <integer_value rank="0">30</integer_value>
            </restart>
          </iterative_method>
          <preconditioner name="eisenstat"/>
          <relative_error>
            <real_value rank="0">1.E-10</real_value>
          </relative_error>
          <max_iterations>
            <integer_value rank="0">10000</integer_value>
          </max_iterations>
          <never_ignore_solver_failures/>
          <diagnostics>
            <monitors/>
          </diagnostics>
        </solver>
        <initial_condition name="WholeMesh">
          <constant>
            <real_value shape="2" dim1="dim" rank="1">0.0 0.0</real_value>
          </constant>
        </initial_condition>
        <boundary_conditions name="all_sides">
          <surface_ids>
            <integer_value shape="4" rank="1">7 8 9 10</integer_value>
          </surface_ids>
          <type name="dirichlet">
            <align_bc_with_cartesian>
              <x_component>
                <python>
                  <string_value lines="20" type="code" language="python">def val(XX,t):
   from math import sin, cos
   # Shear rotation about origin.
   x = XX[0]
   x2 = x*x
   y = XX[1]
   y2 = y*y
   u = 1.0*(sin(x2+y2)+0.5)
   v = 0.1*(cos(x2+y2)+0.5)
   return u</string_value>
                </python>
              </x_component>
              <y_component>
                <python>
                  <string_value lines="20" type="code" language="python">def val(XX,t):
   from math import sin, cos
   # Shear rotation about origin.
   x = XX[0]
   x2 = x*x
   y = XX[1]
   y2 = y*y
   u = 1.0*(sin(x2+y2)+0.5)
   v = 0.1*(cos(x2+y2)+0.5)
   return v</string_value>
                </python>
              </y_component>
            </align_bc_with_cartesian>
          </type>
        </boundary_conditions>
        <tensor_field name="Viscosity" rank="2">
          <prescribed>
            <value name="WholeMesh">
              <anisotropic_symmetric>
                <constant>
                  <real_value symmetric="true" dim2="dim" shape="2 2" dim1="dim" rank="2">0.7 0.7 0.7 0.7</real_value>
                </constant>
              </anisotropic_symmetric>
            </value>
            <output/>
          </prescribed>
        </tensor_field>
        <vector_field name="Source" rank="1">
          <prescribed>
            <value name="WholeMesh">
              <python>
                <string_value lines="20" type="code" language="python">def val(XX, t):
   from math import sin,cos
   gamma = 1.4;
   csq = 0.4;
   rho0 = 0.1;
   nu = 0.7;
   adv = 1.0;
   beta = 0.0;
   mass = 1.0;
   x = XX[0];
   y = XX[1];
   x2 = x*x;
   y2 = y*y
   rho = 0.5*(sin(x2+y2)+1.5)
   Su = (-0.25*sin(y + x)*(sin(y2 + x2) + 1.5)*(gamma - 1) + 0.5*x*(cos(y + x) + 1.5)*cos(y2 + x2)*(gamma - 1) + 0.5*adv*(sin(y2 + x2) + 1.5)*(beta*(2.0*x*cos(y2 + x2)*(sin(y2 + x2) + 0.5) - 0.2*y*sin(y2 + x2)*(sin(y2 + x2) + 0.5)) + 2.0*x*cos(y2 + x2)*(sin(y2 + x2) + 0.5) + 0.2*y*cos(y2 + x2)*(cos(y2 + x2) + 0.5)) - 2*nu*((2.0*cos(y2 + x2) - 4.0*y2*sin(y2 + x2))/2 + 2*(2.0*cos(y2 + x2) - 4.0*x2*sin(y2 + x2))/3 - 0.0666666666666667*x*y*cos(y2 + x2)) + 1.0*csq*x*cos(y2 + x2))/rho
   Sv = (-0.25*sin(y + x)*(sin(y2 + x2) + 1.5)*(gamma - 1) + 0.5*y*(cos(y + x) + 1.5)*cos(y2 + x2)*(gamma - 1) + 0.5*adv*(sin(y2 + x2) + 1.5)*(beta*(0.2*x*cos(y2 + x2)*(cos(y2 + x2) + 0.5) - 0.02*y*(cos(y2 + x2) + 0.5)*sin(y2 + x2)) - 0.2*x*sin(y2 + x2)*(sin(y2 + x2) + 0.5) - 0.02*y*(cos(y2 + x2) + 0.5)*sin(y2 + x2)) - 2*nu*(-0.666666666666667*x*y*sin(y2 + x2) + 2*(-0.2*sin(y2 + x2) - 0.4*y2*cos(y2 + x2))/3 + (-0.2*sin(y2 + x2) - 0.4*x2*cos(y2 + x2))/2) + 1.0*csq*y*cos(y2 + x2))/rho
   return (Su, Sv)</string_value>
                <comment>u(x,y,t,rho,beta,nu,adv,mass,csq,rho0,gamma) = 1.0*(sin(x*x+y*y)+0.5)&#13;
v(x,y,t,rho,beta,nu,adv,mass,csq,rho0,gamma) = 0.1*(cos(x*x+y*y)+0.5)
rho(x,y,t,beta,nu,adv,mass,csq,rho0,gamma) = 0.5*(sin(x*x+y*y)+1.5)
e(x,y,t,beta,nu,adv,mass,csq,rho0,gamma) = 0.5*(cos(x+y)+1.5)

p = csq*(rho-rho0) + (gamma - 1)*rho*e

u_t = diff(u,t)
v_t = diff(v,t)

u_x = diff(u,x)
u_y = diff(u,y)
v_x = diff(v,x)
v_y = diff(v,y)

u_xx = diff(u_x,x)
u_yy = diff(u_y,y)
v_xx = diff(v_x,x)
v_yy = diff(v_y,y)

u_xy = diff(u_x,y)
u_yx = diff(u_y,x)
v_xy = diff(v_x,y)
v_yx = diff(v_y,x)

p_x = diff(p,x)
p_y = diff(p,y)

Su = (mass*rho*u_t + adv*rho*(u*u_x+v*u_y + beta*(u*u_x + u*v_y)) - 2*nu*(2*u_xx/3 - v_yx/3  + u_yy/2 + v_xy/2) + p_x)
Sv = (mass*rho*v_t + adv*rho*(u*v_x+v*v_y + beta*(v*u_x + v*v_y)) - 2*nu*(v_xx/2 + u_yx/2 +2*v_yy/3 - u_xy/3) + p_y)</comment>
              </python>
            </value>
            <output/>
            <stat>
              <include_in_stat/>
            </stat>
            <detectors>
              <exclude_from_detectors/>
            </detectors>
          </prescribed>
        </vector_field>
        <output>
          <include_previous_time_step/>
        </output>
        <stat>
          <include_in_stat/>
          <previous_time_step>
            <exclude_from_stat/>
          </previous_time_step>
          <nonlinear_field>
            <exclude_from_stat/>
          </nonlinear_field>
        </stat>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
        <consistent_interpolation/>
      </prognostic>
    </vector_field>
    <scalar_field name="CFLNumber" rank="0">
      <diagnostic>
        <algorithm name="Internal" material_phase_support="multiple"/>
        <mesh name="PressureMesh"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <scalar_field name="PressureAnalytical" rank="0">
      <prescribed>
        <mesh name="PressureMesh"/>
        <value name="WholeMesh">
          <python>
            <string_value lines="20" type="code" language="python">def val(XX,t):
   from math import sin, cos
   csq = 0.4
   rho0 = 0.1
   gamma = 1.4
   x = XX[0];
   x2 = x*x;
   y = XX[1];
   y2 = y*y;
   p = 0.25*(cos(y + x) + 1.5)*(sin(y2 + x2) + 1.5)*(gamma - 1) + csq*(0.5*(sin(y2 + x2) + 1.5) - rho0)
   return p</string_value>
          </python>
        </value>
        <output/>
        <stat/>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
        <do_not_recalculate/>
      </prescribed>
    </scalar_field>
    <scalar_field name="FiniteElementDivergence" rank="0">
      <diagnostic field_name="Velocity">
        <algorithm legacy="true" name="Internal" material_phase_support="multiple"/>
        <mesh name="PressureMesh"/>
        <solver>
          <iterative_method name="cg"/>
          <preconditioner name="sor"/>
          <relative_error>
            <real_value rank="0">1.E-10</real_value>
          </relative_error>
          <max_iterations>
            <integer_value rank="0">10000</integer_value>
          </max_iterations>
          <never_ignore_solver_failures/>
          <diagnostics>
            <monitors/>
          </diagnostics>
        </solver>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <scalar_field name="DensityAnalytical" rank="0">
      <prescribed>
        <mesh name="DensityMesh"/>
        <value name="WholeMesh">
          <python>
            <string_value lines="20" type="code" language="python">def val(XX,t):
   from math import sin, cos
   x = XX[0]
   x2 = x*x
   y = XX[1]
   y2 = y*y
   rho = 0.5*(sin(x2 + y2) + 1.5)
   return rho</string_value>
            <comment>rho(x,y,beta,nu,adv,mass,t) = 0.5*(sin(x*x+y*y)+1.5)</comment>
          </python>
        </value>
        <output/>
        <stat/>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
        <do_not_recalculate/>
      </prescribed>
    </scalar_field>
    <scalar_field name="PressureAbsoluteDifference" rank="0">
      <diagnostic>
        <algorithm name="scalar_python_diagnostic" material_phase_support="single">
          <string_value lines="20" type="code" language="python">field1=state.scalar_fields["Pressure"]
field2=state.scalar_fields["PressureAnalytical"]
for i in range(field.node_count):
   field.set(i, abs(field1.node_val(i)-field2.node_val(i)))</string_value>
        </algorithm>
        <mesh name="PressureMesh"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <scalar_field name="DensityAbsoluteDifference" rank="0">
      <diagnostic>
        <algorithm name="scalar_python_diagnostic" material_phase_support="single">
          <string_value lines="20" type="code" language="python">field1=state.scalar_fields["Density"]
field2=state.scalar_fields["DensityAnalytical"]
for i in range(field.node_count):
   field.set(i, abs(field1.node_val(i)-field2.node_val(i)))</string_value>
        </algorithm>
        <mesh name="DensityMesh"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <scalar_field name="InternalEnergyAnalytical" rank="0">
      <prescribed>
        <mesh name="PressureMesh"/>
        <value name="WholeMesh">
          <python>
            <string_value lines="20" type="code" language="python">def val(XX,t):
   from math import sin, cos
   x = XX[0]
   y = XX[1]
   e = 0.5*(cos(x + y) + 1.5)
   return e</string_value>
          </python>
        </value>
        <output/>
        <stat/>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
        <do_not_recalculate/>
      </prescribed>
    </scalar_field>
    <scalar_field name="InternalEnergyAbsoluteDifference" rank="0">
      <diagnostic>
        <algorithm name="scalar_python_diagnostic" material_phase_support="single">
          <string_value lines="20" type="code" language="python">field1=state.scalar_fields["InternalEnergy"]
field2=state.scalar_fields["InternalEnergyAnalytical"]
for i in range(field.node_count):
   field.set(i, abs(field1.node_val(i)-field2.node_val(i)))</string_value>
        </algorithm>
        <mesh name="PressureMesh"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <scalar_field name="InternalEnergy" rank="0">
      <prognostic>
        <mesh name="PressureMesh"/>
        <equation name="InternalEnergy">
          <density name="Density"/>
        </equation>
        <spatial_discretisation>
          <continuous_galerkin>
            <stabilisation>
              <streamline_upwind_petrov_galerkin>
                <nu_bar_optimal/>
                <nu_scale name="0.5">
                  <real_value shape="1" rank="0">0.5</real_value>
                </nu_scale>
              </streamline_upwind_petrov_galerkin>
            </stabilisation>
            <advection_terms/>
            <mass_terms/>
          </continuous_galerkin>
          <conservative_advection>
            <real_value rank="0">0.0</real_value>
          </conservative_advection>
        </spatial_discretisation>
        <temporal_discretisation>
          <theta>
            <real_value rank="0">0.5</real_value>
          </theta>
        </temporal_discretisation>
        <solver>
          <iterative_method name="gmres">
            <restart>
              <integer_value rank="0">30</integer_value>
            </restart>
          </iterative_method>
          <preconditioner name="sor"/>
          <relative_error>
            <real_value rank="0">1.E-10</real_value>
          </relative_error>
          <max_iterations>
            <integer_value rank="0">10000</integer_value>
          </max_iterations>
          <never_ignore_solver_failures/>
          <diagnostics>
            <monitors/>
          </diagnostics>
        </solver>
        <initial_condition name="WholeMesh">
          <constant>
            <real_value rank="0">0.0</real_value>
          </constant>
        </initial_condition>
        <boundary_conditions name="incoming">
          <surface_ids>
            <integer_value shape="2" rank="1">7 10</integer_value>
          </surface_ids>
          <type name="dirichlet">
            <python>
              <string_value lines="20" type="code" language="python">def val(XX,t):
   from math import sin, cos
   x = XX[0]
   y = XX[1]
   e = 0.5*(cos(x + y) + 1.5)
   return e</string_value>
            </python>
          </type>
        </boundary_conditions>
        <scalar_field name="Source" rank="0">
          <prescribed>
            <value name="WholeMesh">
              <python>
                <string_value lines="20" type="code" language="python">def val(XX,t):
   from math import sin,cos
   gamma = 1.4;
   csq = 0.4;
   rho0 = 0.1;
   beta = 0.0;
   x = XX[0]
   x2 = x*x
   y = XX[1]
   y2 = y*y
   # energy eqn??
   S = (2.0*x*cos(y2 + x2) - 0.2*y*sin(y2 + x2))*(0.25*(cos(y + x) + 1.5)*(sin(y2 + x2) + 1.5)*(gamma - 1) + csq*(0.5*(sin(y2 + x2) + 1.5) - rho0)) + 0.5*beta*(cos(y + x) + 1.5)*(-0.1*y*sin(y2 + x2)*(sin(y2 + x2) + 1.5) + 1.0*x*cos(y2 + x2)*(sin(y2 + x2) + 1.5) + 1.0*x*cos(y2 + x2)*(sin(y2 + x2) + 0.5) + 0.1*y*cos(y2 + x2)*(cos(y2 + x2) + 0.5)) - 0.25*sin(y + x)*(sin(y2 + x2) + 0.5)*(sin(y2 + x2) + 1.5) - 0.025*sin(y + x)*(cos(y2 + x2) + 0.5)*(sin(y2 + x2) + 1.5)
   # advdif eqn
   # S = 0.25*beta*(cos(y + x) + 1.5)*(sin(y2 + x2) + 1.5)*(2.0*x*cos(y2 + x2) - 0.2*y*sin(y2 + x2)) - 0.5*sin(y + x)*(sin(y2 + x2) + 0.5) - 0.05*sin(y + x)*(cos(y2 + x2) + 0.5)
   # conmass eqn
   # S = 0.5*beta*(cos(y + x) + 1.5)*(-0.1*y*sin(y2 + x2)*(sin(y2 + x2) + 1.5) + 1.0*x*cos(y2 + x2)*(sin(y2 + x2) + 1.5) + 1.0*x*cos(y2 + x2)*(sin(y2 + x2) + 0.5) + 0.1*y*cos(y2 + x2)*(cos(y2 + x2) + 0.5)) - 0.25*sin(y + x)*(sin(y2 + x2) + 0.5)*(sin(y2 + x2) + 1.5) - 0.025*sin(y + x)*(cos(y2 + x2) + 0.5)*(sin(y2 + x2) + 1.5)
   return S</string_value>
                <comment>u(x,y,t,rho,beta,nu,adv,mass,csq,rho0,gamma) = 1.0*(sin(x*x+y*y)+0.5)&#13;
v(x,y,t,rho,beta,nu,adv,mass,csq,rho0,gamma) = 0.1*(cos(x*x+y*y)+0.5)
rho(x,y,t,beta,nu,adv,mass,csq,rho0,gamma) = 0.5*(sin(x*x+y*y)+1.5)
e(x,y,t,beta,nu,adv,mass,csq,rho0,gamma) = 0.5*(cos(x+y)+1.5)

p = csq*(rho-rho0) + (gamma - 1)*rho*e

erho = e*rho
rhou = rho*u
rhov = rho*v

erho_t = diff(erho, t)
e_t = diff(e, t)

erho_x = diff(erho, x)
erho_y = diff(erho, y)
e_x = diff(e, x)
e_y = diff(e, y)

u_x = diff(u, x)
v_y = diff(v, y)

rhou_x = diff(rhou, x)
rhov_y = diff(rhov, y)
# energy eqn
S = erho_t + u*rho*e_x + v*rho*e_y + beta*e*(rhou_x+rhov_y) + p*(u_x + v_y)

# advdif eqn
S = e_t + u*e_x + v*e_y + beta*e*rho*(u_x+v_y) 

# consmass eqn
S = erho_t + u*rho*e_x + v*rho*e_y + beta*e*(rhou_x+rhov_y)</comment>
              </python>
            </value>
            <output/>
            <stat/>
            <detectors>
              <exclude_from_detectors/>
            </detectors>
          </prescribed>
        </scalar_field>
        <output>
          <include_previous_time_step/>
        </output>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
        <consistent_interpolation/>
      </prognostic>
    </scalar_field>
    <scalar_field name="DivergenceAnalytical" rank="0">
      <prescribed>
        <mesh name="PressureMesh"/>
        <value name="WholeMesh">
          <python>
            <string_value lines="20" type="code" language="python">def val(XX,t):
   from math import sin,cos
   x = XX[0]
   x2 = x*x
   y = XX[1]
   y2 = y*y
   d = 2.0*x*cos(y2 + x2) - 0.2*y*sin(y2 + x2)
   return d</string_value>
            <comment>u(x,y,t,rho,beta,nu,adv,mass,csq,rho0,gamma) = 1.0*(sin(x*x+y*y)+0.5)&#13;
v(x,y,t,rho,beta,nu,adv,mass,csq,rho0,gamma) = 0.1*(cos(x*x+y*y)+0.5)

u_x = diff(u, x)
v_y = diff(v, y)

d = u_x + v_y</comment>
          </python>
        </value>
        <output/>
        <stat/>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
        <do_not_recalculate/>
      </prescribed>
    </scalar_field>
    <vector_field name="VelocityAnalytical" rank="1">
      <prescribed>
        <mesh name="VelocityMesh"/>
        <value name="WholeMesh">
          <python>
            <string_value lines="20" type="code" language="python">def val(XX,t):
   from math import sin, cos
   # Shear rotation about origin.
   x = XX[0]
   x2 = x*x
   y = XX[1]
   y2 = y*y
   u = 1.0*(sin(x2+y2)+0.5)
   v = 0.1*(cos(x2+y2)+0.5)
   return (u, v)</string_value>
            <comment>u(x,y,rho,beta,nu,adv,mass,t) = 1.0*(sin(x*x+y*y)+0.5)&#13;
v(x,y,rho,beta,nu,adv,mass,t) = 0.1*(cos(x*x+y*y)+0.5)</comment>
          </python>
        </value>
        <output/>
        <stat>
          <include_in_stat/>
        </stat>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
        <do_not_recalculate/>
      </prescribed>
    </vector_field>
    <vector_field name="VelocityAbsoluteDifference" rank="1">
      <diagnostic>
        <algorithm name="vector_python_diagnostic" material_phase_support="single">
          <string_value lines="20" type="code" language="python">field1=state.vector_fields["Velocity"]
field2=state.vector_fields["VelocityAnalytical"]
for i in range(field.node_count):
   field.set(i, abs(field1.node_val(i)-field2.node_val(i)))</string_value>
        </algorithm>
        <mesh name="VelocityMesh"/>
        <output/>
        <stat>
          <include_in_stat/>
        </stat>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </vector_field>
  </material_phase>
</fluidity_options>
