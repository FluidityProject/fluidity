<?xml version='1.0' encoding='utf-8'?>
<fluidity_options>
  <simulation_name>
    <string_value lines="1">MMS_X</string_value>
  </simulation_name>
  <problem_type>
    <string_value lines="1">fluids</string_value>
  </problem_type>
  <geometry>
    <dimension>
      <integer_value rank="0">2</integer_value>
    </dimension>
    <mesh name="CoordinateMesh">
      <from_file file_name="src/MMS_X">
        <format name="gmsh"/>
        <stat>
          <exclude_from_stat/>
        </stat>
      </from_file>
    </mesh>
    <mesh name="VelocityMesh">
      <from_mesh>
        <mesh name="CoordinateMesh"/>
        <mesh_shape>
          <polynomial_degree>
            <integer_value rank="0">2</integer_value>
          </polynomial_degree>
        </mesh_shape>
        <stat>
          <exclude_from_stat/>
        </stat>
      </from_mesh>
    </mesh>
    <mesh name="PressureMesh">
      <from_mesh>
        <mesh name="CoordinateMesh"/>
        <mesh_shape>
          <polynomial_degree>
            <integer_value rank="0">1</integer_value>
          </polynomial_degree>
        </mesh_shape>
        <stat>
          <exclude_from_stat/>
        </stat>
      </from_mesh>
    </mesh>
    <mesh name="ErrorMesh">
      <from_mesh>
        <mesh name="CoordinateMesh"/>
        <mesh_shape>
          <polynomial_degree>
            <integer_value rank="0">4</integer_value>
          </polynomial_degree>
        </mesh_shape>
        <mesh_continuity>
          <string_value>continuous</string_value>
        </mesh_continuity>
        <stat>
          <exclude_from_stat/>
        </stat>
      </from_mesh>
    </mesh>
    <quadrature>
      <degree>
        <integer_value rank="0">8</integer_value>
      </degree>
    </quadrature>
  </geometry>
  <io>
    <dump_format>
      <string_value>vtk</string_value>
    </dump_format>
    <dump_period>
      <constant>
        <real_value rank="0">2000</real_value>
      </constant>
    </dump_period>
    <output_mesh name="VelocityMesh"/>
    <stat/>
  </io>
  <timestepping>
    <current_time>
      <real_value rank="0">0.0</real_value>
    </current_time>
    <timestep>
      <real_value rank="0">999.9</real_value>
      <comment>gives a max cfl number of approximately 0.1</comment>
    </timestep>
    <finish_time>
      <real_value rank="0">1000.0</real_value>
      <comment>10.0</comment>
    </finish_time>
    <nonlinear_iterations>
      <integer_value rank="0">2</integer_value>
    </nonlinear_iterations>
    <steady_state>
      <tolerance>
        <real_value rank="0">1.E-3</real_value>
        <infinity_norm/>
      </tolerance>
    </steady_state>
  </timestepping>
  <physical_parameters>
    <gravity>
      <magnitude>
        <real_value rank="0">1.0</real_value>
      </magnitude>
      <vector_field name="GravityDirection" rank="1">
        <prescribed>
          <mesh name="CoordinateMesh"/>
          <value name="WholeMesh">
            <constant>
              <real_value rank="1" dim1="dim" shape="2">0.707106781 0.707106781</real_value>
            </constant>
          </value>
          <output/>
          <stat>
            <exclude_from_stat/>
          </stat>
          <detectors>
            <exclude_from_detectors/>
          </detectors>
          <particles>
            <exclude_from_particles/>
          </particles>
        </prescribed>
      </vector_field>
    </gravity>
  </physical_parameters>
  <material_phase name="NS">
    <equation_of_state>
      <fluids>
        <linear>
          <reference_density>
            <real_value rank="0">1.0</real_value>
          </reference_density>
          <temperature_dependency>
            <reference_temperature>
              <real_value rank="0">0.0</real_value>
            </reference_temperature>
            <thermal_expansion_coefficient>
              <real_value rank="0">-1.0</real_value>
            </thermal_expansion_coefficient>
          </temperature_dependency>
          <subtract_out_hydrostatic_level/>
        </linear>
      </fluids>
    </equation_of_state>
    <subgridscale_parameterisations>
      <k-epsilon>
        <scalar_field rank="0" name="TurbulentKineticEnergy">
          <prognostic>
            <mesh name="VelocityMesh"/>
            <equation name="KEpsilon">
              <density name="Density"/>
            </equation>
            <spatial_discretisation>
              <continuous_galerkin>
                <stabilisation>
                  <streamline_upwind>
                    <nu_bar_optimal/>
                    <nu_scale name="0.5">
                      <real_value rank="0" shape="1">0.5</real_value>
                    </nu_scale>
                  </streamline_upwind>
                </stabilisation>
                <advection_terms/>
                <mass_terms/>
              </continuous_galerkin>
              <conservative_advection>
                <real_value rank="0">1.0</real_value>
              </conservative_advection>
            </spatial_discretisation>
            <temporal_discretisation>
              <theta>
                <real_value rank="0">0.5</real_value>
              </theta>
            </temporal_discretisation>
            <solver>
              <iterative_method name="gmres">
                <restart>
                  <integer_value rank="0">30</integer_value>
                </restart>
              </iterative_method>
              <preconditioner name="sor"/>
              <relative_error>
                <real_value rank="0">1.0e-6</real_value>
              </relative_error>
              <absolute_error>
                <real_value rank="0">1e-15</real_value>
              </absolute_error>
              <max_iterations>
                <integer_value rank="0">1000</integer_value>
              </max_iterations>
              <never_ignore_solver_failures/>
              <diagnostics>
                <monitors/>
              </diagnostics>
            </solver>
            <initial_condition name="WholeMesh">
              <python>
                <string_value type="code" language="python" lines="20">def val(X,t):
   import mms_rans_p2p1_upw_keps_tools as k
   return k.ke(X)</string_value>
              </python>
            </initial_condition>
            <boundary_conditions name="all_sides">
              <surface_ids>
                <integer_value rank="1" shape="1">1</integer_value>
              </surface_ids>
              <type name="dirichlet">
                <python>
                  <string_value type="code" language="python" lines="20">def val(X,t):
   import mms_rans_p2p1_upw_keps_tools as k
   return k.ke(X)</string_value>
                </python>
              </type>
            </boundary_conditions>
            <tensor_field name="Diffusivity" rank="2">
              <diagnostic>
                <algorithm name="Internal" material_phase_support="multiple"/>
                <output/>
                <stat>
                  <exclude_from_stat/>
                </stat>
                <particles>
                  <exclude_from_particles/>
                </particles>
              </diagnostic>
            </tensor_field>
            <scalar_field name="Source" rank="0">
              <diagnostic>
                <algorithm name="Internal" material_phase_support="multiple"/>
                <output/>
                <stat>
                  <exclude_from_stat/>
                </stat>
                <detectors>
                  <include_in_detectors/>
                </detectors>
                <particles>
                  <exclude_from_particles/>
                </particles>
              </diagnostic>
            </scalar_field>
            <scalar_field name="Absorption" rank="0">
              <diagnostic>
                <algorithm name="Internal" material_phase_support="multiple"/>
                <output/>
                <stat>
                  <exclude_from_stat/>
                </stat>
                <detectors>
                  <include_in_detectors/>
                </detectors>
                <particles>
                  <exclude_from_particles/>
                </particles>
              </diagnostic>
            </scalar_field>
            <output/>
            <stat>
              <exclude_from_stat/>
            </stat>
            <convergence>
              <include_in_convergence/>
            </convergence>
            <detectors>
              <exclude_from_detectors/>
            </detectors>
            <particles>
              <exclude_from_particles/>
            </particles>
            <steady_state>
              <exclude_from_steady_state/>
            </steady_state>
            <consistent_interpolation/>
          </prognostic>
        </scalar_field>
        <scalar_field rank="0" name="TurbulentDissipation">
          <prognostic>
            <mesh name="VelocityMesh"/>
            <equation name="KEpsilon">
              <density name="Density"/>
            </equation>
            <spatial_discretisation>
              <continuous_galerkin>
                <stabilisation>
                  <streamline_upwind>
                    <nu_bar_optimal/>
                    <nu_scale name="0.5">
                      <real_value rank="0" shape="1">0.5</real_value>
                    </nu_scale>
                  </streamline_upwind>
                </stabilisation>
                <advection_terms/>
                <mass_terms/>
              </continuous_galerkin>
              <conservative_advection>
                <real_value rank="0">1.0</real_value>
              </conservative_advection>
            </spatial_discretisation>
            <temporal_discretisation>
              <theta>
                <real_value rank="0">0.5</real_value>
              </theta>
            </temporal_discretisation>
            <solver>
              <iterative_method name="gmres">
                <restart>
                  <integer_value rank="0">30</integer_value>
                </restart>
              </iterative_method>
              <preconditioner name="sor"/>
              <relative_error>
                <real_value rank="0">1.0e-6</real_value>
              </relative_error>
              <absolute_error>
                <real_value rank="0">1e-15</real_value>
              </absolute_error>
              <max_iterations>
                <integer_value rank="0">1000</integer_value>
              </max_iterations>
              <never_ignore_solver_failures/>
              <diagnostics>
                <monitors/>
              </diagnostics>
            </solver>
            <initial_condition name="WholeMesh">
              <python>
                <string_value type="code" language="python" lines="20">def val(X,t):
   import mms_rans_p2p1_upw_keps_tools as k
   return k.eps(X)</string_value>
              </python>
            </initial_condition>
            <boundary_conditions name="all_sides">
              <surface_ids>
                <integer_value rank="1" shape="1">1</integer_value>
              </surface_ids>
              <type name="dirichlet">
                <python>
                  <string_value type="code" language="python" lines="20">def val(X,t):
   import mms_rans_p2p1_upw_keps_tools as k
   return k.eps(X)</string_value>
                </python>
              </type>
            </boundary_conditions>
            <tensor_field name="Diffusivity" rank="2">
              <diagnostic>
                <algorithm name="Internal" material_phase_support="multiple"/>
                <output/>
                <stat>
                  <exclude_from_stat/>
                </stat>
                <particles>
                  <exclude_from_particles/>
                </particles>
              </diagnostic>
            </tensor_field>
            <scalar_field name="Source" rank="0">
              <diagnostic>
                <algorithm name="Internal" material_phase_support="multiple"/>
                <output/>
                <stat>
                  <exclude_from_stat/>
                </stat>
                <detectors>
                  <include_in_detectors/>
                </detectors>
                <particles>
                  <exclude_from_particles/>
                </particles>
              </diagnostic>
            </scalar_field>
            <scalar_field name="Absorption" rank="0">
              <diagnostic>
                <algorithm name="Internal" material_phase_support="multiple"/>
                <output/>
                <stat>
                  <exclude_from_stat/>
                </stat>
                <detectors>
                  <include_in_detectors/>
                </detectors>
                <particles>
                  <exclude_from_particles/>
                </particles>
              </diagnostic>
            </scalar_field>
            <output/>
            <stat>
              <exclude_from_stat/>
            </stat>
            <convergence>
              <include_in_convergence/>
            </convergence>
            <detectors>
              <exclude_from_detectors/>
            </detectors>
            <particles>
              <exclude_from_particles/>
            </particles>
            <steady_state>
              <exclude_from_steady_state/>
            </steady_state>
            <consistent_interpolation/>
          </prognostic>
        </scalar_field>
        <tensor_field rank="2" name="BackgroundViscosity">
          <prescribed>
            <mesh name="VelocityMesh"/>
            <value name="WholeMesh">
              <anisotropic_symmetric>
                <constant>
                  <real_value symmetric="true" rank="2" dim1="dim" dim2="dim" shape="2 2">1.0 1.0 1.0 1.0</real_value>
                </constant>
              </anisotropic_symmetric>
            </value>
            <output/>
            <particles>
              <exclude_from_particles/>
            </particles>
          </prescribed>
        </tensor_field>
        <tensor_field rank="2" name="EddyViscosity">
          <diagnostic>
            <algorithm name="Internal" material_phase_support="multiple"/>
            <mesh name="VelocityMesh"/>
            <output/>
            <stat>
              <exclude_from_stat/>
            </stat>
            <particles>
              <exclude_from_particles/>
            </particles>
          </diagnostic>
        </tensor_field>
        <scalar_field rank="0" name="ScalarEddyViscosity">
          <diagnostic>
            <algorithm name="Internal" material_phase_support="multiple"/>
            <mesh name="VelocityMesh"/>
            <output/>
            <stat>
              <exclude_from_stat/>
            </stat>
            <convergence>
              <include_in_convergence/>
            </convergence>
            <detectors>
              <include_in_detectors/>
            </detectors>
            <particles>
              <exclude_from_particles/>
            </particles>
            <steady_state>
              <exclude_from_steady_state/>
            </steady_state>
          </diagnostic>
        </scalar_field>
        <scalar_field rank="0" name="LengthScale">
          <diagnostic>
            <algorithm name="Internal" material_phase_support="multiple"/>
            <mesh name="VelocityMesh"/>
            <output/>
            <stat>
              <exclude_from_stat/>
            </stat>
            <convergence>
              <include_in_convergence/>
            </convergence>
            <detectors>
              <include_in_detectors/>
            </detectors>
            <particles>
              <exclude_from_particles/>
            </particles>
            <steady_state>
              <exclude_from_steady_state/>
            </steady_state>
          </diagnostic>
        </scalar_field>
        <scalar_field rank="0" name="f_1">
          <diagnostic>
            <algorithm name="Internal" material_phase_support="multiple"/>
            <mesh name="VelocityMesh"/>
            <output/>
            <stat>
              <exclude_from_stat/>
            </stat>
            <convergence>
              <include_in_convergence/>
            </convergence>
            <detectors>
              <include_in_detectors/>
            </detectors>
            <particles>
              <exclude_from_particles/>
            </particles>
            <steady_state>
              <exclude_from_steady_state/>
            </steady_state>
          </diagnostic>
        </scalar_field>
        <scalar_field rank="0" name="f_2">
          <diagnostic>
            <algorithm name="Internal" material_phase_support="multiple"/>
            <mesh name="VelocityMesh"/>
            <output/>
            <stat>
              <exclude_from_stat/>
            </stat>
            <convergence>
              <include_in_convergence/>
            </convergence>
            <detectors>
              <include_in_detectors/>
            </detectors>
            <particles>
              <exclude_from_particles/>
            </particles>
            <steady_state>
              <exclude_from_steady_state/>
            </steady_state>
          </diagnostic>
        </scalar_field>
        <scalar_field rank="0" name="f_mu">
          <diagnostic>
            <algorithm name="Internal" material_phase_support="multiple"/>
            <mesh name="VelocityMesh"/>
            <output/>
            <stat>
              <exclude_from_stat/>
            </stat>
            <convergence>
              <include_in_convergence/>
            </convergence>
            <detectors>
              <include_in_detectors/>
            </detectors>
            <particles>
              <exclude_from_particles/>
            </particles>
            <steady_state>
              <exclude_from_steady_state/>
            </steady_state>
          </diagnostic>
        </scalar_field>
        <max_damping_value>
          <real_value rank="0">10.0</real_value>
        </max_damping_value>
        <C_mu>
          <real_value rank="0">1.0</real_value>
        </C_mu>
        <C_eps_1>
          <real_value rank="0">1.0</real_value>
        </C_eps_1>
        <C_eps_2>
          <real_value rank="0">1.0</real_value>
        </C_eps_2>
        <sigma_k>
          <real_value rank="0">1.0</real_value>
        </sigma_k>
        <sigma_eps>
          <real_value rank="0">1.0</real_value>
        </sigma_eps>
        <sigma_p>
          <real_value rank="0">1.0</real_value>
        </sigma_p>
        <time_discretisation>
          <theta>
            <real_value rank="0">0.5</real_value>
          </theta>
          <source_term_implementation>
            <production_term>source</production_term>
            <destruction_term>absorbtion</destruction_term>
            <buoyancy_term>source</buoyancy_term>
          </source_term_implementation>
        </time_discretisation>
        <mass_terms>
          <use_consistent_mass_matrix>
            <solver>
              <iterative_method name="cg"/>
              <preconditioner name="sor"/>
              <relative_error>
                <real_value rank="0">1.0e-10</real_value>
              </relative_error>
              <max_iterations>
                <integer_value rank="0">1000</integer_value>
              </max_iterations>
              <never_ignore_solver_failures/>
              <diagnostics>
                <monitors/>
              </diagnostics>
            </solver>
          </use_consistent_mass_matrix>
        </mass_terms>
        <debugging_options>
          <source_term_output_fields>
            <scalar_field rank="0" name="TurbulentKineticEnergy_production_term">
              <diagnostic>
                <algorithm name="Internal" material_phase_support="multiple"/>
                <mesh name="VelocityMesh"/>
                <output/>
                <stat>
                  <exclude_from_stat/>
                </stat>
                <convergence>
                  <include_in_convergence/>
                </convergence>
                <detectors>
                  <include_in_detectors/>
                </detectors>
                <particles>
                  <exclude_from_particles/>
                </particles>
                <steady_state>
                  <exclude_from_steady_state/>
                </steady_state>
              </diagnostic>
            </scalar_field>
            <scalar_field rank="0" name="TurbulentKineticEnergy_destruction_term">
              <diagnostic>
                <algorithm name="Internal" material_phase_support="multiple"/>
                <mesh name="VelocityMesh"/>
                <output/>
                <stat>
                  <exclude_from_stat/>
                </stat>
                <convergence>
                  <include_in_convergence/>
                </convergence>
                <detectors>
                  <include_in_detectors/>
                </detectors>
                <particles>
                  <exclude_from_particles/>
                </particles>
                <steady_state>
                  <exclude_from_steady_state/>
                </steady_state>
              </diagnostic>
            </scalar_field>
            <scalar_field rank="0" name="TurbulentKineticEnergy_buoyancy_term">
              <diagnostic>
                <algorithm name="Internal" material_phase_support="multiple"/>
                <mesh name="VelocityMesh"/>
                <output/>
                <stat>
                  <exclude_from_stat/>
                </stat>
                <convergence>
                  <include_in_convergence/>
                </convergence>
                <detectors>
                  <include_in_detectors/>
                </detectors>
                <particles>
                  <exclude_from_particles/>
                </particles>
                <steady_state>
                  <exclude_from_steady_state/>
                </steady_state>
              </diagnostic>
            </scalar_field>
            <scalar_field rank="0" name="TurbulentDissipation_production_term">
              <diagnostic>
                <algorithm name="Internal" material_phase_support="multiple"/>
                <mesh name="VelocityMesh"/>
                <output/>
                <stat>
                  <exclude_from_stat/>
                </stat>
                <convergence>
                  <include_in_convergence/>
                </convergence>
                <detectors>
                  <include_in_detectors/>
                </detectors>
                <particles>
                  <exclude_from_particles/>
                </particles>
                <steady_state>
                  <exclude_from_steady_state/>
                </steady_state>
              </diagnostic>
            </scalar_field>
            <scalar_field rank="0" name="TurbulentDissipation_destruction_term">
              <diagnostic>
                <algorithm name="Internal" material_phase_support="multiple"/>
                <mesh name="VelocityMesh"/>
                <output/>
                <stat>
                  <exclude_from_stat/>
                </stat>
                <convergence>
                  <include_in_convergence/>
                </convergence>
                <detectors>
                  <include_in_detectors/>
                </detectors>
                <particles>
                  <exclude_from_particles/>
                </particles>
                <steady_state>
                  <exclude_from_steady_state/>
                </steady_state>
              </diagnostic>
            </scalar_field>
            <scalar_field rank="0" name="TurbulentDissipation_buoyancy_term">
              <diagnostic>
                <algorithm name="Internal" material_phase_support="multiple"/>
                <mesh name="VelocityMesh"/>
                <output/>
                <stat>
                  <exclude_from_stat/>
                </stat>
                <convergence>
                  <include_in_convergence/>
                </convergence>
                <detectors>
                  <include_in_detectors/>
                </detectors>
                <particles>
                  <exclude_from_particles/>
                </particles>
                <steady_state>
                  <exclude_from_steady_state/>
                </steady_state>
              </diagnostic>
            </scalar_field>
          </source_term_output_fields>
          <prescribed_source_terms>
            <scalar_field rank="0" name="TurbulentKineticEnergyPrescribedSource">
              <prescribed>
                <mesh name="VelocityMesh"/>
                <value name="WholeMesh">
                  <python>
                    <string_value type="code" language="python" lines="20">def val(X,t):
   import mms_rans_p2p1_upw_keps_tools as k
   return k.forcing_ke(X)</string_value>
                  </python>
                </value>
                <output/>
                <stat>
                  <exclude_from_stat/>
                </stat>
                <detectors>
                  <exclude_from_detectors/>
                </detectors>
                <particles>
                  <exclude_from_particles/>
                </particles>
              </prescribed>
            </scalar_field>
            <scalar_field rank="0" name="TurbulentDissipationPrescribedSource">
              <prescribed>
                <mesh name="VelocityMesh"/>
                <value name="WholeMesh">
                  <python>
                    <string_value type="code" language="python" lines="20">def val(X,t):
   import mms_rans_p2p1_upw_keps_tools as k
   return k.forcing_eps(X)</string_value>
                  </python>
                </value>
                <output/>
                <stat>
                  <exclude_from_stat/>
                </stat>
                <detectors>
                  <exclude_from_detectors/>
                </detectors>
                <particles>
                  <exclude_from_particles/>
                </particles>
              </prescribed>
            </scalar_field>
          </prescribed_source_terms>
        </debugging_options>
      </k-epsilon>
    </subgridscale_parameterisations>
    <scalar_field rank="0" name="Pressure">
      <prognostic>
        <mesh name="PressureMesh"/>
        <spatial_discretisation>
          <continuous_galerkin>
            <remove_stabilisation_term/>
          </continuous_galerkin>
        </spatial_discretisation>
        <reference_coordinates>
          <real_value rank="1" dim1="dim" shape="2">0.0 0.0</real_value>
        </reference_coordinates>
        <scheme>
          <poisson_pressure_solution>
            <string_value lines="1">only first timestep</string_value>
          </poisson_pressure_solution>
          <use_projection_method/>
        </scheme>
        <solver>
          <iterative_method name="cg"/>
          <preconditioner name="sor"/>
          <relative_error>
            <real_value rank="0">1.0e-6</real_value>
          </relative_error>
          <absolute_error>
            <real_value rank="0">1e-15</real_value>
          </absolute_error>
          <max_iterations>
            <integer_value rank="0">1000</integer_value>
          </max_iterations>
          <never_ignore_solver_failures/>
          <diagnostics>
            <monitors/>
          </diagnostics>
        </solver>
        <output>
          <include_previous_time_step/>
        </output>
        <stat>
          <exclude_from_stat/>
        </stat>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
        <steady_state>
          <exclude_from_steady_state/>
        </steady_state>
        <consistent_interpolation/>
      </prognostic>
    </scalar_field>
    <scalar_field rank="0" name="Density">
      <diagnostic>
        <algorithm name="Internal" material_phase_support="multiple"/>
        <mesh name="VelocityMesh"/>
        <output/>
        <stat>
          <exclude_from_stat/>
        </stat>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
        <steady_state>
          <exclude_from_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <vector_field rank="1" name="Velocity">
      <prognostic>
        <mesh name="VelocityMesh"/>
        <equation name="Boussinesq"/>
        <spatial_discretisation>
          <continuous_galerkin>
            <stabilisation>
              <streamline_upwind>
                <nu_bar_optimal/>
                <nu_scale name="0.5">
                  <real_value rank="0" shape="1">0.5</real_value>
                </nu_scale>
              </streamline_upwind>
            </stabilisation>
            <mass_terms>
              <lump_mass_matrix>
                <use_submesh/>
              </lump_mass_matrix>
            </mass_terms>
            <advection_terms/>
            <stress_terms>
              <partial_stress_form/>
            </stress_terms>
            <buoyancy/>
          </continuous_galerkin>
          <conservative_advection>
            <real_value rank="0">1.0</real_value>
          </conservative_advection>
        </spatial_discretisation>
        <temporal_discretisation>
          <theta>
            <real_value rank="0">0.5</real_value>
          </theta>
          <relaxation>
            <real_value rank="0">0.5</real_value>
          </relaxation>
        </temporal_discretisation>
        <solver>
          <iterative_method name="gmres">
            <restart>
              <integer_value rank="0">30</integer_value>
            </restart>
          </iterative_method>
          <preconditioner name="sor"/>
          <relative_error>
            <real_value rank="0">1e-6</real_value>
          </relative_error>
          <absolute_error>
            <real_value rank="0">1e-15</real_value>
          </absolute_error>
          <max_iterations>
            <integer_value rank="0">1000</integer_value>
          </max_iterations>
          <never_ignore_solver_failures/>
          <diagnostics>
            <monitors/>
          </diagnostics>
        </solver>
        <initial_condition name="WholeMesh">
          <python>
            <string_value type="code" language="python" lines="20">def val(X,t):
   import mms_rans_p2p1_upw_keps_tools as k
   return k.velocity(X)</string_value>
          </python>
        </initial_condition>
        <boundary_conditions name="all_sides">
          <surface_ids>
            <integer_value rank="1" shape="1">1</integer_value>
          </surface_ids>
          <type name="dirichlet">
            <align_bc_with_cartesian>
              <x_component>
                <python>
                  <string_value type="code" language="python" lines="20">def val(X,t):
   import mms_rans_p2p1_upw_keps_tools as k
   return k.u(X)</string_value>
                </python>
              </x_component>
              <y_component>
                <python>
                  <string_value type="code" language="python" lines="20">def val(X,t):
   import mms_rans_p2p1_upw_keps_tools as k
   return k.v(X)</string_value>
                </python>
              </y_component>
            </align_bc_with_cartesian>
          </type>
        </boundary_conditions>
        <tensor_field name="Viscosity" rank="2">
          <diagnostic>
            <algorithm name="Internal" material_phase_support="multiple"/>
            <output/>
            <stat>
              <exclude_from_stat/>
            </stat>
            <particles>
              <exclude_from_particles/>
            </particles>
          </diagnostic>
        </tensor_field>
        <vector_field name="Source" rank="1">
          <prescribed>
            <value name="WholeMesh">
              <python>
                <string_value type="code" language="python" lines="20">def val(X,t):
   import mms_rans_p2p1_upw_keps_tools as k
   return k.forcing_velocity(X)</string_value>
              </python>
            </value>
            <output/>
            <stat>
              <exclude_from_stat/>
            </stat>
            <detectors>
              <exclude_from_detectors/>
            </detectors>
            <particles>
              <exclude_from_particles/>
            </particles>
          </prescribed>
        </vector_field>
        <output/>
        <stat>
          <exclude_from_stat/>
          <previous_time_step>
            <exclude_from_stat/>
          </previous_time_step>
          <nonlinear_field>
            <exclude_from_stat/>
          </nonlinear_field>
        </stat>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <exclude_from_steady_state/>
        </steady_state>
        <consistent_interpolation/>
      </prognostic>
    </vector_field>
    <scalar_field rank="0" name="CFLNumber">
      <diagnostic>
        <algorithm name="Internal" material_phase_support="multiple"/>
        <mesh name="VelocityMesh"/>
        <output/>
        <stat>
          <exclude_from_stat/>
        </stat>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
        <steady_state>
          <exclude_from_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <scalar_field rank="0" name="Temperature">
      <prognostic>
        <mesh name="VelocityMesh"/>
        <equation name="AdvectionDiffusion"/>
        <spatial_discretisation>
          <continuous_galerkin>
            <stabilisation>
              <streamline_upwind>
                <nu_bar_optimal/>
                <nu_scale name="0.5">
                  <real_value rank="0" shape="1">0.5</real_value>
                </nu_scale>
              </streamline_upwind>
            </stabilisation>
            <advection_terms/>
            <mass_terms/>
          </continuous_galerkin>
          <conservative_advection>
            <real_value rank="0">1.0</real_value>
          </conservative_advection>
        </spatial_discretisation>
        <temporal_discretisation>
          <theta>
            <real_value rank="0">0.5</real_value>
          </theta>
        </temporal_discretisation>
        <solver>
          <iterative_method name="gmres">
            <restart>
              <integer_value rank="0">30</integer_value>
            </restart>
          </iterative_method>
          <preconditioner name="ilu"/>
          <relative_error>
            <real_value rank="0">1.0e-6</real_value>
          </relative_error>
          <absolute_error>
            <real_value rank="0">1e-15</real_value>
          </absolute_error>
          <max_iterations>
            <integer_value rank="0">1000</integer_value>
          </max_iterations>
          <never_ignore_solver_failures/>
          <diagnostics>
            <monitors/>
          </diagnostics>
        </solver>
        <initial_condition name="WholeMesh">
          <python>
            <string_value type="code" language="python" lines="20">def val(X,t):
   import mms_rans_p2p1_upw_keps_tools as k
   return k.rho(X)</string_value>
          </python>
        </initial_condition>
        <boundary_conditions name="all_sides">
          <surface_ids>
            <integer_value rank="1" shape="1">1</integer_value>
          </surface_ids>
          <type name="dirichlet">
            <python>
              <string_value type="code" language="python" lines="20">def val(X,t):
   import mms_rans_p2p1_upw_keps_tools as k
   return k.rho(X)</string_value>
            </python>
          </type>
        </boundary_conditions>
        <subgridscale_parameterisation name="k-epsilon">
          <background_diffusivity>
            <real_value rank="0">1.0</real_value>
          </background_diffusivity>
        </subgridscale_parameterisation>
        <tensor_field name="Diffusivity" rank="2">
          <diagnostic>
            <algorithm name="Internal" material_phase_support="multiple"/>
            <output/>
            <stat>
              <exclude_from_stat/>
            </stat>
            <particles>
              <exclude_from_particles/>
            </particles>
          </diagnostic>
        </tensor_field>
        <scalar_field name="Source" rank="0">
          <prescribed>
            <value name="WholeMesh">
              <python>
                <string_value type="code" language="python" lines="20">def val(X,t):
   import mms_rans_p2p1_upw_keps_tools as k
   return k.forcing_rho(X)</string_value>
              </python>
            </value>
            <output/>
            <stat>
              <exclude_from_stat/>
            </stat>
            <detectors>
              <exclude_from_detectors/>
            </detectors>
            <particles>
              <exclude_from_particles/>
            </particles>
          </prescribed>
        </scalar_field>
        <output/>
        <stat>
          <exclude_from_stat/>
        </stat>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
        <steady_state>
          <exclude_from_steady_state/>
        </steady_state>
        <consistent_interpolation/>
      </prognostic>
    </scalar_field>
    <scalar_field rank="0" name="TemperatureAnalytical">
      <prescribed>
        <mesh name="ErrorMesh"/>
        <value name="WholeMesh">
          <python>
            <string_value type="code" language="python" lines="20">def val(X,t):
   import mms_rans_p2p1_upw_keps_tools as k
   return k.rho(X)</string_value>
          </python>
        </value>
        <output/>
        <stat>
          <exclude_from_stat/>
        </stat>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
      </prescribed>
    </scalar_field>
    <scalar_field rank="0" name="TemperatureError">
      <diagnostic>
        <algorithm name="scalar_difference" material_phase_support="single" source_field_1_name="TemperatureAnalytical" source_field_1_type="scalar" source_field_2_name="TemperatureProjection" source_field_2_type="scalar">
          <absolute_difference/>
        </algorithm>
        <mesh name="ErrorMesh"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <scalar_field rank="0" name="TemperatureProjection">
      <diagnostic>
        <algorithm name="scalar_galerkin_projection" material_phase_support="single" source_field_name="Temperature" source_field_type="scalar">
          <solver>
            <iterative_method name="cg"/>
            <preconditioner name="sor"/>
            <relative_error>
              <real_value rank="0">1e-10</real_value>
            </relative_error>
            <max_iterations>
              <integer_value rank="0">1000</integer_value>
            </max_iterations>
            <never_ignore_solver_failures/>
            <diagnostics>
              <monitors/>
            </diagnostics>
          </solver>
        </algorithm>
        <mesh name="ErrorMesh"/>
        <output/>
        <stat>
          <exclude_from_stat/>
        </stat>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
        <steady_state>
          <exclude_from_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <scalar_field rank="0" name="PressureAnalytical">
      <prescribed>
        <mesh name="ErrorMesh"/>
        <value name="WholeMesh">
          <python>
            <string_value type="code" language="python" lines="20">def val(X,t):
        import mms_rans_p2p1_upw_keps_tools as k
        return k.p(X)</string_value>
          </python>
        </value>
        <output/>
        <stat>
          <exclude_from_stat/>
        </stat>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
      </prescribed>
    </scalar_field>
    <scalar_field rank="0" name="PressureProjection">
      <diagnostic>
        <algorithm name="scalar_galerkin_projection" material_phase_support="single" source_field_name="Pressure" source_field_type="scalar">
          <solver>
            <iterative_method name="cg"/>
            <preconditioner name="sor"/>
            <relative_error>
              <real_value rank="0">1e-10</real_value>
            </relative_error>
            <max_iterations>
              <integer_value rank="0">1000</integer_value>
            </max_iterations>
            <never_ignore_solver_failures/>
            <diagnostics>
              <monitors/>
            </diagnostics>
          </solver>
        </algorithm>
        <mesh name="ErrorMesh"/>
        <output/>
        <stat>
          <exclude_from_stat/>
        </stat>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
        <steady_state>
          <exclude_from_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <scalar_field rank="0" name="PressureError">
      <diagnostic>
        <algorithm name="scalar_difference" material_phase_support="single" source_field_1_name="PressureAnalytical" source_field_1_type="scalar" source_field_2_name="PressureProjection" source_field_2_type="scalar">
          <absolute_difference/>
        </algorithm>
        <mesh name="ErrorMesh"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <scalar_field rank="0" name="TurbulentKineticEnergy_production_termCopy">
      <diagnostic>
        <algorithm name="scalar_python_diagnostic" material_phase_support="single">
          <string_value type="code" language="python" lines="20">E=state.scalar_fields["TurbulentKineticEnergy_production_term"]

for n in range(field.node_count):
	field.set(n,E.node_val(n))</string_value>
        </algorithm>
        <mesh name="VelocityMesh"/>
        <output/>
        <stat>
          <exclude_from_stat/>
        </stat>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
        <steady_state>
          <exclude_from_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <scalar_field rank="0" name="TurbulentKineticEnergy_production_termAnalytical">
      <prescribed>
        <mesh name="ErrorMesh"/>
        <value name="WholeMesh">
          <python>
            <string_value type="code" language="python" lines="20">def val(X,t):
   import mms_rans_p2p1_upw_keps_tools as k
   return k.P_ke(X)</string_value>
          </python>
        </value>
        <output/>
        <stat>
          <exclude_from_stat/>
        </stat>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
      </prescribed>
    </scalar_field>
    <scalar_field rank="0" name="TurbulentKineticEnergy_production_termProjection">
      <diagnostic>
        <algorithm name="scalar_galerkin_projection" material_phase_support="single" source_field_name="TurbulentKineticEnergy_production_termCopy" source_field_type="scalar">
          <solver>
            <iterative_method name="cg"/>
            <preconditioner name="sor"/>
            <relative_error>
              <real_value rank="0">1e-10</real_value>
            </relative_error>
            <max_iterations>
              <integer_value rank="0">1000</integer_value>
            </max_iterations>
            <never_ignore_solver_failures/>
            <diagnostics>
              <monitors/>
            </diagnostics>
          </solver>
        </algorithm>
        <mesh name="ErrorMesh"/>
        <output/>
        <stat>
          <exclude_from_stat/>
        </stat>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
        <steady_state>
          <exclude_from_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <scalar_field rank="0" name="TurbulentKineticEnergy_production_termError">
      <diagnostic>
        <algorithm name="scalar_difference" material_phase_support="single" source_field_1_name="TurbulentKineticEnergy_production_termAnalytical" source_field_1_type="scalar" source_field_2_name="TurbulentKineticEnergy_production_termProjection" source_field_2_type="scalar">
          <absolute_difference/>
        </algorithm>
        <mesh name="ErrorMesh"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <scalar_field rank="0" name="TurbulentKineticEnergy_destruction_termCopy">
      <diagnostic>
        <algorithm name="scalar_python_diagnostic" material_phase_support="single">
          <string_value type="code" language="python" lines="20">E=state.scalar_fields["TurbulentKineticEnergy_destruction_term"]

for n in range(field.node_count):
	field.set(n,E.node_val(n))</string_value>
        </algorithm>
        <mesh name="VelocityMesh"/>
        <output/>
        <stat>
          <exclude_from_stat/>
        </stat>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
        <steady_state>
          <exclude_from_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <scalar_field rank="0" name="TurbulentKineticEnergy_destruction_termAnalytical">
      <prescribed>
        <mesh name="ErrorMesh"/>
        <value name="WholeMesh">
          <python>
            <string_value type="code" language="python" lines="20">def val(X,t):
   import mms_rans_p2p1_upw_keps_tools as k
   return k.A_ke(X)</string_value>
          </python>
        </value>
        <output/>
        <stat>
          <exclude_from_stat/>
        </stat>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
      </prescribed>
    </scalar_field>
    <scalar_field rank="0" name="TurbulentKineticEnergy_destruction_termProjection">
      <diagnostic>
        <algorithm name="scalar_galerkin_projection" material_phase_support="single" source_field_name="TurbulentKineticEnergy_destruction_termCopy" source_field_type="scalar">
          <solver>
            <iterative_method name="cg"/>
            <preconditioner name="sor"/>
            <relative_error>
              <real_value rank="0">1e-10</real_value>
            </relative_error>
            <max_iterations>
              <integer_value rank="0">1000</integer_value>
            </max_iterations>
            <never_ignore_solver_failures/>
            <diagnostics>
              <monitors/>
            </diagnostics>
          </solver>
        </algorithm>
        <mesh name="ErrorMesh"/>
        <output/>
        <stat>
          <exclude_from_stat/>
        </stat>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
        <steady_state>
          <exclude_from_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <scalar_field rank="0" name="TurbulentKineticEnergy_destruction_termError">
      <diagnostic>
        <algorithm name="scalar_difference" material_phase_support="single" source_field_1_name="TurbulentKineticEnergy_destruction_termAnalytical" source_field_1_type="scalar" source_field_2_name="TurbulentKineticEnergy_destruction_termProjection" source_field_2_type="scalar">
          <absolute_difference/>
        </algorithm>
        <mesh name="ErrorMesh"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <scalar_field rank="0" name="TurbulentKineticEnergy_buoyancy_termCopy">
      <diagnostic>
        <algorithm name="scalar_python_diagnostic" material_phase_support="single">
          <string_value type="code" language="python" lines="20">E=state.scalar_fields["TurbulentKineticEnergy_buoyancy_term"]

for n in range(field.node_count):
	field.set(n,E.node_val(n))</string_value>
        </algorithm>
        <mesh name="VelocityMesh"/>
        <output/>
        <stat>
          <exclude_from_stat/>
        </stat>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
        <steady_state>
          <exclude_from_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <scalar_field rank="0" name="TurbulentKineticEnergy_buoyancy_termAnalytical">
      <prescribed>
        <mesh name="ErrorMesh"/>
        <value name="WholeMesh">
          <python>
            <string_value type="code" language="python" lines="20">def val(X,t):
   import mms_rans_p2p1_upw_keps_tools as k
   return k.B_ke(X)</string_value>
          </python>
        </value>
        <output/>
        <stat>
          <exclude_from_stat/>
        </stat>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
      </prescribed>
    </scalar_field>
    <scalar_field rank="0" name="TurbulentKineticEnergy_buoyancy_termProjection">
      <diagnostic>
        <algorithm name="scalar_galerkin_projection" material_phase_support="single" source_field_name="TurbulentKineticEnergy_buoyancy_termCopy" source_field_type="scalar">
          <solver>
            <iterative_method name="cg"/>
            <preconditioner name="sor"/>
            <relative_error>
              <real_value rank="0">1e-10</real_value>
            </relative_error>
            <max_iterations>
              <integer_value rank="0">1000</integer_value>
            </max_iterations>
            <never_ignore_solver_failures/>
            <diagnostics>
              <monitors/>
            </diagnostics>
          </solver>
        </algorithm>
        <mesh name="ErrorMesh"/>
        <output/>
        <stat>
          <exclude_from_stat/>
        </stat>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
        <steady_state>
          <exclude_from_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <scalar_field rank="0" name="TurbulentKineticEnergy_buoyancy_termError">
      <diagnostic>
        <algorithm name="scalar_difference" material_phase_support="single" source_field_1_name="TurbulentKineticEnergy_buoyancy_termAnalytical" source_field_1_type="scalar" source_field_2_name="TurbulentKineticEnergy_buoyancy_termProjection" source_field_2_type="scalar">
          <absolute_difference/>
        </algorithm>
        <mesh name="ErrorMesh"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <scalar_field rank="0" name="TurbulentKineticEnergyCopy">
      <diagnostic>
        <algorithm name="scalar_python_diagnostic" material_phase_support="single">
          <string_value type="code" language="python" lines="20">E=state.scalar_fields["TurbulentKineticEnergy"]

for n in range(field.node_count):
	field.set(n,E.node_val(n))</string_value>
        </algorithm>
        <mesh name="VelocityMesh"/>
        <output/>
        <stat>
          <exclude_from_stat/>
        </stat>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
        <steady_state>
          <exclude_from_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <scalar_field rank="0" name="TurbulentKineticEnergyAnalytical">
      <prescribed>
        <mesh name="ErrorMesh"/>
        <value name="WholeMesh">
          <python>
            <string_value type="code" language="python" lines="20">def val(X,t):
   import mms_rans_p2p1_upw_keps_tools as k
   return k.ke(X)</string_value>
          </python>
        </value>
        <output/>
        <stat>
          <exclude_from_stat/>
        </stat>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
      </prescribed>
    </scalar_field>
    <scalar_field rank="0" name="TurbulentKineticEnergyProjection">
      <diagnostic>
        <algorithm name="scalar_galerkin_projection" material_phase_support="single" source_field_name="TurbulentKineticEnergyCopy" source_field_type="scalar">
          <solver>
            <iterative_method name="cg"/>
            <preconditioner name="sor"/>
            <relative_error>
              <real_value rank="0">1e-10</real_value>
            </relative_error>
            <max_iterations>
              <integer_value rank="0">1000</integer_value>
            </max_iterations>
            <never_ignore_solver_failures/>
            <diagnostics>
              <monitors/>
            </diagnostics>
          </solver>
        </algorithm>
        <mesh name="ErrorMesh"/>
        <output/>
        <stat>
          <exclude_from_stat/>
        </stat>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
        <steady_state>
          <exclude_from_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <scalar_field rank="0" name="TurbulentKineticEnergyError">
      <diagnostic>
        <algorithm name="scalar_difference" material_phase_support="single" source_field_1_name="TurbulentKineticEnergyAnalytical" source_field_1_type="scalar" source_field_2_name="TurbulentKineticEnergyProjection" source_field_2_type="scalar">
          <absolute_difference/>
        </algorithm>
        <mesh name="ErrorMesh"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <scalar_field rank="0" name="TurbulentDissipation_production_termCopy">
      <diagnostic>
        <algorithm name="scalar_python_diagnostic" material_phase_support="single">
          <string_value type="code" language="python" lines="20">E=state.scalar_fields["TurbulentDissipation_production_term"]

for n in range(field.node_count):
	field.set(n,E.node_val(n))</string_value>
        </algorithm>
        <mesh name="VelocityMesh"/>
        <output/>
        <stat>
          <exclude_from_stat/>
        </stat>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
        <steady_state>
          <exclude_from_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <scalar_field rank="0" name="TurbulentDissipation_production_termAnalytical">
      <prescribed>
        <mesh name="ErrorMesh"/>
        <value name="WholeMesh">
          <python>
            <string_value type="code" language="python" lines="20">def val(X,t):
   import mms_rans_p2p1_upw_keps_tools as k
   return k.P_eps(X)</string_value>
          </python>
        </value>
        <output/>
        <stat>
          <exclude_from_stat/>
        </stat>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
      </prescribed>
    </scalar_field>
    <scalar_field rank="0" name="TurbulentDissipation_production_termProjection">
      <diagnostic>
        <algorithm name="scalar_galerkin_projection" material_phase_support="single" source_field_name="TurbulentDissipation_production_termCopy" source_field_type="scalar">
          <solver>
            <iterative_method name="cg"/>
            <preconditioner name="sor"/>
            <relative_error>
              <real_value rank="0">1e-10</real_value>
            </relative_error>
            <max_iterations>
              <integer_value rank="0">1000</integer_value>
            </max_iterations>
            <never_ignore_solver_failures/>
            <diagnostics>
              <monitors/>
            </diagnostics>
          </solver>
        </algorithm>
        <mesh name="ErrorMesh"/>
        <output/>
        <stat>
          <exclude_from_stat/>
        </stat>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
        <steady_state>
          <exclude_from_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <scalar_field rank="0" name="TurbulentDissipation_production_termError">
      <diagnostic>
        <algorithm name="scalar_difference" material_phase_support="single" source_field_1_name="TurbulentDissipation_production_termAnalytical" source_field_1_type="scalar" source_field_2_name="TurbulentDissipation_production_termProjection" source_field_2_type="scalar">
          <absolute_difference/>
        </algorithm>
        <mesh name="ErrorMesh"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <scalar_field rank="0" name="TurbulentDissipation_destruction_termCopy">
      <diagnostic>
        <algorithm name="scalar_python_diagnostic" material_phase_support="single">
          <string_value type="code" language="python" lines="20">E=state.scalar_fields["TurbulentDissipation_destruction_term"]

for n in range(field.node_count):
	field.set(n,E.node_val(n))</string_value>
        </algorithm>
        <mesh name="VelocityMesh"/>
        <output/>
        <stat>
          <exclude_from_stat/>
        </stat>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
        <steady_state>
          <exclude_from_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <scalar_field rank="0" name="TurbulentDissipation_destruction_termAnalytical">
      <prescribed>
        <mesh name="ErrorMesh"/>
        <value name="WholeMesh">
          <python>
            <string_value type="code" language="python" lines="20">def val(X,t):
   import mms_rans_p2p1_upw_keps_tools as k
   return k.A_eps(X)</string_value>
          </python>
        </value>
        <output/>
        <stat>
          <exclude_from_stat/>
        </stat>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
      </prescribed>
    </scalar_field>
    <scalar_field rank="0" name="TurbulentDissipation_destruction_termProjection">
      <diagnostic>
        <algorithm name="scalar_galerkin_projection" material_phase_support="single" source_field_name="TurbulentDissipation_destruction_termCopy" source_field_type="scalar">
          <solver>
            <iterative_method name="cg"/>
            <preconditioner name="sor"/>
            <relative_error>
              <real_value rank="0">1e-10</real_value>
            </relative_error>
            <max_iterations>
              <integer_value rank="0">1000</integer_value>
            </max_iterations>
            <never_ignore_solver_failures/>
            <diagnostics>
              <monitors/>
            </diagnostics>
          </solver>
        </algorithm>
        <mesh name="ErrorMesh"/>
        <output/>
        <stat>
          <exclude_from_stat/>
        </stat>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
        <steady_state>
          <exclude_from_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <scalar_field rank="0" name="TurbulentDissipation_destruction_termError">
      <diagnostic>
        <algorithm name="scalar_difference" material_phase_support="single" source_field_1_name="TurbulentDissipation_destruction_termAnalytical" source_field_1_type="scalar" source_field_2_name="TurbulentDissipation_destruction_termProjection" source_field_2_type="scalar">
          <absolute_difference/>
        </algorithm>
        <mesh name="ErrorMesh"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <scalar_field rank="0" name="TurbulentDissipation_buoyancy_termCopy">
      <diagnostic>
        <algorithm name="scalar_python_diagnostic" material_phase_support="single">
          <string_value type="code" language="python" lines="20">E=state.scalar_fields["TurbulentDissipation_buoyancy_term"]

for n in range(field.node_count):
	field.set(n,E.node_val(n))</string_value>
        </algorithm>
        <mesh name="VelocityMesh"/>
        <output/>
        <stat>
          <exclude_from_stat/>
        </stat>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
        <steady_state>
          <exclude_from_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <scalar_field rank="0" name="TurbulentDissipation_buoyancy_termAnalytical">
      <prescribed>
        <mesh name="ErrorMesh"/>
        <value name="WholeMesh">
          <python>
            <string_value type="code" language="python" lines="20">def val(X,t):
   import mms_rans_p2p1_upw_keps_tools as k
   return k.B_eps(X)</string_value>
          </python>
        </value>
        <output/>
        <stat>
          <exclude_from_stat/>
        </stat>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
      </prescribed>
    </scalar_field>
    <scalar_field rank="0" name="TurbulentDissipation_buoyancy_termProjection">
      <diagnostic>
        <algorithm name="scalar_galerkin_projection" material_phase_support="single" source_field_name="TurbulentDissipation_buoyancy_termCopy" source_field_type="scalar">
          <solver>
            <iterative_method name="cg"/>
            <preconditioner name="sor"/>
            <relative_error>
              <real_value rank="0">1e-10</real_value>
            </relative_error>
            <max_iterations>
              <integer_value rank="0">1000</integer_value>
            </max_iterations>
            <never_ignore_solver_failures/>
            <diagnostics>
              <monitors/>
            </diagnostics>
          </solver>
        </algorithm>
        <mesh name="ErrorMesh"/>
        <output/>
        <stat>
          <exclude_from_stat/>
        </stat>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
        <steady_state>
          <exclude_from_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <scalar_field rank="0" name="TurbulentDissipation_buoyancy_termError">
      <diagnostic>
        <algorithm name="scalar_difference" material_phase_support="single" source_field_1_name="TurbulentDissipation_buoyancy_termAnalytical" source_field_1_type="scalar" source_field_2_name="TurbulentDissipation_buoyancy_termProjection" source_field_2_type="scalar">
          <absolute_difference/>
        </algorithm>
        <mesh name="ErrorMesh"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <scalar_field rank="0" name="TurbulentDissipationCopy">
      <diagnostic>
        <algorithm name="scalar_python_diagnostic" material_phase_support="single">
          <string_value type="code" language="python" lines="20">E=state.scalar_fields["TurbulentDissipation"]

for n in range(field.node_count):
	field.set(n,E.node_val(n))</string_value>
        </algorithm>
        <mesh name="VelocityMesh"/>
        <output/>
        <stat>
          <exclude_from_stat/>
        </stat>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
        <steady_state>
          <exclude_from_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <scalar_field rank="0" name="TurbulentDissipationAnalytical">
      <prescribed>
        <mesh name="ErrorMesh"/>
        <value name="WholeMesh">
          <python>
            <string_value type="code" language="python" lines="20">def val(X,t):
   import mms_rans_p2p1_upw_keps_tools as k
   return k.eps(X)</string_value>
          </python>
        </value>
        <output/>
        <stat>
          <exclude_from_stat/>
        </stat>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
      </prescribed>
    </scalar_field>
    <scalar_field rank="0" name="TurbulentDissipationProjection">
      <diagnostic>
        <algorithm name="scalar_galerkin_projection" material_phase_support="single" source_field_name="TurbulentDissipationCopy" source_field_type="scalar">
          <solver>
            <iterative_method name="cg"/>
            <preconditioner name="sor"/>
            <relative_error>
              <real_value rank="0">1e-10</real_value>
            </relative_error>
            <max_iterations>
              <integer_value rank="0">1000</integer_value>
            </max_iterations>
            <never_ignore_solver_failures/>
            <diagnostics>
              <monitors/>
            </diagnostics>
          </solver>
        </algorithm>
        <mesh name="ErrorMesh"/>
        <output/>
        <stat>
          <exclude_from_stat/>
        </stat>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
        <steady_state>
          <exclude_from_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <scalar_field rank="0" name="TurbulentDissipationError">
      <diagnostic>
        <algorithm name="scalar_difference" material_phase_support="single" source_field_1_name="TurbulentDissipationAnalytical" source_field_1_type="scalar" source_field_2_name="TurbulentDissipationProjection" source_field_2_type="scalar">
          <absolute_difference/>
        </algorithm>
        <mesh name="ErrorMesh"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <scalar_field rank="0" name="ScalarEddyViscosityCopy">
      <diagnostic>
        <algorithm name="scalar_python_diagnostic" material_phase_support="single">
          <string_value type="code" language="python" lines="20">E=state.scalar_fields["ScalarEddyViscosity"]

for n in range(field.node_count):
	field.set(n,E.node_val(n))</string_value>
        </algorithm>
        <mesh name="VelocityMesh"/>
        <output/>
        <stat>
          <exclude_from_stat/>
        </stat>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
        <steady_state>
          <exclude_from_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <scalar_field rank="0" name="ScalarEddyViscosityAnalytical">
      <prescribed>
        <mesh name="ErrorMesh"/>
        <value name="WholeMesh">
          <python>
            <string_value type="code" language="python" lines="20">def val(X,t):
   import mms_rans_p2p1_upw_keps_tools as k
   return k.EV(X)</string_value>
          </python>
        </value>
        <output/>
        <stat>
          <exclude_from_stat/>
        </stat>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
      </prescribed>
    </scalar_field>
    <scalar_field rank="0" name="ScalarEddyViscosityProjection">
      <diagnostic>
        <algorithm name="scalar_galerkin_projection" material_phase_support="single" source_field_name="ScalarEddyViscosityCopy" source_field_type="scalar">
          <solver>
            <iterative_method name="cg"/>
            <preconditioner name="sor"/>
            <relative_error>
              <real_value rank="0">1e-10</real_value>
            </relative_error>
            <max_iterations>
              <integer_value rank="0">1000</integer_value>
            </max_iterations>
            <never_ignore_solver_failures/>
            <diagnostics>
              <monitors/>
            </diagnostics>
          </solver>
        </algorithm>
        <mesh name="ErrorMesh"/>
        <output/>
        <stat>
          <exclude_from_stat/>
        </stat>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
        <steady_state>
          <exclude_from_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <scalar_field rank="0" name="ScalarEddyViscosityError">
      <diagnostic>
        <algorithm name="scalar_difference" material_phase_support="single" source_field_1_name="ScalarEddyViscosityAnalytical" source_field_1_type="scalar" source_field_2_name="ScalarEddyViscosityProjection" source_field_2_type="scalar">
          <absolute_difference/>
        </algorithm>
        <mesh name="ErrorMesh"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <vector_field rank="1" name="VelocityAnalytical">
      <prescribed>
        <mesh name="ErrorMesh"/>
        <value name="WholeMesh">
          <python>
            <string_value type="code" language="python" lines="20">def val(X,t):
        import mms_rans_p2p1_upw_keps_tools as k
        return k.velocity(X)</string_value>
          </python>
        </value>
        <output/>
        <stat>
          <include_in_stat/>
        </stat>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
      </prescribed>
    </vector_field>
    <vector_field rank="1" name="VelocityProjection">
      <diagnostic>
        <algorithm name="vector_galerkin_projection" material_phase_support="single" source_field_name="Velocity" source_field_type="vector">
          <solver>
            <iterative_method name="cg"/>
            <preconditioner name="sor"/>
            <relative_error>
              <real_value rank="0">1e-10</real_value>
            </relative_error>
            <max_iterations>
              <integer_value rank="0">1000</integer_value>
            </max_iterations>
            <never_ignore_solver_failures/>
            <diagnostics>
              <monitors/>
            </diagnostics>
          </solver>
        </algorithm>
        <mesh name="ErrorMesh"/>
        <output/>
        <stat>
          <include_in_stat/>
        </stat>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
        <steady_state>
          <exclude_from_steady_state/>
        </steady_state>
      </diagnostic>
    </vector_field>
    <vector_field rank="1" name="VelocityError">
      <diagnostic>
        <algorithm name="vector_difference" material_phase_support="single" source_field_1_name="VelocityProjection" source_field_1_type="vector" source_field_2_name="VelocityAnalytical" source_field_2_type="vector">
          <absolute_difference/>
        </algorithm>
        <mesh name="ErrorMesh"/>
        <output/>
        <stat>
          <include_in_stat/>
        </stat>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </vector_field>
  </material_phase>
</fluidity_options>
