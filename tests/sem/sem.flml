<?xml version='1.0' encoding='utf-8'?>
<fluidity_options>
  <simulation_name>
    <string_value lines="1">sem</string_value>
  </simulation_name>
  <problem_type>
    <string_value lines="1">fluids</string_value>
  </problem_type>
  <geometry>
    <dimension>
      <integer_value rank="0">3</integer_value>
    </dimension>
    <mesh name="CoordinateMesh">
      <from_file file_name="box">
        <format name="gmsh"/>
        <stat>
          <include_in_stat/>
        </stat>
      </from_file>
    </mesh>
    <mesh name="VelocityMesh">
      <from_mesh>
        <mesh name="CoordinateMesh"/>
        <stat>
          <exclude_from_stat/>
        </stat>
      </from_mesh>
    </mesh>
    <mesh name="PressureMesh">
      <from_mesh>
        <mesh name="CoordinateMesh"/>
        <stat>
          <exclude_from_stat/>
        </stat>
      </from_mesh>
    </mesh>
    <quadrature>
      <degree>
        <integer_value rank="0">4</integer_value>
      </degree>
      <surface_degree>
        <integer_value rank="0">5</integer_value>
      </surface_degree>
    </quadrature>
  </geometry>
  <io>
    <dump_format>
      <string_value>vtk</string_value>
    </dump_format>
    <dump_period>
      <constant>
        <real_value rank="0">0.0</real_value>
      </constant>
    </dump_period>
    <max_dump_file_count>
      <integer_value rank="0">2</integer_value>
    </max_dump_file_count>
    <output_mesh name="VelocityMesh"/>
    <stat/>
  </io>
  <timestepping>
    <current_time>
      <real_value rank="0">0.0</real_value>
    </current_time>
    <timestep>
      <real_value rank="0">0.1</real_value>
    </timestep>
    <finish_time>
      <real_value rank="0">0.1</real_value>
    </finish_time>
    <cpu_time_limit>
      <real_value rank="0">2.5E+5</real_value>
    </cpu_time_limit>
    <nonlinear_iterations>
      <integer_value rank="0">2</integer_value>
    </nonlinear_iterations>
  </timestepping>
  <physical_parameters/>
  <material_phase name="Air">
    <equation_of_state>
      <fluids>
        <linear>
          <reference_density>
            <real_value rank="0">1.204</real_value>
          </reference_density>
          <subtract_out_hydrostatic_level/>
        </linear>
      </fluids>
    </equation_of_state>
    <scalar_field rank="0" name="Pressure">
      <prognostic>
        <mesh name="PressureMesh"/>
        <spatial_discretisation>
          <continuous_galerkin/>
        </spatial_discretisation>
        <atmospheric_pressure>
          <real_value rank="0">1013250</real_value>
        </atmospheric_pressure>
        <scheme>
          <poisson_pressure_solution>
            <string_value lines="1">only first timestep</string_value>
          </poisson_pressure_solution>
          <use_projection_method/>
          <update_discretised_equation/>
        </scheme>
        <solver>
          <iterative_method name="cg"/>
          <preconditioner name="eisenstat"/>
          <relative_error>
            <real_value rank="0">1.0e-6</real_value>
          </relative_error>
          <absolute_error>
            <real_value rank="0">0.1e-7</real_value>
          </absolute_error>
          <max_iterations>
            <integer_value rank="0">1700</integer_value>
          </max_iterations>
          <never_ignore_solver_failures/>
          <diagnostics>
            <monitors/>
          </diagnostics>
        </solver>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
        <consistent_interpolation/>
      </prognostic>
    </scalar_field>
    <scalar_field rank="0" name="Density">
      <diagnostic>
        <algorithm name="Internal" material_phase_support="multiple"/>
        <mesh name="VelocityMesh"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <vector_field rank="1" name="Velocity">
      <prognostic>
        <mesh name="VelocityMesh"/>
        <equation name="LinearMomentum"/>
        <spatial_discretisation>
          <continuous_galerkin>
            <stabilisation>
              <no_stabilisation/>
            </stabilisation>
            <mass_terms>
              <lump_mass_matrix/>
            </mass_terms>
            <advection_terms/>
            <stress_terms>
              <stress_form/>
            </stress_terms>
            <les_model>
              <second_order>
                <smagorinsky_coefficient>
                  <real_value rank="0">0.1</real_value>
                </smagorinsky_coefficient>
                <length_scale_type>tensor</length_scale_type>
              </second_order>
            </les_model>
            <buoyancy/>
          </continuous_galerkin>
          <conservative_advection>
            <real_value rank="0">0.0</real_value>
          </conservative_advection>
        </spatial_discretisation>
        <temporal_discretisation>
          <theta>
            <real_value rank="0">0.5</real_value>
          </theta>
          <relaxation>
            <real_value rank="0">0.5</real_value>
          </relaxation>
        </temporal_discretisation>
        <solver>
          <iterative_method name="gmres">
            <restart>
              <integer_value rank="0">30</integer_value>
            </restart>
          </iterative_method>
          <preconditioner name="sor"/>
          <relative_error>
            <real_value rank="0">0.1e-7</real_value>
          </relative_error>
          <absolute_error>
            <real_value rank="0">0.1e-7</real_value>
          </absolute_error>
          <max_iterations>
            <integer_value rank="0">1000</integer_value>
          </max_iterations>
          <never_ignore_solver_failures/>
          <diagnostics>
            <monitors/>
          </diagnostics>
        </solver>
        <initial_condition name="WholeMesh">
          <constant>
            <real_value rank="1" dim1="dim" shape="3">0.0 0.0 0.0</real_value>
          </constant>
        </initial_condition>
        <boundary_conditions name="inlet">
          <surface_ids>
            <integer_value rank="1" shape="1">55</integer_value>
          </surface_ids>
          <type name="dirichlet">
            <align_bc_with_cartesian>
              <x_component>
                <synthetic_eddy_method>
                  <number_of_eddies>
                    <integer_value rank="0">1000</integer_value>
                  </number_of_eddies>
                  <turbulence_lengthscale>
                    <python>
                      <string_value type="code" language="python" lines="20">def val(X, t):
    znod=X[2]
    if (X[2]&gt;1.0):
        znod=2.0-X[2]
    z=[0.0, 0.01, 0.03, 0.05, 0.07, 0.09, 0.11, 0.13,\
            0.23, 0.41, 0.51, 0.61, 0.91, 0.99, 1.0]
    u=[0.0001, 0.027, 0.1368, 0.2219, 0.2632, 0.2743, 0.2773,\
            0.2822, 0.3344, 0.3739, 0.3766, 0.3742, 0.3564,\
            0.3507, 0.3507]
    vel=0.0
    for i in range(len(z)-1):
        if (znod&gt;=z[i] and znod&lt;=z[i+1]) :
            vel=u[i]+(znod-z[i])*((u[i+1]-u[i])/(z[i+1]-z[i]))
    return vel</string_value>
                    </python>
                  </turbulence_lengthscale>
                  <mean_profile>
                    <python>
                      <string_value type="code" language="python" lines="20">def val(X, t):
    znod=X[2]
    if (X[2]&gt;1.0):
        znod=2.0-X[2]
    z=[0.0, 0.01, 0.03, 0.05, 0.07, 0.09, 0.11,\
            0.13, 0.23, 0.51, 0.61, 0.91, 0.99, 1.0]
    u=[0.0, 3.904, 9.238, 11.82, 13.24, 14.13, 14.47,\
            15.21, 16.63, 18.54, 18.97, 19.93, 20.14, 20.14]
    vel=0.0
    for i in range(len(z)-1):
        if (znod&gt;=z[i] and znod&lt;=z[i+1]) :
            vel=u[i]+(znod-z[i])*((u[i+1]-u[i])/(z[i+1]-z[i]))
    return vel</string_value>
                    </python>
                  </mean_profile>
                  <Re_stresses_profile>
                    <python>
                      <string_value type="code" language="python" lines="20">def val(X, t):
    znod=X[2]
    if (X[2]&gt;1.0):
        znod=2.0-X[2]
    z=[0.0, 0.05, 0.1, 0.15,0.2, 0.25,0.3, 0.9,1.0]
    u=[0.0,0.0085,0.032,0.0675,0.096,0.0933,\
            0.069,0.0375,0.0365]
    vel=0.0
    for i in range(len(z)-1):
        if (znod&gt;=z[i] and znod&lt;=z[i+1]) :
            vel=u[i]+(znod-z[i])*((u[i+1]-u[i])/(z[i+1]-z[i]))
    return vel/2.0</string_value>
                    </python>
                  </Re_stresses_profile>
                </synthetic_eddy_method>
              </x_component>
              <y_component>
                <synthetic_eddy_method>
                  <number_of_eddies>
                    <integer_value rank="0">1000</integer_value>
                  </number_of_eddies>
                  <turbulence_lengthscale>
                    <python>
                      <string_value type="code" language="python" lines="20">def val(X, t):
    znod=X[2]
    if (X[2]&gt;1.0):
        znod=2.0-X[2]
    z=[0.0, 0.01, 0.03, 0.05, 0.07, 0.09, 0.11, 0.13,\
            0.23, 0.41, 0.51, 0.61, 0.91, 0.99, 1.0]
    u=[0.0001, 0.027, 0.1368, 0.2219, 0.2632, 0.2743, 0.2773,\
            0.2822, 0.3344, 0.3739, 0.3766, 0.3742, 0.3564,\
            0.3507, 0.3507]
    vel=0.0
    for i in range(len(z)-1):
        if (znod&gt;=z[i] and znod&lt;=z[i+1]) :
            vel=u[i]+(znod-z[i])*((u[i+1]-u[i])/(z[i+1]-z[i]))
    return vel</string_value>
                    </python>
                  </turbulence_lengthscale>
                  <mean_profile>
                    <constant>
                      <real_value rank="0">0.0</real_value>
                    </constant>
                  </mean_profile>
                  <Re_stresses_profile>
                    <python>
                      <string_value type="code" language="python" lines="20">def val(X, t):
    znod=X[2]
    if (X[2]&gt;1.0):
        znod=2.0-X[2]
    z=[0.0, 0.15,0.2,0.3,0.7,1.0]
    u=[0.0,0.02,0.02,0.004,0.001,0.0005]
    vel=0.0
    for i in range(len(z)-1):
        if (znod&gt;=z[i] and znod&lt;=z[i+1]) :
            vel=u[i]+(znod-z[i])*((u[i+1]-u[i])/(z[i+1]-z[i]))
    return vel</string_value>
                    </python>
                  </Re_stresses_profile>
                </synthetic_eddy_method>
              </y_component>
              <z_component>
                <synthetic_eddy_method>
                  <number_of_eddies>
                    <integer_value rank="0">1000</integer_value>
                  </number_of_eddies>
                  <turbulence_lengthscale>
                    <python>
                      <string_value type="code" language="python" lines="20">def val(X, t):
    znod=X[2]
    if (X[2]&gt;1.0):
        znod=2.0-X[2]
    z=[0.0, 0.01, 0.03, 0.05, 0.07, 0.09, 0.11, 0.13,\
            0.23, 0.41, 0.51, 0.61, 0.91, 0.99, 1.0]
    u=[0.0001, 0.027, 0.1368, 0.2219, 0.2632, 0.2743, 0.2773,\
            0.2822, 0.3344, 0.3739, 0.3766, 0.3742, 0.3564,\
            0.3507, 0.3507]
    vel=0.0
    for i in range(len(z)-1):
        if (znod&gt;=z[i] and znod&lt;=z[i+1]) :
            vel=u[i]+(znod-z[i])*((u[i+1]-u[i])/(z[i+1]-z[i]))
    return vel</string_value>
                    </python>
                  </turbulence_lengthscale>
                  <mean_profile>
                    <constant>
                      <real_value rank="0">0.0</real_value>
                    </constant>
                  </mean_profile>
                  <Re_stresses_profile>
                    <python>
                      <string_value type="code" language="python" lines="20">def val(X, t):
    znod=X[2]
    if (X[2]&gt;1.0):
        znod=2.0-X[2]
    z=[0.0,0.3,0.9,1.0]
    u=[0.0,0.015,0.012,0.0]
    vel=0.0
    for i in range(len(z)-1):
        if (znod&gt;=z[i] and znod&lt;=z[i+1]) :
            vel=u[i]+(znod-z[i])*((u[i+1]-u[i])/(z[i+1]-z[i]))
    return vel</string_value>
                    </python>
                  </Re_stresses_profile>
                </synthetic_eddy_method>
              </z_component>
            </align_bc_with_cartesian>
          </type>
        </boundary_conditions>
        <boundary_conditions name="wall">
          <surface_ids>
            <integer_value rank="1" shape="1">56</integer_value>
          </surface_ids>
          <type name="dirichlet">
            <align_bc_with_cartesian>
              <x_component>
                <constant>
                  <real_value rank="0">0.0</real_value>
                </constant>
              </x_component>
              <y_component>
                <constant>
                  <real_value rank="0">0.0</real_value>
                </constant>
              </y_component>
              <z_component>
                <constant>
                  <real_value rank="0">0.0</real_value>
                </constant>
              </z_component>
            </align_bc_with_cartesian>
          </type>
        </boundary_conditions>
        <boundary_conditions name="side">
          <surface_ids>
            <integer_value rank="1" shape="1">57</integer_value>
          </surface_ids>
          <type name="dirichlet">
            <align_bc_with_cartesian>
              <y_component>
                <constant>
                  <real_value rank="0">0.0</real_value>
                </constant>
              </y_component>
            </align_bc_with_cartesian>
          </type>
        </boundary_conditions>
        <boundary_conditions name="sky">
          <surface_ids>
            <integer_value rank="1" shape="1">58</integer_value>
          </surface_ids>
          <type name="dirichlet">
            <align_bc_with_cartesian>
              <x_component>
                <constant>
                  <real_value rank="0">0.0</real_value>
                </constant>
              </x_component>
              <y_component>
                <constant>
                  <real_value rank="0">0.0</real_value>
                </constant>
              </y_component>
              <z_component>
                <constant>
                  <real_value rank="0">0.0</real_value>
                </constant>
              </z_component>
            </align_bc_with_cartesian>
          </type>
        </boundary_conditions>
        <output/>
        <stat>
          <include_in_stat/>
          <previous_time_step>
            <exclude_from_stat/>
          </previous_time_step>
          <nonlinear_field>
            <exclude_from_stat/>
          </nonlinear_field>
        </stat>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
        <consistent_interpolation/>
      </prognostic>
    </vector_field>
  </material_phase>
</fluidity_options>
