<?xml version='1.0' encoding='UTF-8'?>
<testproblem>
  <name>Control volume, multi-material flow test</name>
  <owner userid="cwilson" />
  <tags>flml solidity</tags>
    <problem_definition length="vlong" nprocs="8">
    <command_line>mpiexec flredecomp -i 1 -o 8 -v -l landslide landslide_flredecomp &amp;&amp;
mpiexec fluidity -v0 -l landslide_flredecomp.flml </command_line>
  </problem_definition> 
  <variables>  
    <variable name="endtime" language="python">
from fluidity_tools import stat_parser as stat
endtime=stat("landslide.stat")["ElapsedTime"]["value"][-1]
    </variable>
    <variable name="endtimestep" language="python">
from fluidity_tools import stat_parser as stat
endtimestep=stat("landslide.stat")["dt"]["value"][-1]
    </variable>
    <variable name="mindivergence" language="python">
from fluidity_tools import stat_parser as stat
mindivergence=max(abs(stat("landslide.stat")["Water"]["ControlVolumeDivergence"]["min"]))
    </variable>
    <variable name="maxdivergence" language="python">
from fluidity_tools import stat_parser as stat
maxdivergence=max(stat("landslide.stat")["Water"]["ControlVolumeDivergence"]["max"])
    </variable>
     <variable name="vfracintwater0" language="python"> 
import fluidity_tools
vfracintwater0 = fluidity_tools.stat_parser("landslide.stat")['Water']['MaterialVolumeFraction']['integral'][0]
    </variable>    
     <variable name="vfracintwater" language="python"> 
import fluidity_tools
vfracintwater = fluidity_tools.stat_parser("landslide.stat")['Water']['MaterialVolumeFraction']['integral'][-1]
    </variable>    
     <variable name="vfracintdrop0" language="python"> 
import fluidity_tools
vfracintdrop0 = fluidity_tools.stat_parser("landslide.stat")['Landslide']['MaterialVolumeFraction']['integral'][0]
    </variable>    
     <variable name="vfracintdrop" language="python"> 
import fluidity_tools
vfracintdrop = fluidity_tools.stat_parser("landslide.stat")['Landslide']['MaterialVolumeFraction']['integral'][-1]
    </variable>    
     <variable name="mxvfracwater" language="python"> 
import fluidity_tools
mxvfracwater = min(fluidity_tools.stat_parser("landslide.stat")['Water']['MaterialVolumeFraction']['max'])
    </variable>    
     <variable name="mnvfracwater" language="python"> 
import fluidity_tools
mnvfracwater = min(fluidity_tools.stat_parser("landslide.stat")['Water']['MaterialVolumeFraction']['min'])
    </variable>    
    <variable name="mxvfracdrop" language="python">
import fluidity_tools
mxvfracdrop = max(fluidity_tools.stat_parser("landslide.stat")['Landslide']['MaterialVolumeFraction']['max'])
    </variable>
     <variable name="mnvfracdrop" language="python">
import fluidity_tools
mnvfracdrop = min(fluidity_tools.stat_parser("landslide.stat")['Landslide']['MaterialVolumeFraction']['min'])
    </variable>
     <variable name="mnvfracdrop2" language="python">
import fluidity_tools
mnvfracdrop2 = min(fluidity_tools.stat_parser("landslide.stat")['Landslide']['MaterialVolumeFraction']['min'])
    </variable>
     <variable name="mxvfracair" language="python"> 
import fluidity_tools
mxvfracair = max(fluidity_tools.stat_parser("landslide.stat")['Air']['MaterialVolumeFraction']['max'])
    </variable>    
     <variable name="mnvfracair" language="python"> 
import fluidity_tools
mnvfracair = min(fluidity_tools.stat_parser("landslide.stat")['Air']['MaterialVolumeFraction']['min'])
    </variable>    
    <variable name="mxvfracsum" language="python">
import fluidity_tools
mxvfracsum = max(fluidity_tools.stat_parser("landslide.stat")['Water']['SumMaterialVolumeFractions']['max'])
    </variable>
     <variable name="mnvfracsum" language="python">
import fluidity_tools
mnvfracsum = min(fluidity_tools.stat_parser("landslide.stat")['Water']['SumMaterialVolumeFractions']['min'])
    </variable>
  </variables>
    <pass_tests>  
    <test name="check end time" language="python">
assert endtime &gt; 19.9
    </test>
    <test name="check end timestep" language="python">
assert endtimestep &gt; 0.01
    </test>
    <test name="check water volume fraction was conserved" language="python">
print('conservation error = ', abs(vfracintwater0-vfracintwater))
assert abs(vfracintwater0-vfracintwater) &lt; 10*max(maxdivergence, mindivergence)
    </test>
    <test name="check droplet volume fraction was conserved" language="python">
print('conservation error = ', abs(vfracintdrop0-vfracintdrop))
assert abs(vfracintdrop0-vfracintdrop) &lt; 10*max(maxdivergence, mindivergence)
    </test>
    <test name="check that reasonable tolerance is being used to test conservation" language="python">
print('divergence = ', max(maxdivergence, mindivergence))
print('tolerance = ', 10*max(maxdivergence, mindivergence))
assert max(maxdivergence, mindivergence) &lt; 1.E-6
    </test>
    <test name="check minimum water volume fraction is 0.0" language="python">
assert abs(mnvfracwater) &lt; 1e-10
    </test>
    <test name="check maximum water volume fraction is 1.0" language="python">
assert abs(mxvfracwater-1.0) &lt; 1e-10
    </test>
    <test name="check minimum droplet volume fraction is 0.0" language="python">
assert abs(mnvfracdrop) &lt; 1e-6
    </test>
    <test name="check maximum droplet volume fraction is 1.0" language="python">
assert abs(mxvfracdrop-1.0) &lt; 1e-10
    </test>
    <test name="check minimum air volume fraction is 0.0" language="python">
assert abs(mnvfracair) &lt; 1e-10
    </test>
    <test name="check maximum air volume fraction is 1.0" language="python">
assert abs(mxvfracair-1.0) &lt; 1e-10
    </test>
    <test name="check minimum sum volume fraction is 0.0" language="python">
assert abs(mnvfracsum) &lt; 1e-10
    </test>
    <test name="check maximum sum volume fraction is 1.0" language="python">
assert abs(mxvfracsum-1.0) &lt; 1e-10
    </test>
  </pass_tests>
  <warn_tests>
  </warn_tests>
</testproblem>