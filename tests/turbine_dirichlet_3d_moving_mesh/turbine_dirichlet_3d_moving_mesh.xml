<?xml version='1.0' encoding='UTF-8'?>
<testproblem>
  <name>turbine_dirichlet_3d</name>
  <owner userid="sf1409"/>
  <problem_definition length="short" nprocs="1">
    <command_line>fluidity turbine_dirichlet_3d.flml</command_line>
  </problem_definition>
  <variables>
    <variable name="solvers_converged" language="python">
import os
files = os.listdir("./")
solvers_converged = not "matrixdump" in files and not "matrixdump.info" in files
    </variable>
    <variable name="velocity_block1" language="python">
import h5py
import numpy as np
f = h5py.File('turbine_3d.detectors.h5part', 'r')
det_id = f.attrs['right_block1%ids'][0]-1
velocity_block1 = np.array([f['/Step#{}/Water%Velocity%x'.format(i)][det_id] for i in range(len(f))])</variable>
    <variable name="velocity_block2" language="python">
import h5py
import numpy as np
f = h5py.File('turbine_3d.detectors.h5part', 'r')
det_id = f.attrs['left_block2%ids'][0]-1
velocity_block2 = np.array([f['/Step#{}/Water%Velocity%x'.format(i)][det_id] for i in range(len(f))])</variable>
    <variable name="area_block1" language="python">from fluidity_tools import stat_parser
s = stat_parser("turbine_3d.stat")
fs = s["Water"]["FreeSurface"]["min"]+s["Water"]["FreeSurface"]["max"]
area_block1 = fs + 1</variable>
    <variable name="area_block2" language="python">from fluidity_tools import stat_parser
s = stat_parser("turbine_3d.stat")
area_block2=1.0</variable>
    <variable name="time" language="python">from fluidity_tools import stat_parser
s = stat_parser("turbine_3d.stat")
time=s["ElapsedTime"]["value"]</variable>
    <variable name="dt" language="python">from fluidity_tools import stat_parser
s = stat_parser("turbine_3d.stat")
dt=s["dt"]["value"][-1]</variable>
  </variables>
  <pass_tests>
    <test name="Solvers converged" language="python">
      assert(solvers_converged)
    </test>
    <test name="flux_conservation" language="python"># Because dirichlet turbine model is explicit, we have a shift of -dt.
# In addition the mesh movement lags one timestep behind, so another shift -dt
import numpy
flux_l=[0.0,0.0]
flux_r=[0.0,0.0]
for i in range(2,area_block1.size):
    flux_l.append(area_block1[i-2]*velocity_block1[i])
    flux_r.append(area_block2*velocity_block2[i])
maxerr=0.0
for i in range(0,len(flux_l)):
    maxerr=max(maxerr,abs(flux_l[i]-flux_r[i]))
print(maxerr)
assert(maxerr&lt;1e-6)
</test>
    <test name="time" language="python">from math import cos
turbine_flux=velocity_block2
head=[]
# Note: the dirichlet turbine model is an explicit method, so -dt shift
for t in time:
   head.append(cos(3.1415*(t-dt))*0.05)
defined_flux=[]
for h in head:
   if abs(h)&lt;0.02:
       defined_flux.append(0.0)
   else:         
       defined_flux.append(-h*10)
assert(all(abs(defined_flux+velocity_block2)&lt;1e-5))</test>
  </pass_tests>
</testproblem>
