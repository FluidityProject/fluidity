<?xml version='1.0' encoding='utf-8'?>
<fluidity_options>
  <simulation_name>
    <string_value lines="1">add_src_directly_1d_2grp_hom_zerobc_eig_fv_A</string_value>
  </simulation_name>
  <problem_type>
    <string_value lines="1">fluids</string_value>
  </problem_type>
  <geometry>
    <dimension>
      <integer_value rank="0">1</integer_value>
    </dimension>
    <mesh name="CoordinateMesh">
      <from_file file_name="add_src_directly_1d_2grp_hom_zerobc_eig_fv_A">
        <format name="gmsh"/>
        <stat>
          <include_in_stat/>
        </stat>
      </from_file>
    </mesh>
    <mesh name="Flux1Mesh">
      <from_mesh>
        <mesh name="CoordinateMesh"/>
        <mesh_shape>
          <polynomial_degree>
            <integer_value rank="0">0</integer_value>
          </polynomial_degree>
        </mesh_shape>
        <mesh_continuity>
          <string_value>discontinuous</string_value>
        </mesh_continuity>
        <stat>
          <exclude_from_stat/>
        </stat>
      </from_mesh>
    </mesh>
    <mesh name="Flux2Mesh">
      <from_mesh>
        <mesh name="CoordinateMesh"/>
        <mesh_shape>
          <polynomial_degree>
            <integer_value rank="0">0</integer_value>
          </polynomial_degree>
        </mesh_shape>
        <mesh_continuity>
          <string_value>discontinuous</string_value>
        </mesh_continuity>
        <stat>
          <exclude_from_stat/>
        </stat>
      </from_mesh>
    </mesh>
    <mesh name="DGP0">
      <from_mesh>
        <mesh name="CoordinateMesh"/>
        <mesh_shape>
          <polynomial_degree>
            <integer_value rank="0">0</integer_value>
          </polynomial_degree>
        </mesh_shape>
        <mesh_continuity>
          <string_value>discontinuous</string_value>
        </mesh_continuity>
        <stat>
          <exclude_from_stat/>
        </stat>
      </from_mesh>
    </mesh>
    <mesh name="DGP1">
      <from_mesh>
        <mesh name="CoordinateMesh"/>
        <mesh_continuity>
          <string_value>discontinuous</string_value>
        </mesh_continuity>
        <stat>
          <exclude_from_stat/>
        </stat>
      </from_mesh>
    </mesh>
    <quadrature>
      <degree>
        <integer_value rank="0">2</integer_value>
      </degree>
    </quadrature>
  </geometry>
  <io>
    <dump_format>
      <string_value>vtk</string_value>
    </dump_format>
    <dump_period>
      <constant>
        <real_value rank="0">10000</real_value>
      </constant>
    </dump_period>
    <output_mesh name="DGP1"/>
    <stat/>
  </io>
  <timestepping>
    <current_time>
      <real_value rank="0">0.0</real_value>
    </current_time>
    <timestep>
      <real_value rank="0">1.0</real_value>
    </timestep>
    <finish_time>
      <real_value rank="0">1.0e+03</real_value>
    </finish_time>
    <steady_state>
      <tolerance>
        <real_value rank="0">1.0e-06</real_value>
        <infinity_norm/>
      </tolerance>
    </steady_state>
  </timestepping>
  <material_phase name="One">
    <vector_field rank="1" name="Velocity">
      <prescribed>
        <mesh name="CoordinateMesh"/>
        <value name="WholeMesh">
          <constant>
            <real_value rank="1" dim1="dim" shape="1">0.0</real_value>
          </constant>
        </value>
        <output/>
        <stat>
          <include_in_stat/>
        </stat>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
      </prescribed>
    </vector_field>
    <scalar_field rank="0" name="Flux1">
      <prognostic>
        <mesh name="Flux1Mesh"/>
        <equation name="AdvectionDiffusion"/>
        <spatial_discretisation>
          <finite_volume>
            <mass_terms>
              <exclude_mass_terms/>
            </mass_terms>
            <advection_terms>
              <exclude_advection_terms/>
            </advection_terms>
          </finite_volume>
          <conservative_advection>
            <real_value rank="0">0.0</real_value>
          </conservative_advection>
        </spatial_discretisation>
        <temporal_discretisation>
          <theta>
            <real_value rank="0">1.0</real_value>
          </theta>
        </temporal_discretisation>
        <solver>
          <iterative_method name="cg"/>
          <preconditioner name="sor"/>
          <relative_error>
            <real_value rank="0">1.0e-10</real_value>
          </relative_error>
          <max_iterations>
            <integer_value rank="0">1000</integer_value>
          </max_iterations>
          <never_ignore_solver_failures/>
          <diagnostics>
            <monitors/>
          </diagnostics>
        </solver>
        <initial_condition name="WholeMesh">
          <constant>
            <real_value rank="0">1.0</real_value>
          </constant>
        </initial_condition>
        <boundary_conditions name="left_and_right">
          <surface_ids>
            <integer_value rank="1" shape="2">1 2</integer_value>
          </surface_ids>
          <type name="dirichlet">
            <constant>
              <real_value rank="0">0.0</real_value>
            </constant>
          </type>
        </boundary_conditions>
        <tensor_field name="Diffusivity" rank="2">
          <prescribed>
            <value name="WholeMesh">
              <isotropic>
                <constant>
                  <real_value rank="0">1.25900000877523</real_value>
                </constant>
              </isotropic>
            </value>
            <output/>
            <particles>
              <exclude_from_particles/>
            </particles>
          </prescribed>
        </tensor_field>
        <scalar_field name="Source" rank="0">
          <diagnostic>
            <algorithm name="scalar_python_diagnostic" material_phase_support="multiple">
              <string_value type="code" language="python" lines="20">import numpy

coord = states["One"].vector_fields["Coordinate"]

flux2 = states["One"].scalar_fields["Flux2"]

oldflux1 = states["One"].scalar_fields["OldFlux1"]
oldflux2 = states["One"].scalar_fields["OldFlux2"]

eigen = states["One"].scalar_fields["Eigenvalue"]

sigs_2_to_1 = 0.0

nusigf_1 = 4.6798000E-03
nusigf_2 = 1.0246786E-01

chi_1 = 1.0
chi_2 = 0.0

eigen_val = eigen.node_val(1)

# fix for first iteration
if eigen_val &lt; 1.0e-10:
   
   eigen_val = 1.0

# zero field 
for n in range(field.node_count):
   
   field.set(n,0.0)

for ele in range(field.element_count):

   # form element transform object
   tr_ele = Transform(ele, coord)
   
   src_n = sigs_2_to_1*numpy.dot(tr_ele.shape_shape(field.mesh.shape, flux2.mesh.shape),flux2.ele_val(ele))
   
   src_n = src_n + (nusigf_1*chi_1/eigen_val)*numpy.dot(tr_ele.shape_shape(field.mesh.shape, oldflux1.mesh.shape),oldflux1.ele_val(ele))
    
   src_n = src_n + (nusigf_2*chi_1/eigen_val)*numpy.dot(tr_ele.shape_shape(field.mesh.shape, oldflux2.mesh.shape),oldflux2.ele_val(ele))
      
   field.addto(field.ele_nodes(ele),src_n)</string_value>
            </algorithm>
            <add_directly_to_rhs/>
            <output/>
            <stat/>
            <detectors>
              <include_in_detectors/>
            </detectors>
            <particles>
              <exclude_from_particles/>
            </particles>
          </diagnostic>
        </scalar_field>
        <scalar_field name="Absorption" rank="0">
          <prescribed>
            <value name="WholeMesh">
              <constant>
                <real_value rank="0">0.03429790000000002</real_value>
              </constant>
            </value>
            <output/>
            <stat/>
            <detectors>
              <exclude_from_detectors/>
            </detectors>
            <particles>
              <exclude_from_particles/>
            </particles>
          </prescribed>
        </scalar_field>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
        <consistent_interpolation/>
      </prognostic>
    </scalar_field>
    <scalar_field rank="0" name="Flux2">
      <prognostic>
        <mesh name="Flux2Mesh"/>
        <equation name="AdvectionDiffusion"/>
        <spatial_discretisation>
          <finite_volume>
            <mass_terms>
              <exclude_mass_terms/>
            </mass_terms>
            <advection_terms>
              <exclude_advection_terms/>
            </advection_terms>
          </finite_volume>
          <conservative_advection>
            <real_value rank="0">0.0</real_value>
          </conservative_advection>
        </spatial_discretisation>
        <temporal_discretisation>
          <theta>
            <real_value rank="0">1.0</real_value>
          </theta>
        </temporal_discretisation>
        <solver>
          <iterative_method name="cg"/>
          <preconditioner name="sor"/>
          <relative_error>
            <real_value rank="0">1.0e-10</real_value>
          </relative_error>
          <max_iterations>
            <integer_value rank="0">1000</integer_value>
          </max_iterations>
          <never_ignore_solver_failures/>
          <diagnostics>
            <monitors/>
          </diagnostics>
        </solver>
        <initial_condition name="WholeMesh">
          <constant>
            <real_value rank="0">1.0</real_value>
          </constant>
        </initial_condition>
        <boundary_conditions name="left_and_right">
          <surface_ids>
            <integer_value rank="1" shape="2">1 2</integer_value>
          </surface_ids>
          <type name="dirichlet">
            <constant>
              <real_value rank="0">0.0</real_value>
            </constant>
          </type>
        </boundary_conditions>
        <tensor_field name="Diffusivity" rank="2">
          <prescribed>
            <value name="WholeMesh">
              <isotropic>
                <constant>
                  <real_value rank="0">0.20909999847775204</real_value>
                </constant>
              </isotropic>
            </value>
            <output/>
            <particles>
              <exclude_from_particles/>
            </particles>
          </prescribed>
        </tensor_field>
        <scalar_field name="Source" rank="0">
          <diagnostic>
            <algorithm name="scalar_python_diagnostic" material_phase_support="multiple">
              <string_value type="code" language="python" lines="20">import numpy

coord = states["One"].vector_fields["Coordinate"]

flux1 = states["One"].scalar_fields["Flux1"]

oldflux1 = states["One"].scalar_fields["OldFlux1"]
oldflux2 = states["One"].scalar_fields["OldFlux2"]

eigen = states["One"].scalar_fields["Eigenvalue"]

sigs_1_to_2 = 2.6170000E-02

nusigf_1 = 4.6798000E-03
nusigf_2 = 1.0246786E-01

chi_1 = 1.0
chi_2 = 0.0

eigen_val = eigen.node_val(1)

# fix for first iteration
if eigen_val &lt; 1.0e-10:
   
   eigen_val = 1.0

# zero field 
for n in range(field.node_count):
   
   field.set(n,0.0)

for ele in range(field.element_count):

   # form element transform object
   tr_ele = Transform(ele, coord)
   
   src_n = sigs_1_to_2*numpy.dot(tr_ele.shape_shape(field.mesh.shape, flux1.mesh.shape),flux1.ele_val(ele))
   
   src_n = src_n + (nusigf_1*chi_2/eigen_val)*numpy.dot(tr_ele.shape_shape(field.mesh.shape, oldflux1.mesh.shape),oldflux1.ele_val(ele))
    
   src_n = src_n + (nusigf_2*chi_2/eigen_val)*numpy.dot(tr_ele.shape_shape(field.mesh.shape, oldflux2.mesh.shape),oldflux2.ele_val(ele))
      
   field.addto(field.ele_nodes(ele),src_n)</string_value>
            </algorithm>
            <add_directly_to_rhs/>
            <output/>
            <stat/>
            <detectors>
              <include_in_detectors/>
            </detectors>
            <particles>
              <exclude_from_particles/>
            </particles>
          </diagnostic>
        </scalar_field>
        <scalar_field name="Absorption" rank="0">
          <prescribed>
            <value name="WholeMesh">
              <constant>
                <real_value rank="0">0.073669499999999832</real_value>
              </constant>
            </value>
            <output/>
            <stat/>
            <detectors>
              <exclude_from_detectors/>
            </detectors>
            <particles>
              <exclude_from_particles/>
            </particles>
          </prescribed>
        </scalar_field>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
        <consistent_interpolation/>
      </prognostic>
    </scalar_field>
    <scalar_field rank="0" name="Flux1_ele">
      <diagnostic>
        <algorithm name="scalar_galerkin_projection" material_phase_support="single" source_field_name="Flux1" source_field_type="scalar"/>
        <mesh name="DGP0"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <scalar_field rank="0" name="Flux2_ele">
      <diagnostic>
        <algorithm name="scalar_galerkin_projection" material_phase_support="single" source_field_name="Flux2" source_field_type="scalar"/>
        <mesh name="DGP0"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <scalar_field rank="0" name="Eigenvalue">
      <diagnostic>
        <algorithm name="scalar_python_diagnostic" material_phase_support="multiple">
          <string_value type="code" language="python" lines="20">from math import sqrt

flux1_ele = states["One"].scalar_fields["Flux1_ele"]
flux2_ele = states["One"].scalar_fields["Flux2_ele"]

oldflux1_ele = states["One"].scalar_fields["OldFlux1_ele"]
oldflux2_ele = states["One"].scalar_fields["OldFlux2_ele"]

oldeigen = states["One"].scalar_fields["OldEigenvalue"]

oldeigen_val = oldeigen.node_val(1)

# fix for first iteration
if oldeigen_val &lt; 1.0e-10:
   
   oldeigen_val = 1.0

nusigf_1 = 4.6798000E-03
nusigf_2 = 1.0246786E-01

eigen_top = 0.0
eigen_bottom = 0.0

for n in range(field.node_count):
   
   flux1_n = flux1_ele.node_val(n)   
   flux2_n = flux2_ele.node_val(n)
   
   oldflux1_n = oldflux1_ele.node_val(n)   
   oldflux2_n = oldflux2_ele.node_val(n)
   
   # fix for first iteration
   if oldflux1_n &lt; 1.0e-10:
      
      oldflux1_n = 1.0
   
   # fix for first iteration
   if oldflux2_n &lt; 1.0e-10:
      
      oldflux2_n = 1.0
   
   eigen_top = eigen_top + (nusigf_1*flux1_n + nusigf_2*flux2_n)**2
   
   eigen_bottom = eigen_bottom + (nusigf_1*flux1_n + nusigf_2*flux2_n)*(nusigf_1*oldflux1_n + nusigf_2*oldflux2_n)
   
eigen = oldeigen_val*eigen_top/eigen_bottom

for n in range(field.node_count):
    
   field.set(n,eigen)</string_value>
        </algorithm>
        <mesh name="DGP0"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
  </material_phase>
</fluidity_options>
