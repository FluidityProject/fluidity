<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE testproblem SYSTEM "regressiontest.dtd">

<testproblem>
  <name>darcy_p0p1_test_cty_cv_pressBCinlet_advect_tracer_p0_steptwochannel_2d</name>
  <owner userid="btollit"/>
  <tags>flml darcy</tags>
  <problem_definition length="short" nprocs="1">
    <command_line>
fluidity darcy_p0p1_test_cty_cv_pressBCinlet_2d.flml
fluidity advect_tracer_cons_exp_weakbc_upwind_p0_2d.flml
    </command_line>
    <!-- Two dimensional two parallel channel 3 material case for darcy flow with one region and one material using p0p1_test_cty_cv element type testing the pressure gradient against analytic and the darcy velocity. First vel-press is solved then a second run advects a tracer using the checkpointed velocity. -->
  </problem_definition>
  <variables>
    <variable name="pressure_2d" language="python">
import vtktools
v = vtktools.vtu("darcy_p0p1_test_cty_cv_pressBCinlet_2d_1.vtu")
pressure_2d = v.GetScalarRange("Pressure")
    </variable>
    <variable name="max_inter_vel_2d" language="python">
import vtktools
v = vtktools.vtu("darcy_p0p1_test_cty_cv_pressBCinlet_2d_1.vtu")
max_inter_vel_2d = max(v.GetScalarRange("InterstitialVelocity"))
    </variable>
    <variable name="min_inter_vel_2d" language="python">
import vtktools
v = vtktools.vtu("darcy_p0p1_test_cty_cv_pressBCinlet_2d_1.vtu")
min_inter_vel_2d = min(v.GetScalarRange("InterstitialVelocity"))
    </variable>
    <variable name="integral_tracer_cons_exp_weakbc_upwind_2d" language="python">    
from fluidity_tools import stat_parser as stat
integral_tracer_cons_exp_weakbc_upwind_2d = stat("advect_tracer_cons_exp_weakbc_upwind_p0_2d.stat")["fluid"]["Tracer"]["integral"][-1]
    </variable>
    <variable name="max_tracer_cons_exp_weakbc_upwind_2d" language="python">    
from fluidity_tools import stat_parser as stat
max_tracer_cons_exp_weakbc_upwind_2d = stat("advect_tracer_cons_exp_weakbc_upwind_p0_2d.stat")["fluid"]["Tracer"]["max"][-1]
    </variable>
    <variable name="min_tracer_cons_exp_weakbc_upwind_2d" language="python">    
from fluidity_tools import stat_parser as stat
min_tracer_cons_exp_weakbc_upwind_2d = stat("advect_tracer_cons_exp_weakbc_upwind_p0_2d.stat")["fluid"]["Tracer"]["min"][-1]
    </variable>
  </variables>
  <pass_tests>
    <test name="change_P for 2D should equal domain_length*visc*phi*vel_BC/perm, check relative difference to be under tolerance 5.0e-08" language="python">
change_P = abs(max(pressure_2d) - min(pressure_2d))
visc = 1.0e-04
vel_BC = 10.0
phi = 0.5
perm = 1.0e-10
domain_length = 300.0
print 'Analytic pressure difference: ',domain_length*visc*phi*vel_BC/perm
print 'Solution relative error: ',abs((change_P - domain_length*visc*phi*vel_BC/perm)/(domain_length*visc*phi*vel_BC/perm))
assert abs((change_P - domain_length*visc*phi*vel_BC/perm)/(domain_length*visc*phi*vel_BC/perm)) &lt; 5.0e-08
    </test>
    <test name="Max interstitial velocity for 2d should equal 50.0, check relative difference to be under tolerance 1.0e-08" language="python">
analytic_vel = 50.0
print 'Solution relative error: ',abs((max_inter_vel_2d - analytic_vel)/analytic_vel)
assert abs((max_inter_vel_2d - analytic_vel)/analytic_vel) &lt; 1.0e-08
    </test>
    <test name="Min interstitial velocity for 2d should equal 12.5, check relative difference to be under tolerance 1.0e-08" language="python">
analytic_vel = 12.5
print 'Solution relative error: ',abs((min_inter_vel_2d - analytic_vel)/analytic_vel)
assert abs((min_inter_vel_2d - analytic_vel)/analytic_vel) &lt; 1.0e-08
    </test>
    <test name="Integral of tracer_cons_exp_weakbc_upwind for 2d such that both
channel tracer 75% way through domain with tolerance 9.0e-03" language="python">
analytic_int = 67500
print 'Solution relative error: ',abs((integral_tracer_cons_exp_weakbc_upwind_2d - analytic_int)/analytic_int)
assert abs((integral_tracer_cons_exp_weakbc_upwind_2d - analytic_int)/analytic_int) &lt; 9.0e-03
    </test>
    <test name="Max of tracer_cons_exp_weakbc_upwind for 2d should be 1.0, check with tolerance 1.1e-08" language="python">
analytic_int = 1.0
print 'Solution relative error: ',abs((max_tracer_cons_exp_weakbc_upwind_2d - analytic_int)/analytic_int)
assert abs((max_tracer_cons_exp_weakbc_upwind_2d - analytic_int)/analytic_int) &lt; 1.1e-08
    </test>
    <test name="Min of tracer_cons_exp_weakbc_upwind for 2d should be 0.0, check with tolerance 6.0e-04" language="python">
analytic_int = 0.0
print 'Solution absolute error: ',abs(min_tracer_cons_exp_weakbc_upwind_2d - analytic_int)
assert abs(min_tracer_cons_exp_weakbc_upwind_2d - analytic_int) &lt; 6.0e-04
    </test>
  </pass_tests>
  <warn_tests>
  </warn_tests>
</testproblem>
