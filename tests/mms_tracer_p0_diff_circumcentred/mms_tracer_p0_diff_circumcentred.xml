<?xml version='1.0' encoding='UTF-8'?>
<testproblem>
  <name>p0fv steady state diffusion equation spatial convergence test for the circumcentred masslumping scheme</name>
  <owner userid="skramer"/>
  <tags>flml parallel</tags>
  <problem_definition length="short" nprocs="1">
    <command_line>fluidity -v2 MMS_A.flml &gt; MMS_A.log; fluidity -v2 MMS_B.flml &gt; MMS_B.log; fluidity -v2 MMS_C.flml &gt; MMS_C.log; fluidity -v2 MMS_D.flml &gt; MMS_D.log; fluidity -v2 MMS_E.flml &gt; MMS_E.log</command_line>
  </problem_definition>
  <variables>
    <variable name="solvers_converged" language="python">
import os
files = os.listdir("./")
solvers_converged = not "matrixdump" in files and not "matrixdump.info" in files
    </variable>
    <variable name="ab_convergence_gal_stat" language="python">
from fluidity_tools import stat_parser as stat
from math import log

a_error = stat("MMS_A.stat")["Burgers"]["AbsoluteDifference"]["l2norm"][-1]
b_error = stat("MMS_B.stat")["Burgers"]["AbsoluteDifference"]["l2norm"][-1]

a_error_inf = stat("MMS_A.stat")["Burgers"]["AbsoluteDifference"]["max"][-1]
b_error_inf = stat("MMS_B.stat")["Burgers"]["AbsoluteDifference"]["max"][-1]

print(a_error)
print(b_error)

print(a_error_inf)
print(b_error_inf)

ab_ratio = a_error / b_error
ab_ratio_inf = a_error_inf / b_error_inf
ab_convergence_gal_stat = [log(ab_ratio, 2), log(ab_ratio_inf, 2)]
</variable>
    <variable name="bc_convergence_gal_stat" language="python">
from fluidity_tools import stat_parser as stat
from math import log

b_error = stat("MMS_B.stat")["Burgers"]["AbsoluteDifference"]["l2norm"][-1]
c_error = stat("MMS_C.stat")["Burgers"]["AbsoluteDifference"]["l2norm"][-1]

b_error_inf = stat("MMS_B.stat")["Burgers"]["AbsoluteDifference"]["max"][-1]
c_error_inf = stat("MMS_C.stat")["Burgers"]["AbsoluteDifference"]["max"][-1]

print(b_error)
print(c_error)

print(b_error_inf)
print(c_error_inf)

bc_ratio = b_error / c_error
bc_ratio_inf = b_error_inf / c_error_inf
bc_convergence_gal_stat = [log(bc_ratio, 2), log(bc_ratio_inf, 2)]
</variable>
    <variable name="cd_convergence_gal_stat" language="python">
from fluidity_tools import stat_parser as stat
from math import log

c_error = stat("MMS_C.stat")["Burgers"]["AbsoluteDifference"]["l2norm"][-1]
d_error = stat("MMS_D.stat")["Burgers"]["AbsoluteDifference"]["l2norm"][-1]

c_error_inf = stat("MMS_C.stat")["Burgers"]["AbsoluteDifference"]["max"][-1]
d_error_inf = stat("MMS_D.stat")["Burgers"]["AbsoluteDifference"]["max"][-1]

print(c_error)
print(d_error)

print(c_error_inf)
print(d_error_inf)

cd_ratio = c_error / d_error
cd_ratio_inf = c_error_inf / d_error_inf
cd_convergence_gal_stat = [log(cd_ratio, 2), log(cd_ratio_inf, 2)]
</variable>
    <variable name="de_convergence_gal_stat" language="python">
from fluidity_tools import stat_parser as stat
from math import log

d_error = stat("MMS_D.stat")["Burgers"]["AbsoluteDifference"]["l2norm"][-1]
e_error = stat("MMS_E.stat")["Burgers"]["AbsoluteDifference"]["l2norm"][-1]

d_error_inf = stat("MMS_D.stat")["Burgers"]["AbsoluteDifference"]["max"][-1]
e_error_inf = stat("MMS_E.stat")["Burgers"]["AbsoluteDifference"]["max"][-1]

print(d_error)
print(e_error)

print(d_error_inf)
print(e_error_inf)

de_ratio = d_error / e_error
de_ratio_inf = d_error_inf / e_error_inf
de_convergence_gal_stat = [log(de_ratio, 2), log(de_ratio_inf, 2)]
</variable>
    <variable name="a_finish_time" language="python">
from fluidity_tools import stat_parser as stat
a_finish_time = stat("MMS_A.stat")["ElapsedTime"]["value"][-1]
    </variable>
    <variable name="b_finish_time" language="python">
from fluidity_tools import stat_parser as stat
b_finish_time = stat("MMS_B.stat")["ElapsedTime"]["value"][-1]
    </variable>
    <variable name="c_finish_time" language="python">
from fluidity_tools import stat_parser as stat
c_finish_time = stat("MMS_C.stat")["ElapsedTime"]["value"][-1]
    </variable>
    <variable name="d_finish_time" language="python">
from fluidity_tools import stat_parser as stat
d_finish_time = stat("MMS_D.stat")["ElapsedTime"]["value"][-1]
    </variable>
    <variable name="e_finish_time" language="python">
from fluidity_tools import stat_parser as stat
e_finish_time = stat("MMS_E.stat")["ElapsedTime"]["value"][-1]
    </variable>
  </variables>
  <pass_tests>
    <test name="Solvers converged" language="python">
      assert(solvers_converged)
    </test>
    <test name="ab_convergence_stat: L2 &gt; 0.9" language="python">
assert(ab_convergence_gal_stat[0] &gt; 0.9)
    </test>
    <test name="bc_convergence_stat: L2 &gt; 0.9" language="python">
assert(bc_convergence_gal_stat[0] &gt; 0.9)
    </test>
    <test name="cd_convergence_stat: L2 &gt; 0.9" language="python">
assert(cd_convergence_gal_stat[0] &gt; 0.9)
    </test>
    <test name="de_convergence_stat: L2 &gt; 0.9" language="python">
assert(de_convergence_gal_stat[0] &gt; 0.9)
    </test>
    <test name="checking A finished in less than 4.0" language="python">
assert(a_finish_time-4.0 &lt; 1.E-10)
    </test>
    <test name="checking B finished in less than 4.0" language="python">
assert(b_finish_time-4.0 &lt; 1.E-10)
    </test>
    <test name="checking C finished in less than 4.0" language="python">
assert(c_finish_time-4.0 &lt; 1.E-10)
    </test>
    <test name="checking D finished in less than 4.0" language="python">
assert(d_finish_time-4.0 &lt; 1.E-10)
    </test>
    <test name="checking E finished in less than 4.0" language="python">
assert(e_finish_time-4.0 &lt; 1.E-10)
    </test>
  </pass_tests>
  <warn_tests>
  </warn_tests>
</testproblem>
