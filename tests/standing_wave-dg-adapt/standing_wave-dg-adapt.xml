<?xml version='1.0' encoding='utf-8'?>
<testproblem>
  <name>Standing free surface wave in channel using P1DG-P2 and mesh adaptivity.</name>
  <owner userid="skramer"/>
  <tags>flml</tags>
  <problem_definition length="short" nprocs="1">
    <command_line>fluidity -v3 -l  standing_wave_adapt.flml</command_line>
  </problem_definition>
  <variables>
    <variable name="solvers_converged" language="python">import os
files = os.listdir("./")
solvers_converged = not "matrixdump" in files and not "matrixdump.info" in files</variable>
    <variable name="max_pressure_diff_left" language="python">import h5py
import numpy as np
det=h5py.File('standing_wave.detectors.h5part', 'r')
lb_id = det.attrs['LeftBottom%ids'][0]-1
lt_id = det.attrs['LeftTop%ids'][0]-1
plb=np.asarray([det[f'/Step#{n}/water%Pressure'][lb_id] for n in range(len(det))])
plt=np.asarray([det[f'/Step#{n}/water%Pressure'][lt_id] for n in range(len(det))])
g=9.81
max_pressure_diff_left=abs(plb-plt).max()/g</variable>
    <variable name="max_pressure_diff_right" language="python">import h5py
import numpy as np
det=h5py.File('standing_wave.detectors.h5part', 'r')
rb_id = det.attrs['RightBottom%ids'][0]-1
rt_id = det.attrs['RightTop%ids'][0]-1
prb=np.asarray([det[f'/Step#{n}/water%Pressure'][rb_id] for n in range(len(det))])
prt=np.asarray([det[f'/Step#{n}/water%Pressure'][rt_id] for n in range(len(det))])
g=9.81
max_pressure_diff_right=abs(prb-prt).max()/g</variable>
    <variable name="max_pressure_diff_middle" language="python">import h5py
import numpy as np
det=h5py.File('standing_wave.detectors.h5part', 'r')
mb_id = det.attrs['MiddleBottom%ids'][0]-1
mt_id = det.attrs['MiddleTop%ids'][0]-1
pmb=np.asarray([det[f'/Step#{n}/water%Pressure'][mb_id] for n in range(len(det))])
pmt=np.asarray([det[f'/Step#{n}/water%Pressure'][mt_id] for n in range(len(det))])
g=9.81
max_pressure_diff_middle=abs(pmb-pmt).max()/g</variable>
    <variable name="fs_left" language="python">import h5py
import numpy as np
det=h5py.File('standing_wave.detectors.h5part', 'r')
lt_id = det.attrs['LeftTop%ids'][0]-1
fsl=np.asarray([det[f'/Step#{n}/water%FreeSurface'][lt_id] for n in range(len(det))])
fs_left={}
fs_left['min']=fsl.min()
fs_left['min_time']=det[f'Step#{fsl.argmin()}'].attrs['time'][0]
fs_left['end_value']=fsl[-1]</variable>
    <variable name="fs_right" language="python">import h5py
import numpy as np
det=h5py.File('standing_wave.detectors.h5part', 'r')
rt_id = det.attrs['RightTop%ids'][0]-1
fsr=np.asarray([det[f'/Step#{n}/water%FreeSurface'][rt_id] for n in range(len(det))])
fs_right={}
fs_right['max']=fsr.max()
fs_right['max_time']=det[f'Step#{fsr.argmax()}'].attrs['time'][0]
fs_right['end_value']=fsr[-1]</variable>
    <variable name="fs_integral_max" language="python">import fluidity_tools
stat=fluidity_tools.stat_parser('standing_wave.stat');
fsi=stat['water']['FreeSurface']['surface_integral%horizontal_integral']
fs_integral_max=abs(fsi).max()<comment>Horizontal integral of free surface should be zero</comment></variable>
    <variable name="volume_integral_change" language="python">import fluidity_tools
stat=fluidity_tools.stat_parser('standing_wave.stat');
volume=-stat['water']['GravityDirection%3']['integral']
volume_integral_change=abs(volume-1.e14).max()</variable>
  </variables>
  <pass_tests>
    <test name="Solvers converged" language="python">assert(solvers_converged)</test>
    <test name="pressure_diff_left" language="python">assert(max_pressure_diff_left&lt;0.005)</test>
    <test name="pressure_diff_right" language="python">assert(max_pressure_diff_right&lt;0.005)</test>
    <test name="pressure_diff_middle" language="python">assert(max_pressure_diff_middle&lt;0.005)</test>
    <test name="fs_left_min" language="python">assert(fs_left['min']&lt;-0.95)</test>
    <test name="fs_left_min_time" language="python">assert abs(fs_left['min_time']-1e4)&lt;200</test>
    <test name="fs_end_value" language="python">assert abs(fs_left['end_value']-1.0)&lt;0.2</test>
    <test name="fs_right_max" language="python">assert(fs_right['max']&gt;-0.95)</test>
    <test name="fs_right_max_time" language="python">assert abs(fs_right['max_time']-1e4)&lt;200</test>
    <test name="fs_end_value" language="python">assert abs(fs_right['end_value']+1.0)&lt;0.2</test>
    <test name="fs_integral_max_zero" language="python">assert fs_integral_max&lt;5e-4 * 1e9</test>
    <test name="volume_integral_change_zero" language="python">assert volume_integral_change&lt;1000<comment>We're not actually moving the mesh. So this better pass! If you do move the mesh, you will need to go to P2 coordinates to avoid a remap from P2 free surface to mesh movement, to make this test pass.</comment></test>
  </pass_tests>
  <warn_tests/>
</testproblem>
