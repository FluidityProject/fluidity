<?xml version="1.0" encoding="UTF-8" ?>

<testproblem>
  <name>Control volume, multi-material flow test</name>
  <owner userid="cwilson"/>
  <tags>flml solidity</tags>
    <problem_definition length="short" nprocs="1">
    <command_line>fluidity -v2 -l channel_flow_input.flml </command_line>
  </problem_definition>  
  <variables>  
    <variable name="solvers_converged" language="python">
import os
files = os.listdir("./")
solvers_converged = not "matrixdump" in files and not "matrixdump.info" in files
    </variable>
     <variable name="mxvfrac0" language="python"> 
import fluidity_tools
mxvfrac0 = fluidity_tools.stat_parser("channel_flow.stat")['Water']['Tracer']['max'][0]
    </variable>    
     <variable name="mnvfrac0" language="python"> 
import fluidity_tools
mnvfrac0 = fluidity_tools.stat_parser("channel_flow.stat")['Water']['Tracer']['min'][0]
    </variable>    
    <variable name="mxvfrac" language="python">
import fluidity_tools
mxvfrac = fluidity_tools.stat_parser("channel_flow.stat")['Water']['Tracer']['max'][-1]
    </variable>
     <variable name="mnvfrac" language="python">
import fluidity_tools
mnvfrac = fluidity_tools.stat_parser("channel_flow.stat")['Water']['Tracer']['min'][-1]
    </variable>
    <variable name="tracerfarbehindfront" language="python">
import h5py
f = h5py.File('channel_flow.detectors.h5part', 'r')
det_id = f.attrs['15a%ids'][0]-1
tracerfarbehindfront = f['/Step#{}/Water%Tracer'.format(len(f)-1)][det_id]
    </variable>
    <variable name="tracerbehindfront" language="python">
import h5py
f = h5py.File('channel_flow.detectors.h5part', 'r')
det_id = f.attrs['16%ids'][0]-1
tracerbehindfront = f['/Step#{}/Water%Tracer'.format(len(f)-1)][det_id]
    </variable>
     <variable name="tracerfrontfront" language="python">
import h5py
f = h5py.File('channel_flow.detectors.h5part', 'r')
det_id = f.attrs['17%ids'][0]-1
tracerfrontfront = f['/Step#{}/Water%Tracer'.format(len(f)-1)][det_id]
    </variable>
     <variable name="tracerfarfrontfront" language="python">
import h5py
f = h5py.File('channel_flow.detectors.h5part', 'r')
det_id = f.attrs['17a%ids'][0]-1
tracerfarfrontfront = f['/Step#{}/Water%Tracer'.format(len(f)-1)][det_id]
    </variable>
    <variable name="mxvelocity" language="python">
import fluidity_tools
mxvelocity = fluidity_tools.stat_parser("channel_flow.stat")['Water']['Velocity%magnitude']['max'][-1]
    </variable>    
    <variable name="mxcfl" language="python">
import fluidity_tools
mxcfl = fluidity_tools.stat_parser("channel_flow.stat")['Water']['ControlVolumeCFLNumber']['max'][-1]
    </variable>    
    <variable name="mncfl" language="python">
import fluidity_tools
mncfl = fluidity_tools.stat_parser("channel_flow.stat")['Water']['ControlVolumeCFLNumber']['min'][-1]
    </variable>    
  </variables>
    <pass_tests>  
      <test name="Solvers converged" language="python">
        assert(solvers_converged)
      </test>
    <test name="check minimum volume fraction is 0.0" language="python">
   assert abs(mnvfrac) &lt; 1e-10
    </test>
    <test name="check maximum volume fraction is 1.0" language="python">
   assert abs(mxvfrac-1.0) &lt; 1e-10
    </test>
    <test name="check volume fraction far in front of front is 0.0" language="python">
   assert abs(tracerfarfrontfront) &lt; 1e-7
    </test>
    <test name="check volume fraction far behind front is 1.0" language="python">
   assert abs(tracerfarbehindfront-1.0) &lt; 1e-7
    </test>
    <test name="check volume fraction in front of front is 0.0 (relaxed for simplex elements)" language="python">
   assert abs(tracerfrontfront) &lt; 1e-1
    </test>
    <test name="check volume fraction behind front is 1.0 (relaxed for simplex elements)" language="python">
   assert abs(tracerbehindfront-1.0) &lt; 1e-2
    </test>
    <test name="check initial minimum volume fraction is 0.0" language="python">
   assert abs(mnvfrac0) &lt; 1e-10
    </test>
    <test name="check initial maximum volume fraction is 1.0" language="python">
   assert abs(mxvfrac0-1.0) &lt; 1e-10
    </test>
    <test name="check maximum speed is 1.0" language="python">
	assert abs(mxvelocity-1.0) &lt; 1e-10
    </test>    
    <test name="check maximum cv cfl" language="python">
      assert abs(mxcfl-2.4) &lt; 1e-10
    </test>    
    <test name="check minimum cv cfl" language="python">
      assert abs(mncfl-1.0666666667) &lt; 1e-10
    </test>    
  </pass_tests>
  <warn_tests>
  </warn_tests>
</testproblem>
