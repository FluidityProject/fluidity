<?xml version='1.0' encoding='utf-8'?>
<fluidity_options>
  <simulation_name>
    <string_value lines="1">MMS_X</string_value>
  </simulation_name>
  <problem_type>
    <string_value lines="1">fluids</string_value>
  </problem_type>
  <geometry>
    <dimension>
      <integer_value rank="0">2</integer_value>
    </dimension>
    <mesh name="CoordinateMesh">
      <from_file file_name="src/MMS_X">
        <format name="gmsh"/>
        <stat>
          <include_in_stat/>
        </stat>
      </from_file>
    </mesh>
    <mesh name="VelocityMesh">
      <from_mesh>
        <mesh name="CoordinateMesh"/>
        <mesh_shape>
          <polynomial_degree>
            <integer_value rank="0">2</integer_value>
          </polynomial_degree>
        </mesh_shape>
        <stat>
          <exclude_from_stat/>
        </stat>
      </from_mesh>
    </mesh>
    <mesh name="PressureMesh">
      <from_mesh>
        <mesh name="CoordinateMesh"/>
        <mesh_shape>
          <polynomial_degree>
            <integer_value rank="0">1</integer_value>
          </polynomial_degree>
        </mesh_shape>
        <stat>
          <exclude_from_stat/>
        </stat>
      </from_mesh>
    </mesh>
    <mesh name="ErrorMesh">
      <from_mesh>
        <mesh name="CoordinateMesh"/>
        <mesh_shape>
          <polynomial_degree>
            <integer_value rank="0">4</integer_value>
          </polynomial_degree>
        </mesh_shape>
        <mesh_continuity>
          <string_value>continuous</string_value>
        </mesh_continuity>
        <stat>
          <exclude_from_stat/>
        </stat>
      </from_mesh>
    </mesh>
    <quadrature>
      <degree>
        <integer_value rank="0">8</integer_value>
      </degree>
    </quadrature>
  </geometry>
  <io>
    <dump_format>
      <string_value>vtk</string_value>
    </dump_format>
    <dump_period>
      <constant>
        <real_value rank="0">1000.0</real_value>
      </constant>
    </dump_period>
    <output_mesh name="VelocityMesh"/>
    <checkpointing>
      <checkpoint_period_in_dumps>
        <integer_value rank="0">1000</integer_value>
      </checkpoint_period_in_dumps>
      <checkpoint_at_end/>
    </checkpointing>
    <stat/>
  </io>
  <timestepping>
    <current_time>
      <real_value rank="0">0.0</real_value>
    </current_time>
    <timestep>
      <real_value rank="0">999.9</real_value>
    </timestep>
    <finish_time>
      <real_value rank="0">1000.0</real_value>
    </finish_time>
    <nonlinear_iterations>
      <integer_value rank="0">2</integer_value>
      <tolerance>
        <real_value rank="0">1.0e-9</real_value>
        <infinity_norm/>
      </tolerance>
    </nonlinear_iterations>
    <steady_state>
      <tolerance>
        <real_value rank="0">1.E-6</real_value>
        <infinity_norm/>
      </tolerance>
    </steady_state>
  </timestepping>
  <material_phase name="Fluid">
    <equation_of_state>
      <fluids>
        <linear>
          <reference_density>
            <real_value rank="0">2.5</real_value>
          </reference_density>
        </linear>
      </fluids>
    </equation_of_state>
    <scalar_field rank="0" name="Pressure">
      <prognostic>
        <mesh name="PressureMesh"/>
        <spatial_discretisation>
          <continuous_galerkin>
            <remove_stabilisation_term/>
          </continuous_galerkin>
        </spatial_discretisation>
        <scheme>
          <poisson_pressure_solution>
            <string_value lines="1">never</string_value>
          </poisson_pressure_solution>
          <use_projection_method/>
        </scheme>
        <solver>
          <iterative_method name="gmres">
            <restart>
              <integer_value rank="0">30</integer_value>
            </restart>
          </iterative_method>
          <preconditioner name="sor"/>
          <relative_error>
            <real_value rank="0">1.E-7</real_value>
          </relative_error>
          <max_iterations>
            <integer_value rank="0">1000</integer_value>
          </max_iterations>
          <remove_null_space/>
          <never_ignore_solver_failures/>
          <diagnostics>
            <monitors/>
          </diagnostics>
        </solver>
        <output>
          <include_previous_time_step/>
        </output>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
        <consistent_interpolation/>
      </prognostic>
    </scalar_field>
    <scalar_field rank="0" name="Density">
      <diagnostic>
        <algorithm name="Internal" material_phase_support="multiple"/>
        <mesh name="VelocityMesh"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <vector_field rank="1" name="Velocity">
      <prognostic>
        <mesh name="VelocityMesh"/>
        <equation name="LinearMomentum"/>
        <spatial_discretisation>
          <continuous_galerkin>
            <stabilisation>
              <no_stabilisation/>
            </stabilisation>
            <mass_terms>
              <lump_mass_matrix>
                <use_submesh/>
              </lump_mass_matrix>
            </mass_terms>
            <advection_terms/>
            <stress_terms>
              <stress_form/>
            </stress_terms>
            <les_model>
              <second_order>
                <smagorinsky_coefficient>
                  <real_value rank="0">888.8</real_value>
                </smagorinsky_coefficient>
                <length_scale_type>scalar</length_scale_type>
                <tensor_field rank="2" name="EddyViscosity">
                  <diagnostic>
                    <algorithm name="Internal" material_phase_support="multiple"/>
                    <mesh name="VelocityMesh"/>
                    <output/>
                    <stat>
                      <include_in_stat/>
                    </stat>
                    <particles>
                      <exclude_from_particles/>
                    </particles>
                    <mass_matrix>
                      <use_consistent_mass_matrix/>
                    </mass_matrix>
                  </diagnostic>
                </tensor_field>
              </second_order>
            </les_model>
            <buoyancy/>
          </continuous_galerkin>
          <conservative_advection>
            <real_value rank="0">0.0</real_value>
          </conservative_advection>
        </spatial_discretisation>
        <temporal_discretisation>
          <theta>
            <real_value rank="0">1.0</real_value>
          </theta>
          <relaxation>
            <real_value rank="0">0.5</real_value>
          </relaxation>
        </temporal_discretisation>
        <solver>
          <iterative_method name="gmres">
            <restart>
              <integer_value rank="0">30</integer_value>
            </restart>
          </iterative_method>
          <preconditioner name="sor"/>
          <relative_error>
            <real_value rank="0">1.E-7</real_value>
          </relative_error>
          <max_iterations>
            <integer_value rank="0">1000</integer_value>
          </max_iterations>
          <never_ignore_solver_failures/>
          <diagnostics>
            <monitors/>
          </diagnostics>
        </solver>
        <initial_condition name="WholeMesh">
          <constant>
            <real_value rank="1" dim1="dim" shape="2">0.0 0.0</real_value>
          </constant>
        </initial_condition>
        <boundary_conditions name="all_sides">
          <surface_ids>
            <integer_value rank="1" shape="1">1</integer_value>
          </surface_ids>
          <type name="dirichlet">
            <align_bc_with_cartesian>
              <x_component>
                <python>
                  <string_value type="code" language="python" lines="20">def val(X,t):
   import mms_les_second_order_p2p1_tools as tools
   return tools.u(X)</string_value>
                </python>
              </x_component>
              <y_component>
                <python>
                  <string_value type="code" language="python" lines="20">def val(X,t):
   import mms_les_second_order_p2p1_tools as tools
   return tools.v(X)</string_value>
                </python>
              </y_component>
            </align_bc_with_cartesian>
          </type>
        </boundary_conditions>
        <tensor_field name="Viscosity" rank="2">
          <prescribed>
            <value name="WholeMesh">
              <anisotropic_asymmetric>
                <constant>
                  <real_value symmetric="false" rank="2" dim1="dim" dim2="dim" shape="2 2">0.7 0.7 0.7 0.7</real_value>
                </constant>
              </anisotropic_asymmetric>
            </value>
            <output/>
            <particles>
              <exclude_from_particles/>
            </particles>
          </prescribed>
        </tensor_field>
        <vector_field name="Source" rank="1">
          <prescribed>
            <value name="WholeMesh">
              <python>
                <string_value type="code" language="python" lines="20">def val(X,t):
   import mms_les_second_order_p2p1_tools as tools
   density = tools.rho(X)
   forcing_velocity = tools.forcing_velocity(X)
   # Remember to divide through by density here
   # because we multiply through by Density in
   # Momentum_CG.F90.
   return (forcing_velocity[0]/density, forcing_velocity[1]/density)</string_value>
              </python>
            </value>
            <output/>
            <stat>
              <include_in_stat/>
            </stat>
            <detectors>
              <exclude_from_detectors/>
            </detectors>
            <particles>
              <exclude_from_particles/>
            </particles>
          </prescribed>
        </vector_field>
        <output>
          <include_previous_time_step/>
        </output>
        <stat>
          <include_in_stat/>
          <previous_time_step>
            <exclude_from_stat/>
          </previous_time_step>
          <nonlinear_field>
            <exclude_from_stat/>
          </nonlinear_field>
        </stat>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
        <consistent_interpolation/>
      </prognostic>
    </vector_field>
    <scalar_field rank="0" name="PressureAnalytical">
      <prescribed>
        <mesh name="PressureMesh"/>
        <value name="WholeMesh">
          <python>
            <string_value type="code" language="python" lines="20">def val(X,t):
   import mms_les_second_order_p2p1_tools as tools
   return tools.p(X)</string_value>
          </python>
        </value>
        <output/>
        <stat/>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
      </prescribed>
    </scalar_field>
    <scalar_field rank="0" name="PressureError">
      <diagnostic>
        <algorithm name="scalar_difference" material_phase_support="single" source_field_1_name="PressureRepinned" source_field_1_type="scalar" source_field_2_name="PressureAnalytical" source_field_2_type="scalar">
          <absolute_difference/>
        </algorithm>
        <mesh name="PressureMesh"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <scalar_field rank="0" name="CFLNumber">
      <diagnostic>
        <algorithm name="Internal" material_phase_support="multiple"/>
        <mesh name="VelocityMesh"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <scalar_field rank="0" name="PressureRepinned">
      <diagnostic>
        <algorithm name="subtract_point_value" material_phase_support="single" source_field_name="Pressure" source_field_type="scalar">
          <coordinates>
            <real_value rank="1" dim1="dim" shape="2">0. 0.</real_value>
          </coordinates>
        </algorithm>
        <mesh name="PressureMesh"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <vector_field rank="1" name="VelocityAnalytical">
      <prescribed>
        <mesh name="ErrorMesh"/>
        <value name="WholeMesh">
          <python>
            <string_value type="code" language="python" lines="20">def val(X,t):
   import mms_les_second_order_p2p1_tools as tools
   return tools.velocity(X)</string_value>
          </python>
        </value>
        <output/>
        <stat>
          <include_in_stat/>
        </stat>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
      </prescribed>
    </vector_field>
    <vector_field rank="1" name="VelocityProjection">
      <diagnostic>
        <algorithm name="vector_galerkin_projection" material_phase_support="single" source_field_name="Velocity" source_field_type="vector">
          <solver>
            <iterative_method name="cg"/>
            <preconditioner name="sor"/>
            <relative_error>
              <real_value rank="0">1e-10</real_value>
            </relative_error>
            <max_iterations>
              <integer_value rank="0">1000</integer_value>
            </max_iterations>
            <never_ignore_solver_failures/>
            <diagnostics>
              <monitors/>
            </diagnostics>
          </solver>
        </algorithm>
        <mesh name="ErrorMesh"/>
        <output/>
        <stat>
          <include_in_stat/>
        </stat>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
        <steady_state>
          <exclude_from_steady_state/>
        </steady_state>
      </diagnostic>
    </vector_field>
    <vector_field rank="1" name="VelocityError">
      <diagnostic>
        <algorithm name="vector_difference" material_phase_support="single" source_field_1_name="VelocityProjection" source_field_1_type="vector" source_field_2_name="VelocityAnalytical" source_field_2_type="vector">
          <absolute_difference/>
        </algorithm>
        <mesh name="ErrorMesh"/>
        <output/>
        <stat>
          <include_in_stat/>
        </stat>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </vector_field>
    <tensor_field rank="2" name="EddyViscosityAnalytical">
      <prescribed>
        <mesh name="VelocityMesh"/>
        <value name="WholeMesh">
          <anisotropic_asymmetric>
            <python>
              <string_value type="code" language="python" lines="20">def val(X,t):
   import mms_les_second_order_p2p1_tools as tools
   return [[tools.nu_T(X), tools.nu_T(X)],
           [tools.nu_T(X), tools.nu_T(X)]]</string_value>
            </python>
          </anisotropic_asymmetric>
        </value>
        <output/>
        <particles>
          <exclude_from_particles/>
        </particles>
      </prescribed>
    </tensor_field>
    <tensor_field rank="2" name="EddyViscosityError">
      <diagnostic>
        <algorithm name="tensor_difference" material_phase_support="single" source_field_1_name="EddyViscosityCopy" source_field_1_type="tensor" source_field_2_name="EddyViscosityAnalytical" source_field_2_type="tensor">
          <absolute_difference/>
        </algorithm>
        <mesh name="VelocityMesh"/>
        <output/>
        <stat>
          <include_in_stat/>
        </stat>
        <particles>
          <exclude_from_particles/>
        </particles>
      </diagnostic>
    </tensor_field>
    <tensor_field rank="2" name="EddyViscosityCopy">
      <diagnostic>
        <algorithm name="tensor_python_diagnostic" material_phase_support="single">
          <string_value type="code" language="python" lines="20"># Unfortunately, the tensor_difference algorithm does not find EddyViscosity in the LES model options path. So let's copy it here instead.

ev = states["Fluid"].tensor_fields["EddyViscosity"]

for i in range(field.node_count):
  field.set(i, ev.node_val(i))</string_value>
        </algorithm>
        <mesh name="VelocityMesh"/>
        <output/>
        <stat>
          <include_in_stat/>
        </stat>
        <particles>
          <exclude_from_particles/>
        </particles>
      </diagnostic>
    </tensor_field>
  </material_phase>
</fluidity_options>
