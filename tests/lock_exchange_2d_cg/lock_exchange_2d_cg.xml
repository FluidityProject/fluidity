<?xml version='1.0' encoding='UTF-8'?>
<testproblem>
  <name>lock exchange 2d</name>
  <owner userid="sp911"/>
  <tags>flml 2dadapt</tags>
    <problem_definition length="medium" nprocs="1">
    <command_line>fluidity -v3 -l  lock_exchange_2d_cg.flml </command_line>
  </problem_definition>  
  <variables>  
    <variable name="solvers_converged" language="python">
import os
files = os.listdir("./")
solvers_converged = not "matrixdump" in files and not "matrixdump.info" in files
    </variable>
     <variable name="temp_bin_lower_0" language="python"> 
from fluidity_tools import stat_parser
stat = stat_parser("lock_exchange_2d.stat")
temp_bin_lower_0 = stat['fluid']['Temperature']['mixing_bins%cv_normalised'][0,0]
    </variable>
     <variable name="temp_bin_upper_0" language="python"> 
from fluidity_tools import stat_parser
stat = stat_parser("lock_exchange_2d.stat")
temp_bin_upper_0 =  stat['fluid']['Temperature']['mixing_bins%cv_normalised'][1,0]
    </variable>
     <variable name="temp_bin_total_0" language="python"> 
from fluidity_tools import stat_parser
stat = stat_parser("lock_exchange_2d.stat")
temp_bin_total_0 = sum(stat['fluid']['Temperature']['mixing_bins%cv_normalised'][:,0])
    </variable>
     <variable name="temp_bin_total_end" language="python"> 
from fluidity_tools import stat_parser
stat = stat_parser("lock_exchange_2d.stat")
last_val = len(stat["ElapsedTime"]["value"])-1 
temp_bin_total_end = sum(stat['fluid']['Temperature']['mixing_bins%cv_normalised'][:,last_val])
    </variable>
    <variable name="hartel_no_slip_head_speed" language="python">
hartel_no_slip_head_speed = 0.0128350
    </variable>
    <variable name="hartel_free_slip_head_speed" language="python">
hartel_free_slip_head_speed = 0.01509346
    </variable>
 <variable name="results_head_speed" language="python">

import vtk
import glob
import sys
import os
import scipy.stats

hartel_no_slip_head_speed = 0.0128350
hartel_free_slip_head_speed = 0.01509346

def get_head_speed(filelist, timdum=0.25):
    mins = []
    maxs = []
    nums = []
    for file in filelist:
        try:
            os.stat(file)
        except:
            print("No such file: %s" % file)
            sys.exit(1)
        num = int(file.split(".vtu")[0].split('_')[-1])
        if num&gt;2:
            nums.append(num)
            reader = vtk.vtkXMLUnstructuredGridReader();
            reader.SetFileName(file)
            reader.Update()
            data = reader.GetOutput()
            data.GetPointData().SetActiveScalars("Temperature")
#      bbox = data.GetBounds()
#      centre = (bbox[4]+bbox[5])/2.0
#      plane = vtk.vtkPlane()
#      plane.SetOrigin(0.0, 0.0, centre)
#      plane.SetNormal(0.0, 0.0, 1.0)
#      cutter = vtk.vtkCutter()
#      cutter.SetCutFunction(plane)
#      cutter.SetInput(data)
#      cutter.Update()
            contour = vtk.vtkContourFilter ()
#      contour.SetInput(cutter.GetOutput())
            if vtk.vtkVersion.GetVTKMajorVersion() &lt;= 5:
                contour.SetInput(data)
            else:
                contour.SetInputData(data)
            contour.SetValue(0, 0.0)
            contour.Update()
            polydata = contour.GetOutput()
            bounding_box = polydata.GetBounds()
            (minx, maxx) = bounding_box[0:2]
            mins.append(minx); maxs.append(maxx)
    results = []
    for y in [mins, maxs]:
        x = [(nums[i] * timdum)-0.025 for i in range(len(nums))]
        r = scipy.stats.linregress(x, y)[0]
        print(x,y)
        results.append(abs(r))
    results.append(abs(hartel_free_slip_head_speed - results[0]))
    results.append(abs(hartel_no_slip_head_speed -  results[1]))
    return results

filelist = glob.glob("*[1-2][0-9].vtu")
filelist.sort()
print(filelist)
results_head_speed = get_head_speed(filelist)
print("Speed of free slip head, no slip head and errors from literature values")
print(results_head_speed)
</variable>
 </variables>    
 <pass_tests> 
   <test name="Solvers converged" language="python">
     assert(solvers_converged)
   </test>
<test name="check cg lower 2 mixing bins have roughly half material at t=0 (tol = 1e-3)" language="python">
print (abs(temp_bin_lower_0 - 0.5))
assert (abs(temp_bin_lower_0 - 0.5) &lt; 1e-3)
</test>
    <test name="check cg upper mixing bin has half material at t=0 (tol= 1e-3)" language="python">
print (abs(temp_bin_upper_0 - 0.5))
assert (abs(temp_bin_upper_0 - 0.5) &lt; 1e-3)
</test>
   <test name="check cg mixing bins of temp sum to 1 at t=0 (tol = 1e-4)" language="python">
print (abs(temp_bin_total_0 - 1.0))
assert (abs(temp_bin_total_0 - 1.0) &lt; 1e-4)
    </test>
    <test name="check cg mixing bins of temp sum to 1 at final step (tol = 1e-5)" language="python">
print (abs(temp_bin_total_end - 1.0))
assert (abs(temp_bin_total_end - 1.0) &lt; 1e-5)
    </test>
    <test name="Speed of head at no slip boundaries (20%)" language="python">
print (abs((hartel_no_slip_head_speed -  results_head_speed[1])/hartel_no_slip_head_speed))
assert((abs((hartel_no_slip_head_speed -  results_head_speed[1])/hartel_no_slip_head_speed)) &lt; 0.2)
    </test>
    <test name="Speed of head at free slip boundaries (20%)" language="python">
print (abs((hartel_free_slip_head_speed -  results_head_speed[0])/hartel_free_slip_head_speed))
assert((abs((hartel_free_slip_head_speed -  results_head_speed[0])/hartel_free_slip_head_speed)) &lt; 0.2)
    </test>
  </pass_tests>
  <warn_tests>
    <test name="Speed of head at no slip boundaries (15%)" language="python">
print (abs((hartel_no_slip_head_speed -  results_head_speed[1])/hartel_no_slip_head_speed))
assert((abs((hartel_no_slip_head_speed -  results_head_speed[1])/hartel_no_slip_head_speed)) &lt; 0.15)
    </test>
    <test name="Speed of head at free slip boundaries (15%)" language="python">
print (abs((hartel_free_slip_head_speed -  results_head_speed[0])/hartel_free_slip_head_speed))
assert((abs((hartel_free_slip_head_speed -  results_head_speed[0])/hartel_free_slip_head_speed)) &lt; 0.15)
    </test>
  </warn_tests>
</testproblem>
