<?xml version='1.0' encoding='utf-8'?>
<fluidity_options>
  <simulation_name>
    <string_value lines="1">laplacian_smoothing_3d</string_value>
  </simulation_name>
  <problem_type>
    <string_value lines="1">fluids</string_value>
  </problem_type>
  <geometry>
    <dimension>
      <integer_value rank="0">3</integer_value>
    </dimension>
    <mesh name="CoordinateMesh">
      <from_file file_name="src/unit_cube">
        <format name="gmsh"/>
        <stat>
          <include_in_stat/>
        </stat>
      </from_file>
    </mesh>
    <quadrature>
      <degree>
        <integer_value rank="0">4</integer_value>
      </degree>
    </quadrature>
  </geometry>
  <io>
    <dump_format>
      <string_value>vtk</string_value>
    </dump_format>
    <dump_period>
      <constant>
        <real_value rank="0">0.0</real_value>
      </constant>
    </dump_period>
    <output_mesh name="CoordinateMesh"/>
    <stat/>
  </io>
  <timestepping>
    <current_time>
      <real_value rank="0">0.0</real_value>
    </current_time>
    <timestep>
      <real_value rank="0">1.0</real_value>
    </timestep>
    <finish_time>
      <real_value rank="0">1.0</real_value>
    </finish_time>
  </timestepping>
  <material_phase name="Fluid">
    <vector_field name="Velocity" rank="1">
      <prescribed>
        <mesh name="CoordinateMesh"/>
        <value name="WholeMesh">
          <constant>
            <real_value shape="3" dim1="dim" rank="1">0.0 0.0 0.0</real_value>
          </constant>
        </value>
        <output/>
        <stat>
          <include_in_stat/>
        </stat>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
      </prescribed>
    </vector_field>
  </material_phase>
  <mesh_adaptivity>
    <mesh_movement>
      <laplacian_smoothing/>
      <vector_field name="GridVelocity" rank="1">
        <prescribed>
          <mesh name="CoordinateMesh"/>
          <value name="WholeMesh">
            <python>
              <string_value lines="20" type="code" language="python">import numpy
def val(X,t):

  if X[1]&gt;=1.0:
    #return (0.0,0.1-0.4*(X[0]-0.5)**2)
    return (0.0,0.15*numpy.sin(2*numpy.pi*X[0])*numpy.sin(2*numpy.pi*X[2]),0.0)
    #Heart
    #return (0.0,4*(-1.0*X[0]**2+X[0])*(-1.0*X[2]**2+X[2]),0.0)
    #return (0.0,0.0,0.0)
  elif X[1]&lt;=0.0:
    return (0.0,0.15*numpy.sin(2*numpy.pi*X[0])*numpy.sin(2*numpy.pi*X[2]),0.0)
    #Heart
    #return (0.0,-0.5*(8.03*X[0]**3 -3.38*X[0]**2 - 4.64*X[0])*(2*X[2]**2-2*X[2]),0.0)
  elif X[0]&gt;=1.0:
    return (0.15*numpy.sin(2*numpy.pi*X[1])*numpy.sin(2*numpy.pi*X[2]),0.0,0.0)
    #Heart
    #return (3.5*(-1.0*X[1]**2+X[1])*(-1.0*X[2]**2+X[2]),0.0,0.0)
  elif X[0]&lt;=0.0:
    return (0.15*numpy.sin(2*numpy.pi*X[1])*numpy.sin(2*numpy.pi*X[2]),0.0,0.0)
    #Heart
    #return (-3*(-1.0*X[1]**2+X[1])*(-1.0*X[2]**2+X[2]),0.0,0.0)
  elif X[2]&gt;=1.0:
    return (0.0,0.0,0.15*numpy.sin(2*numpy.pi*X[0])*numpy.sin(2*numpy.pi*X[1]))
    #Heart
    #return (0.0,0.0,2*(-1.0*X[0]**2+X[0])*(-1.0*X[1]**2+X[1]))
  elif X[2]&lt;=0.0:
    return (0.0,0.0,0.15*numpy.sin(2*numpy.pi*X[0])*numpy.sin(2*numpy.pi*X[1]))
    #Heart
    #return (0.0,0.0,-2*(-1.0*X[0]**2+X[0])*(-1.0*X[1]**2+X[1]))
  else:
    return (0.0,0.0,0.0)</string_value>
            </python>
          </value>
          <output/>
          <stat>
            <include_in_stat/>
          </stat>
          <detectors>
            <exclude_from_detectors/>
          </detectors>
        </prescribed>
      </vector_field>
    </mesh_movement>
  </mesh_adaptivity>
</fluidity_options>
