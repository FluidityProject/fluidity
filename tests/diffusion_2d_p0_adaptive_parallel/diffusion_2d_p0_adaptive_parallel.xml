<?xml version='1.0' encoding='UTF-8'?>
<testproblem>
  <name>heat_2d_dg</name>
  <owner userid="cwilson"/>
  <tags>flml zoltan parallel 2dadapt</tags>
  <problem_definition length="medium" nprocs="3">
    <command_line>mpiexec ../../bin/flredecomp -i 1 -o 3 -v -l heat heat_flredecomp &amp;&amp;
      mpiexec fluidity -v2 -l heat_flredecomp.flml </command_line>
    <!-- Two dimensional diffusion only problem. -->
  </problem_definition>
  <variables>
    <variable name="solvers_converged" language="python">
import os
files = os.listdir("./")
solvers_converged = not "matrixdump" in files and not "matrixdump.info" in files
    </variable>
<!--    <variable name="detectors" language="python">
from fluidity_tools import stat_parser
detectors = stat_parser("heat.detectors")
    </variable>-->
    <variable name="finish_time" language="python">
from fluidity_tools import stat_parser
s = stat_parser("heat.stat")
finish_time = s["ElapsedTime"]["value"][-1]
    </variable>
    <variable name="no_nodes" language="python">
from fluidity_tools import stat_parser
s = stat_parser("heat.stat")
no_nodes = s["CoordinateMesh"]["nodes"]
    </variable>
    <variable name="tracer_integral" language="python">
from fluidity_tools import stat_parser
s = stat_parser("heat.stat")
tracer_integral = s["Water"]["Tracer"]["integral"]
    </variable>
    <variable name="tracer_error" language="python">
from fluidity_tools import stat_parser
s = stat_parser("heat.stat")
tracer_error = s["Water"]["ScalarAbsoluteDifference"]["max"]
    </variable>
    <variable name="regionids_integral" language="python">
from fluidity_tools import stat_parser
s = stat_parser("heat.stat")
regionids_integral = s["Water"]["RegionIDs"]["integral"]
    </variable>
    <variable name="regionids" language="python">
import vtktools
import glob
import fluidity.diagnostics.vtutools as vtutools
from numpy import array, concatenate, zeros

regionids = [[] for i in range(4)]
centre = []
centre.append(array([-0.75,0.5]))
centre.append(array([-0.25,0.5]))
centre.append(array([-0.75,-0.5]))
centre.append(array([-0.25,-0.5]))

pos = []
for i in range(4):
    posx = []
    posx.append([centre[i][0]])
    posx.append([centre[i][0]-1./6.])
    posx.append([centre[i][0]+1./6.])
    posx.append([centre[i][0]+1./6.])
    posx.append([centre[i][0]-1./6.])
    posx = array(posx)
    posy = []
    posy.append([centre[i][1]])
    posy.append([centre[i][1]-1./4.])
    posy.append([centre[i][1]-1./4.])
    posy.append([centre[i][1]+1./4.])
    posy.append([centre[i][1]+1./4.])
    posy = array(posy)
    posz = zeros((len(posx),1))
    pos.append(concatenate((posx, posy, posz), 1))

files = glob.glob("heat_*.pvtu")
for f in files:
    print(f)
    pvtu = vtktools.vtu(f)
    vtu = vtutools.VtuFromPvtu(pvtu)
    for i in range(4):
        regionids[i].append(vtu.ProbeData(pos[i], "RegionIDs"))

regionids = array(regionids)
</variable>
  </variables>
  <pass_tests>
    <test name="Solvers converged" language="python">
      assert(solvers_converged)
    </test>
    <test name="finish time is 500" language="python">
assert abs(finish_time - 500) &lt; 1e-9
    </test>
    <test name="no. nodes is initially 231" language="python">
assert abs(no_nodes[0] - 231) &lt; 1e-9
    </test>
    <test name="no. nodes is constant" language="python">
import numpy
assert(numpy.all(abs(no_nodes[1:] - no_nodes[0]) &lt; 1e-9))
    </test>
    <test name="tracer integral is initially 1.0" language="python">
assert abs(tracer_integral[0] - 1.0) &lt; 1e-8
    </test>
    <test name="tracer integral is constant" language="python">
import numpy
assert(numpy.all(abs(tracer_integral[1:] - tracer_integral[0]) &lt; 1e-8))
    </test>
    <test name="tracer error is initially less than 0.01" language="python">
assert tracer_error[0] &lt; 0.01 
    </test>
    <test name="tracer error less than 0.01" language="python">
import numpy
assert(numpy.all(abs(tracer_error[1:]-tracer_error[0]) &lt; 1.e-9)) 
    </test>
    <test name="regionids integral is initially 39.0" language="python">
assert abs(regionids_integral[0] - 39.0) &lt; 1e-9
    </test>
    <test name="regionids integral is constant" language="python">
import numpy
assert(numpy.all(abs(regionids_integral[1:] - regionids_integral[0]) &lt; 1e-9))
    </test>
    <test name="regionids upper left is 21" language="python">
import numpy
assert(numpy.all(abs(regionids[0] - 21.) &lt; 1e-9))
    </test>
    <test name="regionids upper right is 20" language="python">
import numpy
assert(numpy.all(abs(regionids[1] - 20.) &lt; 1e-9))
    </test>
    <test name="regionids lower left is 18" language="python">
import numpy
assert(numpy.all(abs(regionids[2] - 18.) &lt; 1e-9))
    </test>
    <test name="regionids lower right is 19" language="python">
import numpy
assert(numpy.all(abs(regionids[3] - 19.) &lt; 1e-9))
    </test>
<!--    <test name="regionids initial" language="python">
import numpy
assert(numpy.array([detectors["Water"]["RegionIDs"][d][0]&gt;17
                   for d in detectors["Water"]["RegionIDs"].keys()], dtype=bool).all())
    </test>-->
<!--    <test name="regionids detectors" language="python">
import numpy
for d in detectors["Water"]["RegionIDs"].keys():
  print d, detectors["Water"]["RegionIDs"][d][0]
assert(numpy.array([numpy.all(abs(detectors["Water"]["RegionIDs"][d][1:]-detectors["Water"]["RegionIDs"][d][0])&lt;1.e-9) 
                              for d in detectors["Water"]["RegionIDs"].keys()], dtype=bool).all())
    </test>-->
  </pass_tests>
  <warn_tests>
  </warn_tests>
</testproblem>
