<?xml version='1.0' encoding='utf-8'?>
<fluidity_options>
  <simulation_name>
    <string_value lines="1">particle_attributes</string_value>
  </simulation_name>
  <problem_type>
    <string_value lines="1">fluids</string_value>
  </problem_type>
  <geometry>
    <dimension>
      <integer_value rank="0">2</integer_value>
    </dimension>
    <mesh name="CoordinateMesh">
      <from_file file_name="square">
        <format name="gmsh"/>
        <stat>
          <include_in_stat/>
        </stat>
      </from_file>
    </mesh>
    <mesh name="VelocityMesh">
      <from_mesh>
        <mesh name="CoordinateMesh"/>
        <mesh_shape>
          <polynomial_degree>
            <integer_value rank="0">2</integer_value>
          </polynomial_degree>
        </mesh_shape>
        <mesh_continuity>
          <string_value>continuous</string_value>
        </mesh_continuity>
        <stat>
          <exclude_from_stat/>
        </stat>
      </from_mesh>
    </mesh>
    <mesh name="P1DG_Mesh">
      <from_mesh>
        <mesh name="CoordinateMesh"/>
        <mesh_continuity>
          <string_value>discontinuous</string_value>
        </mesh_continuity>
        <stat>
          <exclude_from_stat/>
        </stat>
      </from_mesh>
    </mesh>
    <quadrature>
      <degree>
        <integer_value rank="0">5</integer_value>
      </degree>
    </quadrature>
  </geometry>
  <io>
    <dump_format>
      <string_value>vtk</string_value>
    </dump_format>
    <dump_period>
      <constant>
        <real_value rank="0">0</real_value>
      </constant>
    </dump_period>
    <output_mesh name="CoordinateMesh"/>
    <stat>
      <output_at_start/>
      <output_before_adapts/>
      <output_after_adapts/>
    </stat>
  </io>
  <particles>
    <particle_group name="ArrayTest">
      <particle_io/>
      <particle_subgroup name="ArrayMeasure">
        <initial_position>
          <python>
            <string_value type="code" language="python" lines="20">def val(t):
  from numpy import arange,zeros,reshape,concatenate,cos,pi
  a=50
  b=20
  c=1000
  x=zeros(c,float)
  y=zeros(c,float)
  k=0
  for i in range(0,b):
      for j in range(0,a):
              x[k]=1.0*i/b
              y[k]=1.0*j/a
              k=k+1

  return reshape(concatenate((x,y)),(2,c)).T</string_value>
          </python>
        </initial_position>
        <attributes>
          <scalar_attribute_array name="ArrayAttribute">
            <dimension>
              <integer_value rank="0">10</integer_value>
            </dimension>
            <python>
              <string_value type="code" language="python" lines="20">def val(X,t,dt,n):
  import numpy as np
  r = np.arange(n)
  return r</string_value>
            </python>
          </scalar_attribute_array>
          <scalar_attribute_array name="ArrayFieldAttribute">
            <dimension>
              <integer_value rank="0">5</integer_value>
            </dimension>
            <python_fields>
              <string_value type="code" language="python" lines="20">def val(X,t,dt,fields,n):
  import numpy as np
  return np.arange(n) + fields["tenstest"][1,1]</string_value>
              <store_old_attribute/>
            </python_fields>
          </scalar_attribute_array>
          <scalar_attribute_array name="ArrayOldAttribute">
            <dimension>
              <integer_value rank="0">5</integer_value>
            </dimension>
            <python_fields>
              <string_value type="code" language="python" lines="20">def val(X,t,dt,fields,n):
  import numpy as np
  return np.arange(n) + fields["old%ArrayFieldAttribute"]</string_value>
            </python_fields>
          </scalar_attribute_array>
          <vector_attribute_array name="VectorArrayAttribute">
            <dimension>
              <integer_value rank="0">10</integer_value>
            </dimension>
            <python>
              <string_value type="code" language="python" lines="20">def val(X,t,dt,n):
  import numpy as np
  r = np.arange(n)
  return np.zeros((n,2)) + r[:,None]</string_value>
            </python>
          </vector_attribute_array>
          <vector_attribute_array name="VectorFieldAttribute">
            <dimension>
              <integer_value rank="0">5</integer_value>
            </dimension>
            <python_fields>
              <string_value type="code" language="python" lines="20">def val(X,t,dt,fields,n):
  import numpy as np
  return np.zeros((n,2)) + np.arange(n)[:,None] + fields["vectest"][1]</string_value>
              <store_old_attribute/>
            </python_fields>
          </vector_attribute_array>
          <vector_attribute_array name="VectorOldAttribute">
            <dimension>
              <integer_value rank="0">5</integer_value>
            </dimension>
            <python_fields>
              <string_value type="code" language="python" lines="20">def val(X,t,dt,fields,n):
  import numpy as np
  return np.zeros((n,2)) + np.arange(n)[:,None] + fields["old%VectorFieldAttribute"]</string_value>
            </python_fields>
          </vector_attribute_array>
          <tensor_attribute_array name="TensorArrayAttribute">
            <dimension>
              <integer_value rank="0">10</integer_value>
            </dimension>
            <python>
              <string_value type="code" language="python" lines="20">def val(X,t,dt,n):
  import numpy as np
  r = np.arange(n)
  return np.zeros((n,2,2)) + r[:,None,None]</string_value>
            </python>
          </tensor_attribute_array>
          <tensor_attribute_array name="TensorFieldAttribute">
            <dimension>
              <integer_value rank="0">5</integer_value>
            </dimension>
            <python_fields>
              <string_value type="code" language="python" lines="20">def val(X,t,dt,fields,n):
  import numpy as np
  return np.zeros((n,2,2)) + np.arange(n)[:,None,None] + fields["tenstest"]</string_value>
              <store_old_attribute/>
            </python_fields>
          </tensor_attribute_array>
          <tensor_attribute_array name="TensorOldAttribute">
            <dimension>
              <integer_value rank="0">5</integer_value>
            </dimension>
            <python_fields>
              <string_value type="code" language="python" lines="20">def val(X,t,dt,fields,n):
  import numpy as np
  return np.zeros((n,2,2)) + np.arange(n)[:,None,None] + fields["old%TensorFieldAttribute"]</string_value>
            </python_fields>
          </tensor_attribute_array>
        </attributes>
      </particle_subgroup>
    </particle_group>
    <particle_group name="SingleTest">
      <particle_io/>
      <particle_subgroup name="Attributes">
        <initial_position>
          <python>
            <string_value type="code" language="python" lines="20">def val(t):
  from numpy import arange,zeros,reshape,concatenate,cos,pi
  a=10
  b=10
  c=100
  x=zeros(c,float)
  y=zeros(c,float)
  k=0
  for i in range(0,b):
      for j in range(0,a):
              x[k]=1.0*i/b
              y[k]=1.0*j/a
              k=k+1

  return reshape(concatenate((x,y)),(2,c)).T</string_value>
          </python>
        </initial_position>
        <attributes>
          <scalar_attribute name="ScalarAttribute">
            <python>
              <string_value type="code" language="python" lines="20">def val(X,t,dt):
  return 1</string_value>
            </python>
          </scalar_attribute>
          <scalar_attribute name="ScalarFieldAttribute">
            <python_fields>
              <string_value type="code" language="python" lines="20">def val(X,t,dt,fields):
  return fields["Temperature"]</string_value>
            </python_fields>
          </scalar_attribute>
          <vector_attribute name="VectorAttribute">
            <python>
              <string_value type="code" language="python" lines="20">def val(X,t,dt):
  import numpy as np
  return np.random.rand(2)</string_value>
            </python>
          </vector_attribute>
          <vector_attribute name="VectorFieldAttribute">
            <python_fields>
              <string_value type="code" language="python" lines="20">def val(X,t,dt,fields):
  import numpy as np
  return np.random.rand(2) + fields["Temperature"]</string_value>
            </python_fields>
          </vector_attribute>
          <tensor_attribute name="TensorAttribute">
            <python>
              <string_value type="code" language="python" lines="20">def val(X,t,dt):
  import numpy as np
  return np.random.rand(2,2)</string_value>
            </python>
          </tensor_attribute>
          <tensor_attribute name="TensorFieldAttribute">
            <python_fields>
              <string_value type="code" language="python" lines="20">def val(X,t,dt,fields):
  import numpy as np
  return np.random.rand(2,2) + fields["Temperature"]</string_value>
            </python_fields>
          </tensor_attribute>
        </attributes>
      </particle_subgroup>
    </particle_group>
    <particle_group name="ComputeOnly">
      <particle_subgroup name="Strain">
        <initial_position>
          <python>
            <string_value type="code" language="python" lines="20">def val(t):
  import numpy as np
  return np.zeros((10,2))</string_value>
          </python>
        </initial_position>
        <attributes>
          <scalar_attribute_array name="ArrayAttribute">
            <dimension>
              <integer_value rank="0">10</integer_value>
            </dimension>
            <exclude_from_output/>
            <python>
              <string_value type="code" language="python" lines="20">def val(X,t,dt,n):
  import numpy as np
  r = np.arange(n)
  return r</string_value>
            </python>
          </scalar_attribute_array>
        </attributes>
      </particle_subgroup>
    </particle_group>
    <moving_outside_domain>
      <delete_outside_domain/>
    </moving_outside_domain>
    <lagrangian_timestepping>
      <subcycles>
        <integer_value rank="0">1</integer_value>
      </subcycles>
      <search_tolerance>
        <real_value rank="0">1.0e-10</real_value>
      </search_tolerance>
      <rk4_guided_search/>
    </lagrangian_timestepping>
  </particles>
  <timestepping>
    <current_time>
      <real_value rank="0">0.0</real_value>
    </current_time>
    <timestep>
      <real_value rank="0">0.001</real_value>
    </timestep>
    <finish_time>
      <real_value rank="0">0.01</real_value>
    </finish_time>
  </timestepping>
  <material_phase name="BoussinesqFluid">
    <vector_field rank="1" name="Velocity">
      <prescribed>
        <mesh name="VelocityMesh"/>
        <value name="WholeMesh">
          <python>
            <string_value type="code" language="python" lines="20">def val(X,t):
  x = X[0]
  y = X[1]
  return [-(y-0.5)/2.0,(x-0.5)/2.0]</string_value>
          </python>
        </value>
        <output/>
        <stat>
          <include_in_stat/>
        </stat>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
      </prescribed>
    </vector_field>
    <scalar_field rank="0" name="TempChange">
      <diagnostic>
        <algorithm name="Internal" material_phase_support="multiple"/>
        <mesh name="CoordinateMesh"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <scalar_field rank="0" name="Temperature">
      <prescribed>
        <mesh name="CoordinateMesh"/>
        <value name="WholeMesh">
          <python>
            <string_value type="code" language="python" lines="20">def val(X,t):
  a = 0
  b = 0
  x = X[0]
  y = X[1]
  if (x&gt;0.5):
    a = 1
  if (y&gt;0.5):
    b = 1
  return a+b</string_value>
          </python>
        </value>
        <output/>
        <stat/>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
        <particles>
          <include_in_particles>
            <store_old_field/>
          </include_in_particles>
        </particles>
      </prescribed>
    </scalar_field>
    <scalar_field rank="0" name="XChange">
      <diagnostic>
        <algorithm name="Internal" material_phase_support="multiple"/>
        <mesh name="CoordinateMesh"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <scalar_field rank="0" name="YChange">
      <diagnostic>
        <algorithm name="Internal" material_phase_support="multiple"/>
        <mesh name="CoordinateMesh"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <scalar_field rank="0" name="NumTemp">
      <diagnostic>
        <algorithm name="Internal" material_phase_support="multiple"/>
        <mesh name="CoordinateMesh"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <scalar_field rank="0" name="NumPos">
      <diagnostic>
        <algorithm name="Internal" material_phase_support="multiple"/>
        <mesh name="CoordinateMesh"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <vector_field rank="1" name="vectest">
      <prescribed>
        <mesh name="CoordinateMesh"/>
        <value name="WholeMesh">
          <constant>
            <real_value rank="1" dim1="dim" shape="2">1 2</real_value>
          </constant>
        </value>
        <output/>
        <stat>
          <include_in_stat/>
        </stat>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
        <particles>
          <include_in_particles/>
        </particles>
      </prescribed>
    </vector_field>
    <tensor_field rank="2" name="tenstest">
      <prescribed>
        <mesh name="CoordinateMesh"/>
        <value name="WholeMesh">
          <anisotropic_asymmetric>
            <constant>
              <real_value symmetric="false" rank="2" dim1="dim" dim2="dim" shape="2 2">1 2 3 4</real_value>
            </constant>
          </anisotropic_asymmetric>
        </value>
        <output/>
        <particles>
          <include_in_particles/>
        </particles>
      </prescribed>
    </tensor_field>
  </material_phase>
</fluidity_options>
