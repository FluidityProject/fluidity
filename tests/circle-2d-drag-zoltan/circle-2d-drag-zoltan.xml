<?xml version="1.0" encoding="UTF-8" ?>

<!-- Drag calculation in 2D flow past circle -->
<!-- Checks the serial run against parallel against parallel adaptivity which can only be done with Zoltan -->
<testproblem>
  <name>circle-2d-drag-zoltan</name>
  <owner userid="jhill1"/>
  <tags>flml zoltan parallel 2dadapt</tags>
  <problem_definition length="medium" nprocs="3">
      <command_line>fluidity circle-2d-drag-serial.flml;
mpiexec flredecomp -i 1 -o 3 -v -l circle-2d-drag-parallel circle-2d-drag-parallel_flredecomp &amp;&amp;
mpiexec fluidity circle-2d-drag-parallel_flredecomp.flml;
mpiexec flredecomp -i 1 -o 3 -v -l circle-2d-drag-parallel-adaptive circle-2d-drag-parallel-adaptive_flredecomp &amp;&amp;
mpiexec fluidity circle-2d-drag-parallel-adaptive_flredecomp.flml
      </command_line>
  </problem_definition>
  <variables>
    <variable name="solvers_converged" language="python">
import os
files = os.listdir("./")
solvers_converged = not "matrixdump" in files and not "matrixdump.info" in files
    </variable>
    <variable name="cur_xforce" language="python">
import fluidity_tools
s = fluidity_tools.stat_parser("circle-2d-drag-serial.stat")
cur_xforce = s["0"]["Velocity"]["force_circle%1"][-1]
    </variable>
    <variable name="exact_xforce" language="python">
exact_xforce = 0.01116 # the force in x direction from literature
    </variable>    
    <variable name="cur_xforce_par" language="python">
import fluidity_tools
s = fluidity_tools.stat_parser("circle-2d-drag-parallel.stat")
cur_xforce_par = s["0"]["Velocity"]["force_circle%1"][-1]
    </variable>
    <variable name="cur_xforce_par_adapt" language="python">
import fluidity_tools
s = fluidity_tools.stat_parser("circle-2d-drag-parallel-adaptive.stat")
cur_xforce_par_adapt = s["0"]["Velocity"]["force_circle%1"][-1]
    </variable>

  </variables>
  <pass_tests>
    <test name="Solvers converged" language="python">
      assert(solvers_converged)
    </test>
    <test name="relative drag force difference (2.5%) in serial." language="python">
print (100.0*abs(cur_xforce - exact_xforce)/exact_xforce)
assert(abs(cur_xforce - exact_xforce)/exact_xforce &lt; 0.025)
    </test>    
    <test name="relative drag force difference (2.5%) in parallel." language="python">
print (100.0*abs(cur_xforce_par - exact_xforce)/exact_xforce)
assert(abs(cur_xforce_par - exact_xforce)/exact_xforce &lt; 0.025)
    </test>
    <test name="relative drag force difference (2.5%) in adaptive." language="python">
print (100.0*abs(cur_xforce_par_adapt - exact_xforce)/exact_xforce)
assert(abs(cur_xforce_par_adapt - exact_xforce)/exact_xforce &lt; 0.025)
    </test>
  </pass_tests>
  <warn_tests>
    <test name="relative drag force difference (1%) in serial." language="python">
assert(abs(cur_xforce - exact_xforce)/exact_xforce &lt; 0.01)
    </test>    
    <test name="relative drag force difference (1%) in serial." language="python">
assert(abs(cur_xforce_par - exact_xforce)/exact_xforce &lt; 0.01)
    </test>
    <test name="relative drag force difference (1%) in serial." language="python">
assert(abs(cur_xforce_par_adapt - exact_xforce)/exact_xforce &lt; 0.01)
    </test>
  </warn_tests>
</testproblem>
