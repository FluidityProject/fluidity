<?xml version='1.0' encoding='UTF-8'?>
<testproblem>
  <name>biology_conservation</name>
  <owner userid="jhill1"/>
  <tags>flml biology</tags>
  <problem_definition length="medium" nprocs="1">
    <command_line>fluidity biology_conservation.flml</command_line>
    <!-- PZND model running in a water column not solving for any physics. No sinking of detritus, so everything conserved -->
  </problem_definition>
  <variables>
    <variable name="solvers_converged" language="python">
import os
files = os.listdir("./")
solvers_converged = not "matrixdump" in files and not "matrixdump.info" in files
    </variable>
    <variable name="phytoplankton1" language="python">
from fluidity_tools import stat_parser
d = stat_parser("biology_conservation.stat")
phytoplankton1=d["water"]["Phytoplankton"]["integral"][0]
    </variable>
    <variable name="phytoplankton2" language="python">
from fluidity_tools import stat_parser
d = stat_parser("biology_conservation.stat")
phytoplankton2=d["water"]["Phytoplankton"]["integral"][-1]
    </variable>    
    <variable name="zooplankton1" language="python">
from fluidity_tools import stat_parser
d = stat_parser("biology_conservation.stat")
zooplankton1=d["water"]["Zooplankton"]["integral"][0]
    </variable>
    <variable name="zooplankton2" language="python">
from fluidity_tools import stat_parser
d = stat_parser("biology_conservation.stat")
zooplankton2=d["water"]["Zooplankton"]["integral"][-1]
    </variable>
    <variable name="detritus1" language="python">
from fluidity_tools import stat_parser
d = stat_parser("biology_conservation.stat")
detritus1=d["water"]["Detritus"]["integral"][0]
    </variable>
    <variable name="detritus2" language="python">
from fluidity_tools import stat_parser
d = stat_parser("biology_conservation.stat")
detritus2=d["water"]["Detritus"]["integral"][-1]
    </variable>
    <variable name="nutrients1" language="python">
from fluidity_tools import stat_parser
d = stat_parser("biology_conservation.stat")
nutrients1=d["water"]["Nutrient"]["integral"][0]
    </variable>
    <variable name="nutrients2" language="python">
from fluidity_tools import stat_parser
d = stat_parser("biology_conservation.stat")
nutrients2=d["water"]["Nutrient"]["integral"][-1]
    </variable>
    <variable name="DifferencePerNode" language="python">
import sys
sys.path.append("biology_conservation")        
import values_per_node
from numpy import array, zeros
p1,z1,n1,d1 = values_per_node.values_per_node("biology_conservation_0.vtu")
p2,z2,n2,d2 = values_per_node.values_per_node("biology_conservation_9.vtu")
nNodes = len(p1)
DifferencePerNode = zeros(nNodes)
for i in range(0,nNodes-1):
    DifferencePerNode[i] = p1[i]+z1[i]+d1[i]+n1[i]-z2[i]-p2[i]-n2[i]-d2[i]
</variable>
  </variables>
  <pass_tests>
    <test name="Solvers converged" language="python">
      assert(solvers_converged)
    </test>
      <test name="Total in water column conserved" language="python">
before = nutrients1 + detritus1 + phytoplankton1 + zooplankton1
after = nutrients2 + detritus2 + phytoplankton2 + zooplankton2
print(before, after, before-after)
assert (abs(before - after) &lt; 1e-4)
</test>
    <test name="Pointwise conservation" language="python">
nNodes = len(DifferencePerNode)
print(max(DifferencePerNode))
for i in range(0,nNodes-1):
    assert (DifferencePerNode[i] &lt; 1e-3)
</test>
  </pass_tests>
  <warn_tests>
  </warn_tests>
</testproblem>
