<?xml version='1.0' encoding='UTF-8'?>
<testproblem>
  <name>Advected top hat (DG)</name>
  <owner userid="dham"/>
  <tags>flml</tags>
  <problem_definition length="short" nprocs="1">
    <command_line>make clean-run; fluidity -v2 -l top_hat_dg.flml</command_line>
  </problem_definition>
  <variables>
    <variable name="times" language="python">
import fluidity_tools
s = fluidity_tools.stat_parser("top_hat_dg.stat")
times = s["ElapsedTime"]["value"]
    </variable>
    <variable name="solvers_converged" language="python">
import os
files = os.listdir("./")
solvers_converged = not "matrixdump" in files and not "matrixdump.info" in files 
    </variable>
    <variable name="min_ts" language="python">
import fluidity_tools
s = fluidity_tools.stat_parser("top_hat_dg.stat")
min_ts = s["Fluid"]["Tracer"]["min"]
    </variable>
    <variable name="max_ts" language="python">
import fluidity_tools
s = fluidity_tools.stat_parser("top_hat_dg.stat")
max_ts = s["Fluid"]["Tracer"]["max"]
    </variable>
    <variable name="t_integrals" language="python">
import fluidity_tools
s = fluidity_tools.stat_parser("top_hat_dg.stat")
t_integrals = s["Fluid"]["Tracer"]["integral"]
    </variable>
    <variable name="initial_vtu" language="python">
import vtktools
initial_vtu = vtktools.vtu("top_hat_dg_0.vtu")
    </variable>
    <variable name="final_vtu" language="python">
import vtktools
final_vtu = vtktools.vtu("top_hat_dg_80.vtu")
    </variable>
  </variables>
  <pass_tests>
    <test name="Simulation completed" language="python">
import fluidity_tools
fluidity_tools.compare_variable(times[-1], 80.0, 1.0e-6)
    </test>
    <test name="Solvers converged" language="python">
assert(solvers_converged)
    </test>
    <test name="Bounded (20%)" language="python">
min_t = min(min_ts)
max_t = max(max_ts)
print("Min T = ", min_t)
print("Max T = ", max_t)
assert(min_t &gt; -0.2)
assert(max_t &lt; 1.2)
</test>
    <test name="Conservative" language="python">
import fluidity_tools
fluidity_tools.compare_variables(t_integrals, [0.25 for i in range(len(t_integrals))], 1.0e-10)
    </test>
    <test name="Advected velocity" language="python">
import fluidity_tools

initialCoords = initial_vtu.GetLocations()
finalCoords = final_vtu.GetLocations()
initialT = initial_vtu.GetScalarField("Tracer")
finalT = final_vtu.GetScalarField("Tracer")

initialX = 0.0
divisor = 0.0
for i, coord in enumerate(initialCoords[:-1]):
    initialX += initialT[i] * coord[0]
    divisor += initialT[i]
initialX /= divisor
print("Initial mean x = ", initialX)

finalX = 0.0
divisor = 0.0
for i, coord in enumerate(finalCoords[:-1]):
    finalX += finalT[i] * coord[0]
    divisor += finalT[i]
finalX /= divisor
print("Final mean x = ", finalX)

vel = (finalX - initialX) / (times[-1] - times[0])
vel = float(vel)
print("Mean velocity = ", vel)

fluidity_tools.compare_variable(vel, (1.0 / 40.0) * 0.125, 0.02)
</test>
    <test name="Standard deviation" language="python">
import math

import fluidity_tools

initialCoords = initial_vtu.GetLocations()
finalCoords = final_vtu.GetLocations()
initialT = initial_vtu.GetScalarField("Tracer")
finalT = final_vtu.GetScalarField("Tracer")

initialX = 0.0
initialTSum = 0.0
for i, coord in enumerate(initialCoords[:-1]):
    initialX += initialT[i] * coord[0]
    initialTSum += initialT[i]
initialX /= initialTSum
print("Initial mean x = ", initialX)

finalX = 0.0
finalTSum = 0.0
for i, coord in enumerate(finalCoords[:-1]):
    finalX += finalT[i] * coord[0]
    finalTSum += finalT[i]
finalX /= finalTSum
print("Final mean x = ", finalX)

initialSigmaX = 0.0
for i, coord in enumerate(initialCoords[:-1]):
    initialSigmaX += initialT[i] * math.pow((coord[0] - initialX), 2.0)
initialSigmaX /= initialTSum
initialSigmaX = math.pow(initialSigmaX, 0.5)
print("Initial standard deviation = ", initialSigmaX)

finalSigmaX = 0.0
for i, coord in enumerate(finalCoords[:-1]):
    finalSigmaX += finalT[i] * math.pow((coord[0] - finalX), 2.0)
finalSigmaX /= finalTSum
finalSigmaX = math.pow(finalSigmaX, 0.5)
print("Final standard deviation = ", finalSigmaX)

fluidity_tools.compare_variable(initialSigmaX, finalSigmaX, 0.03)
</test>
  </pass_tests>
  <warn_tests>
  </warn_tests>
</testproblem>
