<?xml version='1.0' encoding='UTF-8'?>
<testproblem>
  <name>wetting_and_drying_balzano1_dg_parallel</name>
  <owner userid="sf1409" />
  <tags> parallel  </tags>
  <problem_definition length="medium" nprocs="4">
    <command_line>mpiexec flredecomp -i 1 -o 4 -v -l balzano1_2plus1 balzano1_2plus1_flredecomp &amp;&amp;
mpiexec fluidity balzano1_2plus1_flredecomp.flml</command_line>
  </problem_definition>
  <variables>
    <variable name="velocity" language="python">
import h5py
import numpy as np
f = h5py.File('balzano1_2plus1.detectors.h5part', 'r')
d = f["/Step#{}".format(len(f) - 1)]
idx = np.argsort(d["id"])

velocity = np.vstack([d[f'water%Velocity%{dim}'][:][idx] for dim in 'xyz'])
    </variable>
    <variable name="wetting_drying_alpha" language="python">
import h5py
import numpy as np
f = h5py.File('balzano1_2plus1.detectors.h5part', 'r')
d = f["/Step#{}".format(len(f) - 1)]
idx = np.argsort(d["id"])
wetting_drying_alpha = d["water%WettingDryingAlpha"][:][idx]
    </variable>
    <variable name="ElapsedTime" language="python">
import h5py
import numpy as np
f = h5py.File('balzano1_2plus1.detectors.h5part', 'r')
n = len(f)-1
ElapsedTime = f[f'/Step#{n}'].attrs['time'].item()
    </variable>
  </variables>
  <pass_tests>
    <test name="endtime" language="python">assert(ElapsedTime==59400.0)</test>
    <test name="wetting_drying_alpha" language="python">print("Checking if left third of domain is dry at last timestep...",)
for det in range(1,302):
    assert(wetting_drying_alpha[det]&gt;0.0)
print("okay.")
print("Checking if right half of domain is wet at last timestep...")
for det in range(499,1001):
    assert(wetting_drying_alpha[det]==0.0)
print("okay.")
<comment>this test checks if the wetting and drying alpa is correct at the last timestep. It should be 0 for detectors located left of X=5520 (det_01...det_4) and 1 for detectors right of that postition (det_06...det_11).</comment></test>
    <test name="Velocity" language="python">print("Checking if left third of domain is velocity free at last timestep...",)
import numpy as np
for det in range(1,302):
    magnitude = np.abs(velocity[:,det]).sum()
    assert(magnitude&lt;=1e-2)
print("okay.")</test>
  </pass_tests>
</testproblem>