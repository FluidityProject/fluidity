<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE testproblem SYSTEM "regressiontest.dtd">
<testproblem>
  <name>biology_6_component_parallel</name>
  <owner userid="jhill1"/>
  <tags>flml biology parallel</tags>
  <problem_definition length="short" nprocs="2">
    <command_line>mpiexec ../../bin/flredecomp -i 1 -o 2 -v -l biology_conservation_parallel biology_conservation_parallel_flredecomp &amp;&amp;
mpiexec ../../bin/fluidity -v2 -l biology_conservation_parallel_flredecomp.flml; ../../bin/fluidity -v2 -l biology_conservation.flml</command_line>
    <!-- PZNDAC model running in a water column not solving for any physics. No sinking of detritus, so everything conserved -->
  </problem_definition>
  <variables>
    <variable name="solvers_converged" language="python">
import os
files = os.listdir("./")
solvers_converged = not "matrixdump" in files and not "matrixdump.info" in files
    </variable>
    <variable name="phytoplankton1" language="python">
from fluidity_tools import stat_parser
d = stat_parser("biology_conservation_parallel.stat")
phytoplankton1=d["water"]["Phytoplankton"]["integral"][0]
    </variable>
    <variable name="phytoplankton2" language="python">
from fluidity_tools import stat_parser
d = stat_parser("biology_conservation_parallel.stat")
phytoplankton2=d["water"]["Phytoplankton"]["integral"][-1]
    </variable>    
    <variable name="zooplankton1" language="python">
from fluidity_tools import stat_parser
d = stat_parser("biology_conservation_parallel.stat")
zooplankton1=d["water"]["Zooplankton"]["integral"][0]
    </variable>
    <variable name="zooplankton2" language="python">
from fluidity_tools import stat_parser
d = stat_parser("biology_conservation_parallel.stat")
zooplankton2=d["water"]["Zooplankton"]["integral"][-1]
    </variable>
    <variable name="detritus1" language="python">
from fluidity_tools import stat_parser
d = stat_parser("biology_conservation_parallel.stat")
detritus1=d["water"]["Detritus"]["integral"][0]
    </variable>
    <variable name="detritus2" language="python">
from fluidity_tools import stat_parser
d = stat_parser("biology_conservation_parallel.stat")
detritus2=d["water"]["Detritus"]["integral"][-1]
    </variable>
    <variable name="nutrients1" language="python">
from fluidity_tools import stat_parser
d = stat_parser("biology_conservation_parallel.stat")
nutrients1=d["water"]["Nutrient"]["integral"][0]
    </variable>
    <variable name="nutrients2" language="python">
from fluidity_tools import stat_parser
d = stat_parser("biology_conservation_parallel.stat")
nutrients2=d["water"]["Nutrient"]["integral"][-1]
    </variable>
    <variable name="ammonium1" language="python">
from fluidity_tools import stat_parser
d = stat_parser("biology_conservation_parallel.stat")
ammonium1=d["water"]["Ammonium"]["integral"][0]
    </variable>
    <variable name="ammonium2" language="python">
from fluidity_tools import stat_parser
d = stat_parser("biology_conservation_parallel.stat")
ammonium2=d["water"]["Ammonium"]["integral"][-1]
    </variable>
    <variable name="DifferencePerNode" language="python">
from numpy import array, zeros
import vtktools
u=vtktools.vtu('biology_conservation_parallel_0.pvtu')
z1 = u.GetScalarField('Zooplankton')
p1 = u.GetScalarField('Phytoplankton')
n1 = u.GetScalarField('Nutrient')
d1 = u.GetScalarField('Detritus')
a1 = u.GetScalarField('Ammonium')
u=vtktools.vtu('biology_conservation_parallel_2.pvtu')
z2 = u.GetScalarField('Zooplankton')
p2 = u.GetScalarField('Phytoplankton')
n2 = u.GetScalarField('Nutrient')
d2 = u.GetScalarField('Detritus')
a2 = u.GetScalarField('Ammonium')
nNodes = len(p1)
DifferencePerNode = zeros(nNodes)
for i in range(0,nNodes-1):
    DifferencePerNode[i] = p1[i]+z1[i]+d1[i]+n1[i]+a1[i]-z2[i]-p2[i]-n2[i]-d2[i]-a2[i]
</variable>
<variable name="PhotoRadiationSerial" language="python">
from fluidity_tools import stat_parser
d = stat_parser("biology_conservation.stat")
PhotoRadiationSerial=d["water"]["PhotosyntheticRadiation"]["integral"][0]
</variable>
<variable name="PhotoRadiationParallel" language="python">
from fluidity_tools import stat_parser
d = stat_parser("biology_conservation_parallel.stat")
PhotoRadiationParallel=d["water"]["PhotosyntheticRadiation"]["integral"][0]
</variable>
  </variables>
  <pass_tests>
    <test name="Solvers converged" language="python">
      assert(solvers_converged)
    </test>
      <test name="Check photosyntetic radiation is the same from serial to parallel" language="python">
          assert( (abs(PhotoRadiationParallel - PhotoRadiationSerial)/PhotoRadiationSerial) &lt; 1e-4)
      </test>
<!-- Note that Chlorophyll mass is already contained in the Phytoplankton, so
     we don't need to consider it in the mass balance              -->
      <test name="Total in water column conserved" language="python">
before = nutrients1 + detritus1 + phytoplankton1 + zooplankton1 + ammonium1
after = nutrients2 + detritus2 + phytoplankton2 + zooplankton2 + ammonium2
print(before, after, before-after)
assert (abs(before - after)/before &lt; 1e-6)
</test>
    <test name="Pointwise conservation" language="python">
nNodes = len(DifferencePerNode)
print(max(DifferencePerNode))
for i in range(0,nNodes-1):
    assert (DifferencePerNode[i] &lt; 1e-3)
</test>
  </pass_tests>
  <warn_tests>
  </warn_tests>
</testproblem>
