<?xml version='1.0' encoding='UTF-8'?>
<testproblem>
  <name>Square convection (DG version)</name>
  <owner userid="rhodrid"/>
  <tags>flml</tags>
  <problem_definition length="medium" nprocs="1">
    <command_line>make clean-run-debug; fluidity  square-convection.flml</command_line>
  </problem_definition>
  <variables>
    <variable name="times" language="python">import fluidity_tools
s = fluidity_tools.stat_parser("square-convection.stat")
times = s["ElapsedTime"]["value"]</variable>
    <variable name="max_cfl_numbers" language="python">import fluidity_tools
s = fluidity_tools.stat_parser("square-convection.stat")
max_cfl_numbers = s["BoussinesqFluid"]["CFLNumber"]["max"]</variable>
    <variable name="solvers_converged" language="python">import os
files = os.listdir("./")
solvers_converged = not "matrixdump" in files and not "matrixdump.info" in files</variable>
    <variable name="mid_point_u_maxes" language="python">import os
import vtk
files = os.listdir("./")
vtuFiles = []
for file in files:
  if file.endswith(".vtu") and "square-convection" in file and not "checkpoint" in file and not "continuous" in file:
    vtuFiles.append(file)
vtuFiles.sort()
mid_point_u_maxes = []
for i in range(len(vtuFiles)):
  vtuFile = "square-convection_" + str(i) + ".vtu"
  # Reading as in vtktools vtu constructor
  reader = vtk.vtkXMLUnstructuredGridReader()
  reader.SetFileName(vtuFile)
  reader.Update()
  vtu = reader.GetOutput()
  # Cutting references:
  #   ClipCow.py vtkCutter example of vtk documentation 5.0.4
  #   lock_exchange_tet.xml results variable
  # An implicit function with which to cut
  plane = vtk.vtkPlane()
  plane.SetOrigin(0.5, 0.0, 0.0)
  plane.SetNormal(1.0, 0.0, 0.0)
  # The cutter
  cutter = vtk.vtkCutter()
  cutter.SetCutFunction(plane)
  if vtk.vtkVersion.GetVTKMajorVersion() &lt;= 5:
    cutter.SetInput(vtu)
  else:
    cutter.SetInputData(vtu)
  # Cut
  cutter.Update()
  cutVtu = cutter.GetOutput()
  # Extraction of field data as in vtktools
  data = cutVtu.GetPointData().GetScalars("Velocity")
  u = [data.GetTuple3(i)[0] for i in range(data.GetNumberOfTuples())]
  mid_point_u_maxes.append(max(u))</variable>
    <variable name="mid_point_w_maxes" language="python">import os
import vtk
files = os.listdir("./")
vtuFiles = []
for file in files:
  if file.endswith(".vtu") and "square-convection" in file and not "checkpoint" in file and not "continuous" in file:
    vtuFiles.append(file)
vtuFiles.sort()
mid_point_w_maxes = []
for i in range(len(vtuFiles)):
  vtuFile = "square-convection_" + str(i) + ".vtu"
  # Reading as in vtktools vtu constructor
  reader = vtk.vtkXMLUnstructuredGridReader()
  reader.SetFileName(vtuFile)
  reader.Update()
  vtu = reader.GetOutput()
  # Cutting references:
  #   ClipCow.py vtkCutter example of vtk documentation 5.0.4
  #   lock_exchange_tet.xml results variable
  # An implicit function with which to cut
  plane = vtk.vtkPlane()
  plane.SetOrigin(0.0, 0.5, 0.0)
  plane.SetNormal(0.0, 1.0, 0.0)
  # The cutter
  cutter = vtk.vtkCutter()
  cutter.SetCutFunction(plane)
  if vtk.vtkVersion.GetVTKMajorVersion() &lt;= 5:
    cutter.SetInput(vtu)
  else:
    cutter.SetInputData(vtu)
  # Cut
  cutter.Update()
  cutVtu = cutter.GetOutput()
  # Extraction of field data as in vtktools
  data = cutVtu.GetPointData().GetScalars("Velocity")
  w = [data.GetTuple3(i)[1] for i in range(data.GetNumberOfTuples())]
  mid_point_w_maxes.append(max(w))</variable>
    <variable name="last_psi_mid" language="python">
import h5py
f = h5py.File('square-convection.detectors.h5part', 'r')
mp = f.attrs['MidPoint%ids'][0] - 1
n = len(f)-1
last_psi_mid = f[f'/Step#{n}/BoussinesqFluid%StreamFunction'][mp]
    </variable>
    <variable name="boundary_length" language="python">import fluidity_tools
s = fluidity_tools.stat_parser("square-convection.stat")
boundary_length = s["BoussinesqFluid"]["ValueSurfaceIntTest"]["surface_integral%ValueWholeMesh"]</variable>
    <variable name="gradient_normal_surface_integral" language="python">import fluidity_tools
s = fluidity_tools.stat_parser("square-convection.stat")
gradient_normal_surface_integral = s["BoussinesqFluid"]["Temperature"]["surface_integral%GradientNormalWholeMesh"]</variable>
    <variable name="left_boundary_average_nus" language="python">import fluidity_tools
s = fluidity_tools.stat_parser("square-convection.stat")
left_boundary_average_nus = s["BoussinesqFluid"]["Temperature"]["surface_integral%NusseltNoT1"]
for i in range(len(left_boundary_average_nus)):
  left_boundary_average_nus[i] = abs(left_boundary_average_nus[i])</variable>
    <variable name="right_boundary_average_nus" language="python">import fluidity_tools
s = fluidity_tools.stat_parser("square-convection.stat")
right_boundary_average_nus = s["BoussinesqFluid"]["Temperature"]["surface_integral%NusseltNoT0"]
for i in range(len(right_boundary_average_nus)):
  right_boundary_average_nus[i] = abs(right_boundary_average_nus[i])</variable>
  </variables>
  <pass_tests>
    <test name="SimulationCompleted" language="python">import fluidity_tools
fluidity_tools.compare_variable(times[-1], 1.0, 1.0e-6)</test>
    <test name="SolversConverged" language="python">assert(solvers_converged)</test>
    <test name="CFLNumberConstrained" language="python">print(max(max_cfl_numbers))
assert(max(max_cfl_numbers) &lt;= 5.0)
</test>
    <test name="UMaxBenchmark" language="python">import fluidity_tools
num, ref = mid_point_u_maxes[-1], 3.649
print(num, ref)
fluidity_tools.compare_variable(num, ref, 0.001)
</test>
    <test name="WMaxBenchmark" language="python">import fluidity_tools
num, ref = mid_point_w_maxes[-1], 3.697
print(num, ref)
fluidity_tools.compare_variable(num, ref, 0.002)
</test>
    <test name="MidPointStreamfunctionBenchmark" language="python">import fluidity_tools
num, ref = abs(last_psi_mid), 1.174
print(num, ref)
fluidity_tools.compare_variable(num, ref, 0.005)
</test>
    <test name="CorrectBoundaryLength" language="python">import fluidity_tools
fluidity_tools.compare_variables(boundary_length, [4.0 for i in range(len(boundary_length))], 1.0e-6)</test>
    <test name="AverageNuBenchmark" language="python">import fluidity_tools
num, ref = left_boundary_average_nus[-1], 1.118
print(num, ref)
fluidity_tools.compare_variable(num, ref, 0.002)
</test>
  </pass_tests>
  <warn_tests/>
</testproblem>
