<?xml version="1.0" encoding="UTF-8" ?>

<testproblem>
  <name>water collapse 2d</name>
  <owner userid="cwilson"/>
  <tags>flml 2dadapt</tags>
    <problem_definition length="medium" nprocs="1">
    <command_line>fluidity -v2 -l water_collapse.flml</command_line>
  </problem_definition>  
  <variables>  
    <variable name="solvers_converged" language="python">
import os
files = os.listdir("./")
solvers_converged = not "matrixdump" in files and not "matrixdump.info" in files
    </variable>
    <variable name="mindivergence" language="python">
from fluidity_tools import stat_parser as stat
mindivergence= max(abs(stat("water_collapse.stat")["Dense"]["ControlVolumeDivergence"]["min"]))
    </variable>
    <variable name="minvfrac" language="python">
from fluidity_tools import stat_parser as stat
minvfrac= max(stat("water_collapse.stat")["Dense"]["MaterialVolumeFraction"]["min"])
    </variable>
    <!--<variable name="mindensity" language="python">
from fluidity_tools import stat_parser as stat
mindensity= max(stat("water_collapse.stat")["Dense"]["Density"]["min"])
    </variable>-->
    <variable name="maxdivergence" language="python">
from fluidity_tools import stat_parser as stat
maxdivergence= max(stat("water_collapse.stat")["Dense"]["ControlVolumeDivergence"]["max"])
    </variable>
    <variable name="maxvfrac" language="python">
from fluidity_tools import stat_parser as stat
maxvfrac = max(stat("water_collapse.stat")["Dense"]["MaterialVolumeFraction"]["max"])
    </variable>
    <!--    <variable name="maxdensity" language="python">
from fluidity_tools import stat_parser as stat
maxdensity= max(stat("water_collapse.stat")["Dense"]["Density"]["max"])
    </variable>-->
    <variable name="vfracintstart" language="python">
from fluidity_tools import stat_parser as stat
vfracintstart= stat("water_collapse.stat")["Dense"]["MaterialVolumeFraction"]["integral"][0]
    </variable>
    <variable name="vfracintend" language="python">
from fluidity_tools import stat_parser as stat
vfracintend= stat("water_collapse.stat")["Dense"]["MaterialVolumeFraction"]["integral"][-1]
    </variable>
    <variable name="nodesstart" language="python">
from fluidity_tools import stat_parser as stat
nodesstart= stat("water_collapse.stat")["CoordinateMesh"]["nodes"][0]
    </variable>
    <variable name="nodesend" language="python">
from fluidity_tools import stat_parser as stat
nodesend= stat("water_collapse.stat")["CoordinateMesh"]["nodes"][-1]
    </variable>
    <variable name="lower_contour_bounds" language="python">
import vtk
import glob
import sys
import os
import scipy.stats
import operator

def get_last_dump():
  filelist = glob.glob('water_collapse_*[0-9].vtu')
  nums = []
  for i in range(len(filelist)):
    nums.append([i, int(filelist[i].split(".vtu")[0].split("_")[-1])])
  nums.sort(key=operator.itemgetter(1))
  print(filelist[nums[-1][0]])
  return filelist[nums[-1][0]]

def get_head_pos(file):
  try:
    os.stat(file)
  except:
    print("No such file: %s" % file)
    sys.exit(1)
  reader = vtk.vtkXMLUnstructuredGridReader();
  reader.SetFileName(file)
  reader.Update()
  data = reader.GetOutput()
  data.GetPointData().SetActiveScalars("Dense::MaterialVolumeFraction")
  contour = vtk.vtkContourFilter ()
  if vtk.vtkVersion.GetVTKMajorVersion() &lt;= 5:
    contour.SetInput(data)
  else:
    contour.SetInputData(data)
  contour.SetValue(0, 0.025)
  contour.Update()
  polydata = contour.GetOutput()
  bounding_box = polydata.GetBounds()
  return bounding_box
  
lower_contour_bounds= get_head_pos(get_last_dump())
    </variable>
    <variable name="mid_contour_bounds" language="python">
import vtk
import glob
import sys
import os
import scipy.stats
import operator

def get_last_dump():
  filelist = glob.glob('water_collapse_*[0-9].vtu')
  nums = []
  for i in range(len(filelist)):
    nums.append([i, int(filelist[i].split(".vtu")[0].split("_")[-1])])
  nums.sort(key=operator.itemgetter(1))
  print(filelist[nums[-1][0]])
  return filelist[nums[-1][0]]

def get_head_pos(file):
  try:
    os.stat(file)
  except:
    print("No such file: %s" % file)
    sys.exit(1)
  reader = vtk.vtkXMLUnstructuredGridReader();
  reader.SetFileName(file)
  reader.Update()
  data = reader.GetOutput()
  data.GetPointData().SetActiveScalars("Dense::MaterialVolumeFraction")
  contour = vtk.vtkContourFilter ()
  if vtk.vtkVersion.GetVTKMajorVersion() &lt;= 5:
    contour.SetInput(data)
  else:
    contour.SetInputData(data)
  contour.SetValue(0, 0.5)
  contour.Update()
  polydata = contour.GetOutput()
  bounding_box = polydata.GetBounds()
  return bounding_box
  
mid_contour_bounds= get_head_pos(get_last_dump())
    </variable>
    <variable name="upper_contour_bounds" language="python">
import vtk
import glob
import sys
import os
import scipy.stats
import operator

def get_last_dump():
  filelist = glob.glob('water_collapse_*[0-9].vtu')
  nums = []
  for i in range(len(filelist)):
    nums.append([i, int(filelist[i].split(".vtu")[0].split("_")[-1])])
  nums.sort(key=operator.itemgetter(1))
  print(filelist[nums[-1][0]])
  return filelist[nums[-1][0]]

def get_head_pos(file):
  try:
    os.stat(file)
  except:
    print("No such file: %s" % file)
    sys.exit(1)
  reader = vtk.vtkXMLUnstructuredGridReader();
  reader.SetFileName(file)
  reader.Update()
  data = reader.GetOutput()
  data.GetPointData().SetActiveScalars("Dense::MaterialVolumeFraction")
  contour = vtk.vtkContourFilter ()
  if vtk.vtkVersion.GetVTKMajorVersion() &lt;= 5:
    contour.SetInput(data)
  else:
    contour.SetInputData(data)
  contour.SetValue(0, 0.975)
  contour.Update()
  polydata = contour.GetOutput()
  bounding_box = polydata.GetBounds()
  return bounding_box
  
upper_contour_bounds= get_head_pos(get_last_dump())
    </variable>
    <variable name="insidecolumn" language="python">
import h5py
import numpy as np
f = h5py.File('water_collapse.detectors.h5part', 'r')
insidecolumn = np.fromiter((f[f'/Step#{i}/Dense%MaterialVolumeFraction'][0] for i in range(len(f))), np.float).min()
    </variable>
  </variables>    
  <pass_tests> 
    <test name="Solvers converged" language="python">
      assert(solvers_converged)
    </test>
    <test name="check water was conserved" language="python">
print('mass loss = ', abs(vfracintend-vfracintstart))
assert abs(vfracintend-vfracintstart) &lt; max(maxdivergence, mindivergence)
    </test>
    <test name="check that reasonable tolerance is being used to test conservation" language="python">
print('divergence tolerance = ', max(maxdivergence, mindivergence))
assert max(maxdivergence, mindivergence) &lt; 1.E-5
    </test>
    <test name="check max volume fraction bound" language="python">
assert abs(maxvfrac-1.0) &lt; 1.E-10
    </test>
    <test name="check min volume fraction bound" language="python">
assert abs(minvfrac) &lt; 1.E-10
    </test>
    <test name="check water column has travelled max x" language="python">
print(mid_contour_bounds[1], '&lt;', -0.1)
assert mid_contour_bounds[1] &lt; -0.1
    </test>
    <test name="check water column has travelled min x" language="python">
print(mid_contour_bounds[1], '&gt;', -0.12)
assert mid_contour_bounds[1] &gt; -0.12
    </test>
    <test name="check water column has travelled max y" language="python">
print(mid_contour_bounds[3], '&lt;', 0.0)
assert mid_contour_bounds[3] &lt; 0.0
    </test>
    <test name="check water column has travelled min y" language="python">
print(mid_contour_bounds[3], '&gt;', -0.1)
assert mid_contour_bounds[3] &gt; -0.1
    </test>
    <test name="check contours are tight lower x" language="python">
print(abs(mid_contour_bounds[1]-lower_contour_bounds[1]))
assert abs(mid_contour_bounds[1]-lower_contour_bounds[1]) &lt; 0.02
    </test>
    <test name="check contours are tight upper x" language="python">
print(abs(mid_contour_bounds[1]-upper_contour_bounds[1]))
assert abs(mid_contour_bounds[1]-upper_contour_bounds[1]) &lt; 0.02
    </test>
    <test name="check contours are tight lower y" language="python">
print(abs(mid_contour_bounds[3]-lower_contour_bounds[3]))
assert abs(mid_contour_bounds[3]-lower_contour_bounds[3]) &lt; 0.02
    </test>
    <test name="check contours are tight upper y" language="python">
print(abs(mid_contour_bounds[3]-upper_contour_bounds[3]))
assert abs(mid_contour_bounds[3]-upper_contour_bounds[3]) &lt; 0.02
    </test>
    <test name="check no. nodes has increased" language="python">
assert nodesend &gt; nodesstart
    </test>
  </pass_tests>
  <warn_tests>
    <test name="check water columns is still 1 inside" language="python">
assert abs(insidecolumn-1.0) &lt; 1E-10
    </test>
  </warn_tests>
</testproblem>
