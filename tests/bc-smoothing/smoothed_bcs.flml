<?xml version='1.0' encoding='utf-8'?>
<fluidity_options>
  <simulation_name>
    <string_value lines="1">out</string_value>
  </simulation_name>
  <problem_type>
    <string_value lines="1">fluids</string_value>
  </problem_type>
  <geometry>
    <dimension>
      <integer_value rank="0">3</integer_value>
    </dimension>
    <mesh name="CoordinateMesh">
      <from_file file_name="cube">
        <format name="gmsh"/>
        <stat>
          <include_in_stat/>
        </stat>
      </from_file>
    </mesh>
    <mesh name="VelocityMesh">
      <from_mesh>
        <mesh name="CoordinateMesh"/>
        <mesh_shape>
          <polynomial_degree>
            <integer_value rank="0">2</integer_value>
          </polynomial_degree>
        </mesh_shape>
        <stat>
          <exclude_from_stat/>
        </stat>
      </from_mesh>
    </mesh>
    <mesh name="P1DG">
      <from_mesh>
        <mesh name="CoordinateMesh"/>
        <mesh_continuity>
          <string_value>discontinuous</string_value>
        </mesh_continuity>
        <stat>
          <exclude_from_stat/>
        </stat>
      </from_mesh>
    </mesh>
    <quadrature>
      <degree>
        <integer_value rank="0">5</integer_value>
      </degree>
    </quadrature>
  </geometry>
  <io>
    <dump_format>
      <string_value>vtk</string_value>
    </dump_format>
    <dump_period>
      <constant>
        <real_value rank="0">1</real_value>
      </constant>
    </dump_period>
    <output_mesh name="VelocityMesh"/>
    <stat/>
  </io>
  <timestepping>
    <current_time>
      <real_value rank="0">0</real_value>
    </current_time>
    <timestep>
      <real_value rank="0">1</real_value>
    </timestep>
    <finish_time>
      <real_value rank="0">1</real_value>
    </finish_time>
    <final_timestep>
      <integer_value rank="0">1</integer_value>
    </final_timestep>
  </timestepping>
  <material_phase name="Fields">
    <vector_field name="Velocity" rank="1">
      <prognostic>
        <mesh name="VelocityMesh"/>
        <equation name="Boussinesq"/>
        <spatial_discretisation>
          <continuous_galerkin>
            <stabilisation>
              <no_stabilisation/>
            </stabilisation>
            <mass_terms/>
            <advection_terms>
              <exclude_advection_terms/>
            </advection_terms>
            <stress_terms>
              <tensor_form/>
            </stress_terms>
            <buoyancy/>
          </continuous_galerkin>
          <conservative_advection>
            <real_value rank="0">1.0</real_value>
          </conservative_advection>
        </spatial_discretisation>
        <temporal_discretisation>
          <theta>
            <real_value rank="0">1</real_value>
          </theta>
          <relaxation>
            <real_value rank="0">1</real_value>
          </relaxation>
        </temporal_discretisation>
        <solver>
          <iterative_method name="gmres"/>
          <preconditioner name="sor"/>
          <relative_error>
            <real_value rank="0">1e-7</real_value>
          </relative_error>
          <max_iterations>
            <integer_value rank="0">1000</integer_value>
          </max_iterations>
          <never_ignore_solver_failures/>
          <diagnostics>
            <print_norms/>
            <monitors/>
          </diagnostics>
        </solver>
        <initial_condition name="WholeMesh">
          <python>
            <string_value type="code" lines="20" language="python">def val(X,t):
  uvw = [0,0,0]
  for i in range(3):
    if X[i]&lt;0.499:
      uvw[i] = -1
    else:
      uvw[i] = 1
  return uvw</string_value>
          </python>
        </initial_condition>
        <boundary_conditions name="LeftRight">
          <surface_ids>
            <integer_value shape="6" rank="1">1 2 3 4 5 6</integer_value>
          </surface_ids>
          <type name="dirichlet">
            <align_bc_with_cartesian>
              <x_component>
                <python>
                  <string_value type="code" lines="20" language="python">def val(X,t):
  if X[0]&lt;0.499:
    return -1.0
  else:
    return 1.0</string_value>
                </python>
              </x_component>
              <y_component>
                <python>
                  <string_value lines="20" type="code" language="python">def val(X,t):
  if X[1]&lt;0.499:
    return -1.0
  else:
    return 1.0</string_value>
                </python>
                <smoothing>
                  <iterations>
                    <integer_value rank="0">10</integer_value>
                  </iterations>
                </smoothing>
              </y_component>
              <z_component>
                <python>
                  <string_value lines="20" type="code" language="python">def val(X,t):
  if X[2]&lt;0.499:
    return -1.0
  else:
    return 1.0</string_value>
                </python>
                <smoothing>
                  <iterations>
                    <integer_value rank="0">10</integer_value>
                  </iterations>
                </smoothing>
              </z_component>
            </align_bc_with_cartesian>
          </type>
        </boundary_conditions>
        <output/>
        <stat>
          <include_in_stat/>
          <previous_time_step>
            <exclude_from_stat/>
          </previous_time_step>
          <nonlinear_field>
            <exclude_from_stat/>
          </nonlinear_field>
        </stat>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
        <consistent_interpolation/>
      </prognostic>
    </vector_field>
    <scalar_field name="SurfaceMarkerX" rank="0">
      <prognostic>
        <mesh name="P1DG"/>
        <equation name="AdvectionDiffusion"/>
        <spatial_discretisation>
          <discontinuous_galerkin>
            <advection_scheme>
              <none/>
              <integrate_advection_by_parts>
                <twice/>
              </integrate_advection_by_parts>
            </advection_scheme>
            <diffusion_scheme>
              <compact_discontinuous_galerkin/>
            </diffusion_scheme>
          </discontinuous_galerkin>
          <conservative_advection>
            <real_value rank="0">1</real_value>
          </conservative_advection>
        </spatial_discretisation>
        <temporal_discretisation>
          <theta>
            <real_value rank="0">1</real_value>
          </theta>
        </temporal_discretisation>
        <solver>
          <iterative_method name="gmres"/>
          <preconditioner name="sor"/>
          <relative_error>
            <real_value rank="0">1e-7</real_value>
          </relative_error>
          <max_iterations>
            <integer_value rank="0">1000</integer_value>
          </max_iterations>
          <never_ignore_solver_failures/>
          <diagnostics>
            <monitors/>
          </diagnostics>
        </solver>
        <initial_condition name="WholeMesh">
          <constant>
            <real_value rank="0">0</real_value>
          </constant>
        </initial_condition>
        <boundary_conditions name="SurfaceOne">
          <surface_ids>
            <integer_value shape="4" rank="1">3 4 5 6</integer_value>
          </surface_ids>
          <type name="dirichlet">
            <constant>
              <real_value rank="0">1</real_value>
            </constant>
          </type>
        </boundary_conditions>
        <boundary_conditions name="Ends">
          <surface_ids>
            <integer_value shape="2" rank="1">1 2</integer_value>
          </surface_ids>
          <type name="dirichlet">
            <constant>
              <real_value rank="0">0</real_value>
            </constant>
          </type>
        </boundary_conditions>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
        <consistent_interpolation/>
      </prognostic>
    </scalar_field>
    <scalar_field name="SurfaceMarkerY" rank="0">
      <prognostic>
        <mesh name="P1DG"/>
        <equation name="AdvectionDiffusion"/>
        <spatial_discretisation>
          <discontinuous_galerkin>
            <advection_scheme>
              <none/>
              <integrate_advection_by_parts>
                <twice/>
              </integrate_advection_by_parts>
            </advection_scheme>
            <diffusion_scheme>
              <compact_discontinuous_galerkin/>
            </diffusion_scheme>
          </discontinuous_galerkin>
          <conservative_advection>
            <real_value rank="0">1</real_value>
          </conservative_advection>
        </spatial_discretisation>
        <temporal_discretisation>
          <theta>
            <real_value rank="0">1</real_value>
          </theta>
        </temporal_discretisation>
        <solver>
          <iterative_method name="gmres"/>
          <preconditioner name="sor"/>
          <relative_error>
            <real_value rank="0">1e-7</real_value>
          </relative_error>
          <max_iterations>
            <integer_value rank="0">1000</integer_value>
          </max_iterations>
          <never_ignore_solver_failures/>
          <diagnostics>
            <monitors/>
          </diagnostics>
        </solver>
        <initial_condition name="WholeMesh">
          <constant>
            <real_value rank="0">0</real_value>
          </constant>
        </initial_condition>
        <boundary_conditions name="Surface">
          <surface_ids>
            <integer_value shape="4" rank="1">1 2 5 6</integer_value>
          </surface_ids>
          <type name="dirichlet">
            <constant>
              <real_value rank="0">1</real_value>
            </constant>
          </type>
        </boundary_conditions>
        <boundary_conditions name="Ends">
          <surface_ids>
            <integer_value shape="2" rank="1">3 4</integer_value>
          </surface_ids>
          <type name="dirichlet">
            <constant>
              <real_value rank="0">0</real_value>
            </constant>
          </type>
        </boundary_conditions>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
        <consistent_interpolation/>
      </prognostic>
    </scalar_field>
    <scalar_field name="SurfaceMarkerZ" rank="0">
      <prognostic>
        <mesh name="P1DG"/>
        <equation name="AdvectionDiffusion"/>
        <spatial_discretisation>
          <discontinuous_galerkin>
            <advection_scheme>
              <none/>
              <integrate_advection_by_parts>
                <twice/>
              </integrate_advection_by_parts>
            </advection_scheme>
            <diffusion_scheme>
              <compact_discontinuous_galerkin/>
            </diffusion_scheme>
          </discontinuous_galerkin>
          <conservative_advection>
            <real_value rank="0">1</real_value>
          </conservative_advection>
        </spatial_discretisation>
        <temporal_discretisation>
          <theta>
            <real_value rank="0">1</real_value>
          </theta>
        </temporal_discretisation>
        <solver>
          <iterative_method name="gmres"/>
          <preconditioner name="sor"/>
          <relative_error>
            <real_value rank="0">1e-7</real_value>
          </relative_error>
          <max_iterations>
            <integer_value rank="0">1000</integer_value>
          </max_iterations>
          <never_ignore_solver_failures/>
          <diagnostics>
            <monitors/>
          </diagnostics>
        </solver>
        <initial_condition name="WholeMesh">
          <constant>
            <real_value rank="0">0</real_value>
          </constant>
        </initial_condition>
        <boundary_conditions name="Surface">
          <surface_ids>
            <integer_value shape="4" rank="1">1 2 3 4</integer_value>
          </surface_ids>
          <type name="dirichlet">
            <constant>
              <real_value rank="0">1</real_value>
            </constant>
          </type>
        </boundary_conditions>
        <boundary_conditions name="Ends">
          <surface_ids>
            <integer_value shape="2" rank="1">5 6</integer_value>
          </surface_ids>
          <type name="dirichlet">
            <constant>
              <real_value rank="0">0</real_value>
            </constant>
          </type>
        </boundary_conditions>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
        <consistent_interpolation/>
      </prognostic>
    </scalar_field>
    <vector_field name="VelocityGradAlongSurface" rank="1">
      <diagnostic>
        <algorithm name="vector_python_diagnostic" material_phase_support="single">
          <string_value type="code" lines="20" language="python"># compute the x-derivative of the u component of velocity
# only at those surfaces where this component is along the surface
# followed by y-derivative of v-velocity, and z-derivative of w-velocity
grad=state.tensor_fields['VelocityGrad']
for i, component in enumerate('XYZ'):
  marker = state.scalar_fields['SurfaceMarker'+component]
  field.val[:,i] = grad.val[:,i,i] * marker.val</string_value>
          <depends>
            <string_value lines="1">VelocityGrad</string_value>
          </depends>
        </algorithm>
        <mesh name="P1DG"/>
        <output/>
        <stat>
          <include_in_stat/>
        </stat>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </vector_field>
    <tensor_field name="VelocityGrad" rank="2">
      <diagnostic>
        <algorithm material_phase_support="single " source_field_type="vector" source_field_name="Velocity" name="grad_vector"/>
        <mesh name="P1DG"/>
        <output/>
        <stat>
          <include_in_stat/>
        </stat>
      </diagnostic>
    </tensor_field>
  </material_phase>
</fluidity_options>
