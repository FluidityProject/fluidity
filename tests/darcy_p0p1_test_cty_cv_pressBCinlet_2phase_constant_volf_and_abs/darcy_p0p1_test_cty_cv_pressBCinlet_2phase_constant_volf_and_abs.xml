<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE testproblem SYSTEM "regressiontest.dtd">

<testproblem>
  <name>darcy_p0p1_test_cty_cv_pressBCinlet_2phase_constant_volf_and_abs</name>
  <owner userid="btollit"/>
  <tags>flml darcy</tags>
  <problem_definition length="short" nprocs="1">
    <command_line>
fluidity  darcy_p0p1_test_cty_cv_pressBCinlet_2phase_constant_volf_and_abs_2d.flml
fluidity  darcy_p0p1_test_cty_cv_pressBCinlet_2phase_constant_volf_and_abs_3d.flml
    </command_line>
    <!-- Two/three dimensional problem for darcy flow with one region and one material using p0p1 element type testing the pressure gradient against analytic and the velocity. This has two phases with constant saturations and each with a constant momentum absorption. -->
  </problem_definition>
  <variables>
    <variable name="pressure_2d" language="python">
import vtktools
v = vtktools.vtu("darcy_p0p1_test_cty_cv_pressBCinlet_2phase_constant_volf_and_abs_2d_5.vtu")
pressure_2d = v.GetScalarRange("phase1::Pressure")
    </variable>
    <variable name="phase1_vel_2d" language="python">
import vtktools
v = vtktools.vtu("darcy_p0p1_test_cty_cv_pressBCinlet_2phase_constant_volf_and_abs_2d_5.vtu")
phase1_vel_2d = max(v.GetScalarRange("phase1::Velocity"))
    </variable>
    <variable name="phase2_vel_2d" language="python">
import vtktools
v = vtktools.vtu("darcy_p0p1_test_cty_cv_pressBCinlet_2phase_constant_volf_and_abs_2d_5.vtu")
phase2_vel_2d = max(v.GetScalarRange("phase2::Velocity"))
    </variable>
    <variable name="max_sat1_2d" language="python">    
from fluidity_tools import stat_parser as stat
max_sat1_2d = stat("darcy_p0p1_test_cty_cv_pressBCinlet_2phase_constant_volf_and_abs_2d.stat")["phase1"]["PhaseVolumeFraction"]["max"][-1]
    </variable>
    <variable name="min_sat1_2d" language="python">    
from fluidity_tools import stat_parser as stat
min_sat1_2d = stat("darcy_p0p1_test_cty_cv_pressBCinlet_2phase_constant_volf_and_abs_2d.stat")["phase1"]["PhaseVolumeFraction"]["min"][-1]
    </variable>
    <variable name="max_sat2_2d" language="python">    
from fluidity_tools import stat_parser as stat
max_sat2_2d = stat("darcy_p0p1_test_cty_cv_pressBCinlet_2phase_constant_volf_and_abs_2d.stat")["phase2"]["PhaseVolumeFraction"]["max"][-1]
    </variable>
    <variable name="min_sat2_2d" language="python">    
from fluidity_tools import stat_parser as stat
min_sat2_2d = stat("darcy_p0p1_test_cty_cv_pressBCinlet_2phase_constant_volf_and_abs_2d.stat")["phase2"]["PhaseVolumeFraction"]["min"][-1]
    </variable>
    <variable name="max_sum_div_vel_2d" language="python">    
from fluidity_tools import stat_parser as stat
max_sum_div_vel_2d = max(abs(stat("darcy_p0p1_test_cty_cv_pressBCinlet_2phase_constant_volf_and_abs_2d.stat")["phase1"]["SumVelocityDivergence"]["max"]))
    </variable>
    <variable name="max_sum_sat_2d" language="python">    
from fluidity_tools import stat_parser as stat
max_sum_sat_2d = max(abs(stat("darcy_p0p1_test_cty_cv_pressBCinlet_2phase_constant_volf_and_abs_2d.stat")["phase1"]["SumPhaseVolumeFraction"]["max"]))
    </variable>
    <variable name="max_darcy_cv_courant_cons_imp_2d" language="python">    
from fluidity_tools import stat_parser as stat
max_darcy_cv_courant_cons_imp_2d = stat("darcy_p0p1_test_cty_cv_pressBCinlet_2phase_constant_volf_and_abs_2d.stat")["phase1"]["ControlVolumeCFLNumber"]["max"][-1]
    </variable>
    <variable name="max_interstitial_cv_courant_cons_imp_2d" language="python">    
from fluidity_tools import stat_parser as stat
max_interstitial_cv_courant_cons_imp_2d = stat("darcy_p0p1_test_cty_cv_pressBCinlet_2phase_constant_volf_and_abs_2d.stat")["phase1"]["InterstitialVelocityCVCourantNumber"]["max"][-1]
    </variable>

    <variable name="pressure_3d" language="python">
import vtktools
v = vtktools.vtu("darcy_p0p1_test_cty_cv_pressBCinlet_2phase_constant_volf_and_abs_3d_5.vtu")
pressure_3d = v.GetScalarRange("phase1::Pressure")
    </variable>
    <variable name="phase1_vel_3d" language="python">
import vtktools
v = vtktools.vtu("darcy_p0p1_test_cty_cv_pressBCinlet_2phase_constant_volf_and_abs_3d_5.vtu")
phase1_vel_3d = max(v.GetScalarRange("phase1::Velocity"))
    </variable>
    <variable name="phase2_vel_3d" language="python">
import vtktools
v = vtktools.vtu("darcy_p0p1_test_cty_cv_pressBCinlet_2phase_constant_volf_and_abs_3d_5.vtu")
phase2_vel_3d = max(v.GetScalarRange("phase2::Velocity"))
    </variable>
    <variable name="max_sat1_3d" language="python">    
from fluidity_tools import stat_parser as stat
max_sat1_3d = stat("darcy_p0p1_test_cty_cv_pressBCinlet_2phase_constant_volf_and_abs_3d.stat")["phase1"]["PhaseVolumeFraction"]["max"][-1]
    </variable>
    <variable name="min_sat1_3d" language="python">    
from fluidity_tools import stat_parser as stat
min_sat1_3d = stat("darcy_p0p1_test_cty_cv_pressBCinlet_2phase_constant_volf_and_abs_3d.stat")["phase1"]["PhaseVolumeFraction"]["min"][-1]
    </variable>
    <variable name="max_sat2_3d" language="python">    
from fluidity_tools import stat_parser as stat
max_sat2_3d = stat("darcy_p0p1_test_cty_cv_pressBCinlet_2phase_constant_volf_and_abs_3d.stat")["phase2"]["PhaseVolumeFraction"]["max"][-1]
    </variable>
    <variable name="min_sat2_3d" language="python">    
from fluidity_tools import stat_parser as stat
min_sat2_3d = stat("darcy_p0p1_test_cty_cv_pressBCinlet_2phase_constant_volf_and_abs_3d.stat")["phase2"]["PhaseVolumeFraction"]["min"][-1]
    </variable>
    <variable name="max_sum_div_vel_3d" language="python">    
from fluidity_tools import stat_parser as stat
max_sum_div_vel_3d = max(abs(stat("darcy_p0p1_test_cty_cv_pressBCinlet_2phase_constant_volf_and_abs_3d.stat")["phase1"]["SumVelocityDivergence"]["max"]))
    </variable>
    <variable name="max_sum_sat_3d" language="python">    
from fluidity_tools import stat_parser as stat
max_sum_sat_3d = max(abs(stat("darcy_p0p1_test_cty_cv_pressBCinlet_2phase_constant_volf_and_abs_3d.stat")["phase1"]["SumPhaseVolumeFraction"]["max"]))
    </variable>
    <variable name="max_darcy_cv_courant_cons_imp_3d" language="python">    
from fluidity_tools import stat_parser as stat
max_darcy_cv_courant_cons_imp_3d = stat("darcy_p0p1_test_cty_cv_pressBCinlet_2phase_constant_volf_and_abs_3d.stat")["phase1"]["ControlVolumeCFLNumber"]["max"][-1]
    </variable>
    <variable name="max_interstitial_cv_courant_cons_imp_3d" language="python">    
from fluidity_tools import stat_parser as stat
max_interstitial_cv_courant_cons_imp_3d = stat("darcy_p0p1_test_cty_cv_pressBCinlet_2phase_constant_volf_and_abs_3d.stat")["phase1"]["InterstitialVelocityCVCourantNumber"]["max"][-1]
    </variable>
  </variables>
  <pass_tests>
    <test name="Check pressure gradient for 2d with tolerance 1.0e-09" language="python">
grad_P = abs(max(pressure_2d) - min(pressure_2d)) / 300.0
reference_val = 2.0e+05 / 300.0 
print 'Relative error of pressure gradient ',abs((grad_P - reference_val)/reference_val)
assert abs((grad_P - reference_val)/reference_val) &lt; 1.0e-09
    </test>
    <test name="Check velocity 2d for phase 1 with tolerance 1.0e-09" language="python">
# reference val = (pressure_grad / abs ) * sat
reference_val = (2.0e+05 / 300.0) * (0.2/100.0)
print 'Relative error of phase 2 velocity: ',abs((phase1_vel_2d - reference_val)/reference_val)
assert abs((phase1_vel_2d - reference_val)/reference_val) &lt; 1.0e-09
    </test>
    <test name="Check velocity 2d for phase 2 with tolerance 1.0e-09" language="python">
# reference val = (pressure_grad / abs ) * sat
reference_val = (2.0e+05 / 300.0) * (0.8/100.0)
print 'Relative error of phase 2 velocity: ',abs((phase2_vel_2d - reference_val)/reference_val)
assert abs((phase2_vel_2d - reference_val)/reference_val) &lt; 1.0e-09
    </test>
    <test name="Check max saturation 2d for phase 1 with tolerance 1.0e-09" language="python">
reference_val = 0.2
print 'Relative error of phase 1 max saturation ',abs((max_sat1_2d - reference_val)/reference_val)
assert abs((max_sat1_2d - reference_val)/reference_val) &lt; 1.0e-09
    </test>
    <test name="Check min saturation 2d for phase 1 with tolerance 1.0e-09" language="python">
reference_val = 0.2
print 'Relative error of phase 1 max saturation ',abs((min_sat1_2d - reference_val)/reference_val)
assert abs((min_sat1_2d - reference_val)/reference_val) &lt; 1.0e-09
    </test>
    <test name="Check max saturation 2d for phase 2 with tolerance 1.0e-09" language="python">
reference_val = 0.8
print 'Relative error of phase 1 max saturation ',abs((max_sat2_2d - reference_val)/reference_val)
assert abs((max_sat2_2d - reference_val)/reference_val) &lt; 1.0e-09
    </test>
    <test name="Check min saturation 2d for phase 2 with tolerance 1.0e-09" language="python">
reference_val = 0.8
print 'Relative error of phase 1 max saturation ',abs((min_sat2_2d - reference_val)/reference_val)
assert abs((min_sat2_2d - reference_val)/reference_val) &lt; 1.0e-09
    </test>
    <test name="Check sum velocity divergence 2d with tolerance 1.0e-09" language="python">
assert abs(max_sum_div_vel_2d) &lt; 1.0e-09
    </test>
    <test name="Check sum saturation 2d with tolerance 1.0e-09" language="python">
reference_val = 1.0
print 'Relative error of sum saturation ',abs((max_sum_sat_2d - reference_val)/reference_val)
assert abs((max_sum_sat_2d - reference_val)/reference_val) &lt; 1.0e-09
    </test>
    <test name="max_interstitial_cv_courant_cons_imp_2d = max_darcy_cv_courant_cons_imp_2d / porosity, check with tolerance 1.0e-08" language="python">
porosity = 0.2
print 'Solution absolute error: ',abs(max_interstitial_cv_courant_cons_imp_2d - (max_darcy_cv_courant_cons_imp_2d / porosity))
assert abs(max_interstitial_cv_courant_cons_imp_2d - (max_darcy_cv_courant_cons_imp_2d / porosity)) &lt; 1.0e-08
    </test>

    <test name="Check pressure gradient for 3d with tolerance 1.0e-09" language="python">
grad_P = abs(max(pressure_3d) - min(pressure_3d)) / 300.0
reference_val = 2.0e+05 / 300.0 
print 'Relative error of pressure gradient ',abs((grad_P - reference_val)/reference_val)
assert abs((grad_P - reference_val)/reference_val) &lt; 1.0e-09
    </test>
    <test name="Check velocity 3d for phase 1 with tolerance 1.0e-09" language="python">
# reference val = (pressure_grad / abs ) * sat
reference_val = (2.0e+05 / 300.0) * (0.2/100.0)
print 'Relative error of phase 2 velocity: ',abs((phase1_vel_3d - reference_val)/reference_val)
assert abs((phase1_vel_3d - reference_val)/reference_val) &lt; 1.0e-09
    </test>
    <test name="Check velocity 3d for phase 2 with tolerance 1.0e-09" language="python">
# reference val = (pressure_grad / abs ) * sat
reference_val = (2.0e+05 / 300.0) * (0.8/100.0)
print 'Relative error of phase 2 velocity: ',abs((phase2_vel_3d - reference_val)/reference_val)
assert abs((phase2_vel_3d - reference_val)/reference_val) &lt; 1.0e-09
    </test>
    <test name="Check max saturation 3d for phase 1 with tolerance 1.0e-09" language="python">
reference_val = 0.2
print 'Relative error of phase 1 max saturation ',abs((max_sat1_3d - reference_val)/reference_val)
assert abs((max_sat1_3d - reference_val)/reference_val) &lt; 1.0e-09
    </test>
    <test name="Check min saturation 3d for phase 1 with tolerance 1.0e-09" language="python">
reference_val = 0.2
print 'Relative error of phase 1 max saturation ',abs((min_sat1_3d - reference_val)/reference_val)
assert abs((min_sat1_3d - reference_val)/reference_val) &lt; 1.0e-09
    </test>
    <test name="Check max saturation 3d for phase 2 with tolerance 1.0e-09" language="python">
reference_val = 0.8
print 'Relative error of phase 1 max saturation ',abs((max_sat2_3d - reference_val)/reference_val)
assert abs((max_sat2_3d - reference_val)/reference_val) &lt; 1.0e-09
    </test>
    <test name="Check min saturation 3d for phase 2 with tolerance 1.0e-09" language="python">
reference_val = 0.8
print 'Relative error of phase 1 max saturation ',abs((min_sat2_3d - reference_val)/reference_val)
assert abs((min_sat2_3d - reference_val)/reference_val) &lt; 1.0e-09
    </test>
    <test name="Check sum velocity divergence 3d with tolerance 2.0e-06" language="python">
assert abs(max_sum_div_vel_3d) &lt; 2.0e-06
    </test>
    <test name="Check sum saturation 3d with tolerance 1.0e-09" language="python">
reference_val = 1.0
print 'Relative error of sum saturation ',abs((max_sum_sat_3d - reference_val)/reference_val)
assert abs((max_sum_sat_3d - reference_val)/reference_val) &lt; 1.0e-09
    </test>
    <test name="max_interstitial_cv_courant_cons_imp_3d = max_darcy_cv_courant_cons_imp_3d / porosity, check with tolerance 1.0e-08" language="python">
porosity = 0.2
print 'Solution absolute error: ',abs(max_interstitial_cv_courant_cons_imp_3d - (max_darcy_cv_courant_cons_imp_3d / porosity))
assert abs(max_interstitial_cv_courant_cons_imp_3d - (max_darcy_cv_courant_cons_imp_3d / porosity)) &lt; 1.0e-08
    </test>
  </pass_tests>
  <warn_tests>
  </warn_tests>
</testproblem>
