<?xml version='1.0' encoding='UTF-8'?>
<testproblem>
  <name>p2p1 navier stokes spatial convergence test with strong bc and stress form viscosity</name>
  <owner userid="cwilson"/>
  <tags>flml</tags>
  <problem_definition length="long" nprocs="1">
    <command_line>mpiexec fluidity -v1 MMS_A.flml &gt; MMS_A.log; mpiexec fluidity -v1 MMS_B.flml &gt; MMS_B.log; mpiexec fluidity -v1 MMS_C.flml &gt; MMS_C.log; mpiexec fluidity -v1 MMS_D.flml &gt; MMS_D.log</command_line>
    <!--<command_line> fluidity -v2 MMS_A.flml &gt; MMS_A.log;  fluidity -v2 MMS_B.flml &gt; MMS_B.log;  fluidity -v2 MMS_C.flml &gt; MMS_C.log;  fluidity -v2 MMS_D.flml &gt; MMS_D.log</command_line>-->
  </problem_definition>
  <variables>
    <variable name="ab_convergence_vel" language="python">
from fluidity_tools import stat_parser as stat
from math import log

a_error_x = stat("MMS_A.stat")["NS"]["VelocityAbsoluteDifference%1"]["l2norm"][-1]
b_error_x = stat("MMS_B.stat")["NS"]["VelocityAbsoluteDifference%1"]["l2norm"][-1]
a_error_y = stat("MMS_A.stat")["NS"]["VelocityAbsoluteDifference%2"]["l2norm"][-1]
b_error_y = stat("MMS_B.stat")["NS"]["VelocityAbsoluteDifference%2"]["l2norm"][-1]

a_error_inf_x = stat("MMS_A.stat")["NS"]["VelocityAbsoluteDifference%1"]["max"][-1]
b_error_inf_x = stat("MMS_B.stat")["NS"]["VelocityAbsoluteDifference%1"]["max"][-1]
a_error_inf_y = stat("MMS_A.stat")["NS"]["VelocityAbsoluteDifference%2"]["max"][-1]
b_error_inf_y = stat("MMS_B.stat")["NS"]["VelocityAbsoluteDifference%2"]["max"][-1]

print(a_error_x)
print(b_error_x)
print(a_error_y)
print(b_error_y)

print(a_error_inf_x)
print(b_error_inf_x)
print(a_error_inf_y)
print(b_error_inf_y)

ab_ratio_x = a_error_x / b_error_x
ab_ratio_y = a_error_y / b_error_y
ab_ratio_inf_x = a_error_inf_x / b_error_inf_x
ab_ratio_inf_y = a_error_inf_y / b_error_inf_y
ab_convergence_vel = [[log(ab_ratio_x, 2), log(ab_ratio_inf_x, 2)], [log(ab_ratio_y, 2), log(ab_ratio_inf_y, 2)]]
    </variable>
    <variable name="ab_convergence_p" language="python">
from fluidity_tools import stat_parser as stat
from math import log

a_error = stat("MMS_A.stat")["NS"]["PressureAbsoluteDifference"]["cv_l2norm"][-1]
b_error = stat("MMS_B.stat")["NS"]["PressureAbsoluteDifference"]["cv_l2norm"][-1]

a_error_inf = stat("MMS_A.stat")["NS"]["PressureAbsoluteDifference"]["max"][-1]
b_error_inf = stat("MMS_B.stat")["NS"]["PressureAbsoluteDifference"]["max"][-1]

print(a_error)
print(b_error)

print(a_error_inf)
print(b_error_inf)

ab_ratio = a_error / b_error
ab_ratio_inf = a_error_inf / b_error_inf
ab_convergence_p = [log(ab_ratio, 2), log(ab_ratio_inf, 2)]
    </variable>
    <variable name="ab_convergence_rho" language="python">
from fluidity_tools import stat_parser as stat
from math import log

a_error = stat("MMS_A.stat")["NS"]["DensityAbsoluteDifference"]["cv_l2norm"][-1]
b_error = stat("MMS_B.stat")["NS"]["DensityAbsoluteDifference"]["cv_l2norm"][-1]

a_error_inf = stat("MMS_A.stat")["NS"]["DensityAbsoluteDifference"]["max"][-1]
b_error_inf = stat("MMS_B.stat")["NS"]["DensityAbsoluteDifference"]["max"][-1]

print(a_error)
print(b_error)

print(a_error_inf)
print(b_error_inf)

ab_ratio = a_error / b_error
ab_ratio_inf = a_error_inf / b_error_inf
ab_convergence_rho = [log(ab_ratio, 2), log(ab_ratio_inf, 2)]
    </variable>
    <variable name="ab_convergence_e" language="python">
from fluidity_tools import stat_parser as stat
from math import log

a_error = stat("MMS_A.stat")["NS"]["InternalEnergyAbsoluteDifference"]["cv_l2norm"][-1]
b_error = stat("MMS_B.stat")["NS"]["InternalEnergyAbsoluteDifference"]["cv_l2norm"][-1]

a_error_inf = stat("MMS_A.stat")["NS"]["InternalEnergyAbsoluteDifference"]["max"][-1]
b_error_inf = stat("MMS_B.stat")["NS"]["InternalEnergyAbsoluteDifference"]["max"][-1]

print(a_error)
print(b_error)

print(a_error_inf)
print(b_error_inf)

ab_ratio = a_error / b_error
ab_ratio_inf = a_error_inf / b_error_inf
ab_convergence_e = [log(ab_ratio, 2), log(ab_ratio_inf, 2)]
    </variable>
    <variable name="bc_convergence_vel" language="python">
from fluidity_tools import stat_parser as stat
from math import log

b_error_x = stat("MMS_B.stat")["NS"]["VelocityAbsoluteDifference%1"]["l2norm"][-1]
c_error_x = stat("MMS_C.stat")["NS"]["VelocityAbsoluteDifference%1"]["l2norm"][-1]
b_error_y = stat("MMS_B.stat")["NS"]["VelocityAbsoluteDifference%2"]["l2norm"][-1]
c_error_y = stat("MMS_C.stat")["NS"]["VelocityAbsoluteDifference%2"]["l2norm"][-1]

b_error_inf_x = stat("MMS_B.stat")["NS"]["VelocityAbsoluteDifference%1"]["max"][-1]
c_error_inf_x = stat("MMS_C.stat")["NS"]["VelocityAbsoluteDifference%1"]["max"][-1]
b_error_inf_y = stat("MMS_B.stat")["NS"]["VelocityAbsoluteDifference%2"]["max"][-1]
c_error_inf_y = stat("MMS_C.stat")["NS"]["VelocityAbsoluteDifference%2"]["max"][-1]

print(b_error_x)
print(c_error_x)
print(b_error_y)
print(c_error_y)

print(b_error_inf_x)
print(c_error_inf_x)
print(b_error_inf_y)
print(c_error_inf_y)

bc_ratio_x = b_error_x / c_error_x
bc_ratio_y = b_error_y / c_error_y
bc_ratio_inf_x = b_error_inf_x / c_error_inf_x
bc_ratio_inf_y = b_error_inf_y / c_error_inf_y
bc_convergence_vel = [[log(bc_ratio_x, 2), log(bc_ratio_inf_x, 2)], [log(bc_ratio_y, 2), log(bc_ratio_inf_y, 2)]]
    </variable>
    <variable name="bc_convergence_p" language="python">
from fluidity_tools import stat_parser as stat
from math import log

b_error = stat("MMS_B.stat")["NS"]["PressureAbsoluteDifference"]["cv_l2norm"][-1]
c_error = stat("MMS_C.stat")["NS"]["PressureAbsoluteDifference"]["cv_l2norm"][-1]

b_error_inf = stat("MMS_B.stat")["NS"]["PressureAbsoluteDifference"]["max"][-1]
c_error_inf = stat("MMS_C.stat")["NS"]["PressureAbsoluteDifference"]["max"][-1]

print(b_error)
print(c_error)

print(b_error_inf)
print(c_error_inf)

bc_ratio = b_error / c_error
bc_ratio_inf = b_error_inf / c_error_inf
bc_convergence_p = [log(bc_ratio, 2), log(bc_ratio_inf, 2)]
    </variable>
    <variable name="bc_convergence_rho" language="python">
from fluidity_tools import stat_parser as stat
from math import log

b_error = stat("MMS_B.stat")["NS"]["DensityAbsoluteDifference"]["cv_l2norm"][-1]
c_error = stat("MMS_C.stat")["NS"]["DensityAbsoluteDifference"]["cv_l2norm"][-1]

b_error_inf = stat("MMS_B.stat")["NS"]["DensityAbsoluteDifference"]["max"][-1]
c_error_inf = stat("MMS_C.stat")["NS"]["DensityAbsoluteDifference"]["max"][-1]

print(b_error)
print(c_error)

print(b_error_inf)
print(c_error_inf)

bc_ratio = b_error / c_error
bc_ratio_inf = b_error_inf / c_error_inf
bc_convergence_rho = [log(bc_ratio, 2), log(bc_ratio_inf, 2)]
    </variable>
    <variable name="bc_convergence_e" language="python">
from fluidity_tools import stat_parser as stat
from math import log

b_error = stat("MMS_B.stat")["NS"]["InternalEnergyAbsoluteDifference"]["cv_l2norm"][-1]
c_error = stat("MMS_C.stat")["NS"]["InternalEnergyAbsoluteDifference"]["cv_l2norm"][-1]

b_error_inf = stat("MMS_B.stat")["NS"]["InternalEnergyAbsoluteDifference"]["max"][-1]
c_error_inf = stat("MMS_C.stat")["NS"]["InternalEnergyAbsoluteDifference"]["max"][-1]

print(b_error)
print(c_error)

print(b_error_inf)
print(c_error_inf)

bc_ratio = b_error / c_error
bc_ratio_inf = b_error_inf / c_error_inf
bc_convergence_e = [log(bc_ratio, 2), log(bc_ratio_inf, 2)]
    </variable>
    <variable name="cd_convergence_vel" language="python">
from fluidity_tools import stat_parser as stat
from math import log

c_error_x = stat("MMS_C.stat")["NS"]["VelocityAbsoluteDifference%1"]["l2norm"][-1]
d_error_x = stat("MMS_D.stat")["NS"]["VelocityAbsoluteDifference%1"]["l2norm"][-1]
c_error_y = stat("MMS_C.stat")["NS"]["VelocityAbsoluteDifference%2"]["l2norm"][-1]
d_error_y = stat("MMS_D.stat")["NS"]["VelocityAbsoluteDifference%2"]["l2norm"][-1]

c_error_inf_x = stat("MMS_C.stat")["NS"]["VelocityAbsoluteDifference%1"]["max"][-1]
d_error_inf_x = stat("MMS_D.stat")["NS"]["VelocityAbsoluteDifference%1"]["max"][-1]
c_error_inf_y = stat("MMS_C.stat")["NS"]["VelocityAbsoluteDifference%2"]["max"][-1]
d_error_inf_y = stat("MMS_D.stat")["NS"]["VelocityAbsoluteDifference%2"]["max"][-1]

print(c_error_x)
print(d_error_x)
print(c_error_y)
print(d_error_y)

print(c_error_inf_x)
print(d_error_inf_x)
print(c_error_inf_y)
print(d_error_inf_y)

cd_ratio_x = c_error_x / d_error_x
cd_ratio_y = c_error_y / d_error_y
cd_ratio_inf_x = c_error_inf_x / d_error_inf_x
cd_ratio_inf_y = c_error_inf_y / d_error_inf_y
cd_convergence_vel = [[log(cd_ratio_x, 2), log(cd_ratio_inf_x, 2)], [log(cd_ratio_y, 2), log(cd_ratio_inf_y, 2)]]
    </variable>
    <variable name="cd_convergence_p" language="python">
from fluidity_tools import stat_parser as stat
from math import log

c_error = stat("MMS_C.stat")["NS"]["PressureAbsoluteDifference"]["cv_l2norm"][-1]
d_error = stat("MMS_D.stat")["NS"]["PressureAbsoluteDifference"]["cv_l2norm"][-1]

c_error_inf = stat("MMS_C.stat")["NS"]["PressureAbsoluteDifference"]["max"][-1]
d_error_inf = stat("MMS_D.stat")["NS"]["PressureAbsoluteDifference"]["max"][-1]

print(c_error)
print(d_error)

print(c_error_inf)
print(d_error_inf)

cd_ratio = c_error / d_error
cd_ratio_inf = c_error_inf / d_error_inf
cd_convergence_p = [log(cd_ratio, 2), log(cd_ratio_inf, 2)]
    </variable>
    <variable name="cd_convergence_rho" language="python">
from fluidity_tools import stat_parser as stat
from math import log

c_error = stat("MMS_C.stat")["NS"]["DensityAbsoluteDifference"]["cv_l2norm"][-1]
d_error = stat("MMS_D.stat")["NS"]["DensityAbsoluteDifference"]["cv_l2norm"][-1]

c_error_inf = stat("MMS_C.stat")["NS"]["DensityAbsoluteDifference"]["max"][-1]
d_error_inf = stat("MMS_D.stat")["NS"]["DensityAbsoluteDifference"]["max"][-1]

print(c_error)
print(d_error)

print(c_error_inf)
print(d_error_inf)

cd_ratio = c_error / d_error
cd_ratio_inf = c_error_inf / d_error_inf
cd_convergence_rho = [log(cd_ratio, 2), log(cd_ratio_inf, 2)]
    </variable>
    <variable name="cd_convergence_e" language="python">
from fluidity_tools import stat_parser as stat
from math import log

c_error = stat("MMS_C.stat")["NS"]["InternalEnergyAbsoluteDifference"]["cv_l2norm"][-1]
d_error = stat("MMS_D.stat")["NS"]["InternalEnergyAbsoluteDifference"]["cv_l2norm"][-1]

c_error_inf = stat("MMS_C.stat")["NS"]["InternalEnergyAbsoluteDifference"]["max"][-1]
d_error_inf = stat("MMS_D.stat")["NS"]["InternalEnergyAbsoluteDifference"]["max"][-1]

print(c_error)
print(d_error)

print(c_error_inf)
print(d_error_inf)

cd_ratio = c_error / d_error
cd_ratio_inf = c_error_inf / d_error_inf
cd_convergence_e = [log(cd_ratio, 2), log(cd_ratio_inf, 2)]
    </variable>
<!--    <variable name="de_convergence_vel" language="python">
from fluidity_tools import stat_parser as stat
from math import log

d_error_x = stat("MMS_D.stat")["NS"]["VelocityAbsoluteDifference%1"]["l2norm"][-1]
e_error_x = stat("MMS_E.stat")["NS"]["VelocityAbsoluteDifference%1"]["l2norm"][-1]
d_error_y = stat("MMS_D.stat")["NS"]["VelocityAbsoluteDifference%2"]["l2norm"][-1]
e_error_y = stat("MMS_E.stat")["NS"]["VelocityAbsoluteDifference%2"]["l2norm"][-1]

d_error_inf_x = stat("MMS_D.stat")["NS"]["VelocityAbsoluteDifference%1"]["max"][-1]
e_error_inf_x = stat("MMS_E.stat")["NS"]["VelocityAbsoluteDifference%1"]["max"][-1]
d_error_inf_y = stat("MMS_D.stat")["NS"]["VelocityAbsoluteDifference%2"]["max"][-1]
e_error_inf_y = stat("MMS_E.stat")["NS"]["VelocityAbsoluteDifference%2"]["max"][-1]

print(d_error_x)
print(e_error_x)
print(d_error_y)
print(e_error_y)

print(d_error_inf_x)
print(e_error_inf_x)
print(d_error_inf_y)
print(e_error_inf_y)

de_ratio_x = d_error_x / e_error_x
de_ratio_y = d_error_y / e_error_y
de_ratio_inf_x = d_error_inf_x / e_error_inf_x
de_ratio_inf_y = d_error_inf_y / e_error_inf_y
de_convergence_vel = [[log(de_ratio_x, 2), log(de_ratio_inf_x, 2)], [log(de_ratio_y, 2), log(de_ratio_inf_y, 2)]]
    </variable>
    <variable name="de_convergence_p" language="python">
from fluidity_tools import stat_parser as stat
from math import log

d_error = stat("MMS_D.stat")["NS"]["PressureAbsoluteDifference"]["cv_l2norm"][-1]
e_error = stat("MMS_E.stat")["NS"]["PressureAbsoluteDifference"]["cv_l2norm"][-1]

d_error_inf = stat("MMS_D.stat")["NS"]["PressureAbsoluteDifference"]["max"][-1]
e_error_inf = stat("MMS_E.stat")["NS"]["PressureAbsoluteDifference"]["max"][-1]

print(d_error)
print(e_error)

print(d_error_inf)
print(e_error_inf)

de_ratio = d_error / e_error
de_ratio_inf = d_error_inf / e_error_inf
de_convergence_p = [log(de_ratio, 2), log(de_ratio_inf, 2)]
    </variable>
    <variable name="de_convergence_rho" language="python">
from fluidity_tools import stat_parser as stat
from math import log

d_error = stat("MMS_D.stat")["NS"]["DensityAbsoluteDifference"]["cv_l2norm"][-1]
e_error = stat("MMS_E.stat")["NS"]["DensityAbsoluteDifference"]["cv_l2norm"][-1]

d_error_inf = stat("MMS_D.stat")["NS"]["DensityAbsoluteDifference"]["max"][-1]
e_error_inf = stat("MMS_E.stat")["NS"]["DensityAbsoluteDifference"]["max"][-1]

print(d_error)
print(e_error)

print(d_error_inf)
print(e_error_inf)

de_ratio = d_error / e_error
de_ratio_inf = d_error_inf / e_error_inf
de_convergence_rho = [log(de_ratio, 2), log(de_ratio_inf, 2)]
    </variable>-->
   <variable name="a_finish_time" language="python">
from fluidity_tools import stat_parser as stat
a_finish_time = stat("MMS_A.stat")["ElapsedTime"]["value"][-1]
    </variable>
    <variable name="b_finish_time" language="python">
from fluidity_tools import stat_parser as stat
b_finish_time = stat("MMS_B.stat")["ElapsedTime"]["value"][-1]
    </variable>
    <variable name="c_finish_time" language="python">
from fluidity_tools import stat_parser as stat
c_finish_time = stat("MMS_C.stat")["ElapsedTime"]["value"][-1]
    </variable>
    <variable name="d_finish_time" language="python">
from fluidity_tools import stat_parser as stat
d_finish_time = stat("MMS_D.stat")["ElapsedTime"]["value"][-1]
    </variable>
   <variable name="a_max_iterations" language="python">
from fluidity_tools import stat_parser as stat
a_max_iterations = stat("MMS_A.convergence")["Iteration"]["value"].max()
    </variable>
   <variable name="b_max_iterations" language="python">
from fluidity_tools import stat_parser as stat
b_max_iterations = stat("MMS_B.convergence")["Iteration"]["value"].max()
    </variable>
   <variable name="c_max_iterations" language="python">
from fluidity_tools import stat_parser as stat
c_max_iterations = stat("MMS_C.convergence")["Iteration"]["value"].max()
    </variable>
   <variable name="d_max_iterations" language="python">
from fluidity_tools import stat_parser as stat
d_max_iterations = stat("MMS_D.convergence")["Iteration"]["value"].max()
    </variable>
    <variable name="a_final_change_vel" language="python">
import vtktools
from fluidity_tools import stat_parser as stat
vtu = vtktools.vtu("MMS_A_1.vtu")
dt = stat("MMS_A.stat")["dt"]["value"][-1]
a_final_change_vel = max(max(abs(vtu.GetVectorField("Velocity")[:,0]-vtu.GetVectorField("OldVelocity")[:,0])/dt), max(abs(vtu.GetVectorField("Velocity")[:,1]-vtu.GetVectorField("OldVelocity")[:,1])/dt))
    </variable>
    <variable name="b_final_change_vel" language="python">
import vtktools
from fluidity_tools import stat_parser as stat
vtu = vtktools.vtu("MMS_B_1.vtu")
dt = stat("MMS_B.stat")["dt"]["value"][-1]
b_final_change_vel = max(max(abs(vtu.GetVectorField("Velocity")[:,0]-vtu.GetVectorField("OldVelocity")[:,0])/dt), max(abs(vtu.GetVectorField("Velocity")[:,1]-vtu.GetVectorField("OldVelocity")[:,1])/dt))
    </variable>
    <variable name="c_final_change_vel" language="python">
import vtktools
from fluidity_tools import stat_parser as stat
vtu = vtktools.vtu("MMS_C_1.vtu")
dt = stat("MMS_C.stat")["dt"]["value"][-1]
c_final_change_vel = max(max(abs(vtu.GetVectorField("Velocity")[:,0]-vtu.GetVectorField("OldVelocity")[:,0])/dt), max(abs(vtu.GetVectorField("Velocity")[:,1]-vtu.GetVectorField("OldVelocity")[:,1])/dt))
    </variable>
    <variable name="d_final_change_vel" language="python">
import vtktools
from fluidity_tools import stat_parser as stat
vtu = vtktools.vtu("MMS_D_1.vtu")
dt = stat("MMS_D.stat")["dt"]["value"][-1]
d_final_change_vel = max(max(abs(vtu.GetVectorField("Velocity")[:,0]-vtu.GetVectorField("OldVelocity")[:,0])/dt), max(abs(vtu.GetVectorField("Velocity")[:,1]-vtu.GetVectorField("OldVelocity")[:,1])/dt))
    </variable>
    <variable name="a_final_change_p" language="python">
import vtktools
from fluidity_tools import stat_parser as stat
vtu = vtktools.vtu("MMS_A_1.vtu")
dt = stat("MMS_A.stat")["dt"]["value"][-1]
a_final_change_p = max(abs(vtu.GetScalarField("Pressure")-vtu.GetScalarField("OldPressure"))/dt)
    </variable>
    <variable name="b_final_change_p" language="python">
import vtktools
from fluidity_tools import stat_parser as stat
vtu = vtktools.vtu("MMS_B_1.vtu")
dt = stat("MMS_B.stat")["dt"]["value"][-1]
b_final_change_p = max(abs(vtu.GetScalarField("Pressure")-vtu.GetScalarField("OldPressure"))/dt)
    </variable>
    <variable name="c_final_change_p" language="python">
import vtktools
from fluidity_tools import stat_parser as stat
vtu = vtktools.vtu("MMS_C_1.vtu")
dt = stat("MMS_C.stat")["dt"]["value"][-1]
c_final_change_p = max(abs(vtu.GetScalarField("Pressure")-vtu.GetScalarField("OldPressure"))/dt)
    </variable>
    <variable name="d_final_change_p" language="python">
import vtktools
from fluidity_tools import stat_parser as stat
vtu = vtktools.vtu("MMS_D_1.vtu")
dt = stat("MMS_D.stat")["dt"]["value"][-1]
d_final_change_p = max(abs(vtu.GetScalarField("Pressure")-vtu.GetScalarField("OldPressure"))/dt)
    </variable>
    <variable name="a_final_change_rho" language="python">
import vtktools
from fluidity_tools import stat_parser as stat
vtu = vtktools.vtu("MMS_A_1.vtu")
dt = stat("MMS_A.stat")["dt"]["value"][-1]
a_final_change_rho = max(abs(vtu.GetScalarField("Density")-vtu.GetScalarField("OldDensity"))/dt)
    </variable>
    <variable name="b_final_change_rho" language="python">
import vtktools
from fluidity_tools import stat_parser as stat
vtu = vtktools.vtu("MMS_B_1.vtu")
dt = stat("MMS_B.stat")["dt"]["value"][-1]
b_final_change_rho = max(abs(vtu.GetScalarField("Density")-vtu.GetScalarField("OldDensity"))/dt)
    </variable>
    <variable name="c_final_change_rho" language="python">
import vtktools
from fluidity_tools import stat_parser as stat
vtu = vtktools.vtu("MMS_C_1.vtu")
dt = stat("MMS_C.stat")["dt"]["value"][-1]
c_final_change_rho = max(abs(vtu.GetScalarField("Density")-vtu.GetScalarField("OldDensity"))/dt)
    </variable>
    <variable name="d_final_change_rho" language="python">
import vtktools
from fluidity_tools import stat_parser as stat
vtu = vtktools.vtu("MMS_D_1.vtu")
dt = stat("MMS_D.stat")["dt"]["value"][-1]
d_final_change_rho = max(abs(vtu.GetScalarField("Density")-vtu.GetScalarField("OldDensity"))/dt)
    </variable>
    <variable name="a_final_change_e" language="python">
import vtktools
from fluidity_tools import stat_parser as stat
vtu = vtktools.vtu("MMS_A_1.vtu")
dt = stat("MMS_A.stat")["dt"]["value"][-1]
a_final_change_e = max(abs(vtu.GetScalarField("InternalEnergy")-vtu.GetScalarField("OldInternalEnergy"))/dt)
    </variable>
    <variable name="b_final_change_e" language="python">
import vtktools
from fluidity_tools import stat_parser as stat
vtu = vtktools.vtu("MMS_B_1.vtu")
dt = stat("MMS_B.stat")["dt"]["value"][-1]
b_final_change_e = max(abs(vtu.GetScalarField("InternalEnergy")-vtu.GetScalarField("OldInternalEnergy"))/dt)
    </variable>
    <variable name="c_final_change_e" language="python">
import vtktools
from fluidity_tools import stat_parser as stat
vtu = vtktools.vtu("MMS_C_1.vtu")
dt = stat("MMS_C.stat")["dt"]["value"][-1]
c_final_change_e = max(abs(vtu.GetScalarField("InternalEnergy")-vtu.GetScalarField("OldInternalEnergy"))/dt)
    </variable>
    <variable name="d_final_change_e" language="python">
import vtktools
from fluidity_tools import stat_parser as stat
vtu = vtktools.vtu("MMS_D_1.vtu")
dt = stat("MMS_D.stat")["dt"]["value"][-1]
d_final_change_e = max(abs(vtu.GetScalarField("InternalEnergy")-vtu.GetScalarField("OldInternalEnergy"))/dt)
    </variable>
  </variables>
  <pass_tests>
    <test name="ab_convergence_vel_x: L2 order &gt; 0.44" language="python">
assert(ab_convergence_vel[0][0] &gt; 0.44)
    </test>
    <test name="ab_convergence_vel_y: L2 order &gt; 0.85" language="python">
assert(ab_convergence_vel[1][0] &gt; 0.85)
    </test>
    <test name="bc_convergence_vel_x: L2 order &gt; 0.9" language="python">
assert(bc_convergence_vel[0][0] &gt; 0.9)
    </test>
    <test name="bc_convergence_vel_y: L2 order &gt; 0.99" language="python">
assert(bc_convergence_vel[1][0] &gt; 0.99)
    </test>
    <test name="cd_convergence_vel_x: L2 order &gt; 0.85" language="python">
assert(cd_convergence_vel[0][0] &gt; 0.85)
    </test>
    <test name="cd_convergence_vel_y: L2 order &gt; 0.99" language="python">
assert(cd_convergence_vel[1][0] &gt; 0.99)
    </test>
    <test name="ab_convergence_p: L2 order &gt; 0.7" language="python">
assert(ab_convergence_p[0] &gt; 0.7)
    </test>
    <test name="bc_convergence_p: L2 order &gt; 0.92" language="python">
assert(bc_convergence_p[0] &gt; 0.92)
    </test>
    <test name="cd_convergence_p: L2 order &gt; 0.87" language="python">
assert(cd_convergence_p[0] &gt; 0.87)
    </test>
    <test name="ab_convergence_rho: L2 order &gt; 0.75" language="python">
assert(ab_convergence_rho[0] &gt; 0.75)
    </test>
    <test name="bc_convergence_rho: L2 order &gt; 0.92" language="python">
assert(bc_convergence_rho[0] &gt; 0.92)
    </test>
    <test name="cd_convergence_rho: L2 order &gt; 0.88" language="python">
assert(cd_convergence_rho[0] &gt; 0.88)
    </test>
    <test name="ab_convergence_e: L2 order &gt; 0.75" language="python">
assert(ab_convergence_e[0] &gt; 0.75)
    </test>
    <test name="bc_convergence_e: L2 order &gt; 0.9" language="python">
assert(bc_convergence_e[0] &gt; 0.9)
    </test>
    <test name="cd_convergence_e: L2 order &gt; 0.9" language="python">
assert(cd_convergence_e[0] &gt; 0.9)
    </test>
    <test name="checking A finished in less than 6.0" language="python">
assert(a_finish_time-6.0 &lt; 1.E-10)
    </test>
    <test name="checking B finished in less than 6.0" language="python">
assert(b_finish_time-6.0 &lt; 1.E-10)
    </test>
    <test name="checking C finished in less than 6.0" language="python">
assert(c_finish_time-6.0 &lt; 1.E-10)
    </test>
    <test name="checking D finished in less than 6.0" language="python">
assert(d_finish_time-6.0 &lt; 1.E-10)
    </test>
    <test name="checking A only used 7-11 iterations" language="python">
assert(abs(a_max_iterations-9.0) &lt; 2.0)
    </test>
    <test name="checking B only used 8-12 iterations" language="python">
assert(abs(b_max_iterations-10.0) &lt; 2.0)
    </test>
    <test name="checking C only used 9-13 iterations" language="python">
assert(abs(c_max_iterations-11.0) &lt; 2.0)
    </test>
    <test name="checking D only used 7-11 iterations" language="python">
assert(abs(d_max_iterations-9.0) &lt; 2.0)
    </test>
    <test name="checking steady state was reached in A vel" language="python">
assert(a_final_change_vel &lt; 1.E-3)
    </test>
    <test name="checking steady state was reached in B vel" language="python">
assert(b_final_change_vel &lt; 1.E-3)
    </test>
   <test name="checking steady state was reached in C vel" language="python">
assert(c_final_change_vel &lt; 1.E-3)
    </test>
    <test name="checking steady state was reached in D vel" language="python">
assert(d_final_change_vel &lt; 1.E-3)
    </test>
    <test name="checking steady state was reached in A p" language="python">
assert(a_final_change_p &lt; 1.E-3)
    </test>
    <test name="checking steady state was reached in B p" language="python">
assert(b_final_change_p &lt; 1.E-3)
    </test>
    <test name="checking steady state was reached in C p" language="python">
assert(c_final_change_p &lt; 1.E-3)
    </test>
    <test name="checking steady state was reached in D p" language="python">
assert(d_final_change_p &lt; 1.E-3)
    </test>
    <test name="checking steady state was reached in A rho" language="python">
assert(a_final_change_rho &lt; 1.E-3)
    </test>
    <test name="checking steady state was reached in B rho" language="python">
assert(b_final_change_rho &lt; 1.E-3)
    </test>
    <test name="checking steady state was reached in C rho" language="python">
assert(c_final_change_rho &lt; 1.E-3)
    </test>
    <test name="checking steady state was reached in D rho" language="python">
assert(d_final_change_rho &lt; 1.E-3)
    </test>
    <test name="checking steady state was reached in A e" language="python">
assert(a_final_change_e &lt; 1.E-3)
    </test>
    <test name="checking steady state was reached in B e" language="python">
assert(b_final_change_e &lt; 1.E-3)
    </test>
    <test name="checking steady state was reached in C e" language="python">
assert(c_final_change_e &lt; 1.E-3)
    </test>
    <test name="checking steady state was reached in D e" language="python">
assert(d_final_change_e &lt; 1.E-3)
    </test>
  </pass_tests>
  <warn_tests>
  </warn_tests>
</testproblem>
