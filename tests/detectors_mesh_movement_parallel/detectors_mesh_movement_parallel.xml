<?xml version='1.0' encoding='utf-8'?>
<testproblem>
  <name>Static detectors in a moving mesh in parallel</name>
  <owner userid="mlange"/>
  <tags>flml parallel</tags>
  <problem_definition length="short" nprocs="2">
    <command_line>mpiexec ../../bin/flredecomp -i 1 -o 2 -v -l detectors detectors_flredecomp &amp;&amp;
mpiexec ../../bin/fluidity -v2 -l detectors_flredecomp.flml</command_line>
  </problem_definition>
  <variables>
    <variable name="solvers_converged" language="python">
import os
files = os.listdir("./")
solvers_converged = not "matrixdump" in files and not "matrixdump.info" in files
    </variable>
    <variable name="D1_position" language="python">
import h5py
import numpy as np
f = h5py.File('detectors.detectors.h5part', 'r')
det_id, = np.where(f['/Step#0/id'][:] == f.attrs['D1%ids'])
D1_position = np.vstack([f['/Step#0/{}'.format(dim)][det_id[0]] for dim in ('x', 'y')])
    </variable>
    <variable name="D2_position" language="python">
import h5py
import numpy as np
f = h5py.File('detectors.detectors.h5part', 'r')
det_id, = np.where(f['/Step#0/id'][:] == f.attrs['D2%ids'])
D2_position = np.vstack([f['/Step#0/{}'.format(dim)][det_id[0]] for dim in ('x', 'y')])
    </variable>
    <variable name="D1_tracer" language="python">
import h5py
import numpy as np
f = h5py.File('detectors.detectors.h5part', 'r')
det_id, = np.where(f['/Step#0/id'][:] == f.attrs['D1%ids'])
D1_tracer = f['/Step#0/Water%Tracer'][det_id[0]]
    </variable>
    <variable name="D2_tracer" language="python">
import h5py
import numpy as np
f = h5py.File('detectors.detectors.h5part', 'r')
det_id, = np.where(f['/Step#0/id'][:] == f.attrs['D2%ids'])
D2_tracer = f['/Step#0/Water%Tracer'][det_id[0]]
    </variable>
  </variables>
  <pass_tests>
    <test name="Solvers converged" language="python">
      assert(solvers_converged)
    </test>
    <test name="D1 final position" language="python">
assert abs(D1_position[0,:] - 0.0).all() &lt; 1e-12
    </test>
    <test name="D2 final position" language="python">
assert abs(D2_position[0,:] - 0.25).all() &lt; 1e-12
    </test>
    <test name="tracer at D1" language="python">
from numpy import isnan
assert isnan(D1_tracer)
    </test>
    <test name="tracer at D2" language="python">
assert abs(D2_tracer + 0.35) &lt; 1e-12
    </test>
  </pass_tests>
  <warn_tests>
  </warn_tests>
</testproblem>
