<?xml version='1.0' encoding='UTF-8'?>
<testproblem>
  <name>Simply connected barotropic f-plane source sink</name>
  <owner userid="piggt01"/>
  <tags>flml</tags>
  <problem_definition length="medium" nprocs="1">
    <command_line>make clean-run-debug;
fluidity -v2 sc_barotropic_fplane_balance_p1p1_0.flml &gt; sc_barotropic_fplane_balance_p1p1_0.log;
fluidity -v2 sc_barotropic_fplane_balance_p1p1_1.flml &gt; sc_barotropic_fplane_balance_p1p1_1.log;
fluidity -v2 sc_barotropic_fplane_balance_p1p1gp2_1.flml &gt; sc_barotropic_fplane_balance_p1p1gp2_1.log</command_line>
  </problem_definition>
  <variables>
    <variable name="p1p1_0_times" language="python">
import fluidity_tools
s = fluidity_tools.stat_parser("sc_barotropic_fplane_balance_p1p1_0.stat")
p1p1_0_times = s["ElapsedTime"]["value"]
    </variable>
    <variable name="p1p1_1_times" language="python">
import fluidity_tools
s = fluidity_tools.stat_parser("sc_barotropic_fplane_balance_p1p1_1.stat")
p1p1_1_times = s["ElapsedTime"]["value"]
    </variable>
    <variable name="p1p1gp2_1_times" language="python">
import fluidity_tools
s = fluidity_tools.stat_parser("sc_barotropic_fplane_balance_p1p1gp2_1.stat")
p1p1gp2_1_times = s["ElapsedTime"]["value"]
    </variable>
    <variable name="p1p1_0_max_cfl_numbers" language="python">
import fluidity_tools
s = fluidity_tools.stat_parser("sc_barotropic_fplane_balance_p1p1_0.stat")
p1p1_0_max_cfl_numbers = s["Fluid"]["CFLNumber"]["max"]
    </variable>
    <variable name="p1p1_1_max_cfl_numbers" language="python">
import fluidity_tools
s = fluidity_tools.stat_parser("sc_barotropic_fplane_balance_p1p1_1.stat")
p1p1_1_max_cfl_numbers = s["Fluid"]["CFLNumber"]["max"]
    </variable>
    <variable name="p1p1gp2_1_max_cfl_numbers" language="python">
import fluidity_tools
s = fluidity_tools.stat_parser("sc_barotropic_fplane_balance_p1p1gp2_1.stat")
p1p1gp2_1_max_cfl_numbers = s["Fluid"]["CFLNumber"]["max"]
    </variable>
    <variable name="solvers_converged" language="python">
import os
files = os.listdir("./")
solvers_converged = not "matrixdump" in files and not "matrixdump.info" in files 
    </variable>
    <variable name="p1p1_0" language="python">
import fluidity.diagnostics.fluiditytools as fluidity_tools
import fluidity.diagnostics.vtutools as vtktools

p1p1_0 = vtktools.vtu(fluidity_tools.FindFinalVtu("sc_barotropic_fplane_balance_p1p1_0"))
    </variable>
    <variable name="p1p1_1" language="python">
import fluidity.diagnostics.fluiditytools as fluidity_tools
import fluidity.diagnostics.vtutools as vtktools

p1p1_1 = vtktools.vtu(fluidity_tools.FindFinalVtu("sc_barotropic_fplane_balance_p1p1_1"))
    </variable>
    <variable name="p1p1gp2_1" language="python">
import fluidity.diagnostics.fluiditytools as fluidity_tools
import fluidity.diagnostics.vtutools as vtktools

p1p1gp2_1 = vtktools.vtu(fluidity_tools.FindFinalVtu("sc_barotropic_fplane_balance_p1p1gp2_1"))
    </variable>
  </variables>
  <pass_tests>
    <test name="p1p1_0 simulation completed" language="python">
print(p1p1_0_times[-1])
assert(p1p1_0_times[-1] &lt; 1.0)
</test>
    <test name="p1p1_1 simulation completed" language="python">
print(p1p1_1_times[-1])
assert(p1p1_1_times[-1] &lt; 1.0)
</test>
    <test name="p1p1gp2_1 simulation completed" language="python">
print(p1p1gp2_1_times[-1])
assert(p1p1gp2_1_times[-1] &lt; 1.0)
</test>
    <test name="Solvers converged" language="python">
assert(solvers_converged)
    </test>
    <test name="p1p1_0 CFL number" language="python">
print(max(p1p1_0_max_cfl_numbers))
assert(max(p1p1_0_max_cfl_numbers) &lt;= 4.0 * 1.2)
</test>
    <test name="p1p1_1 CFL number" language="python">
print(max(p1p1_1_max_cfl_numbers))
assert(max(p1p1_1_max_cfl_numbers) &lt;= 4.0 * 1.2)
</test>
    <test name="p1p1gp2_1 CFL number" language="python">
print(max(p1p1gp2_1_max_cfl_numbers))
assert(max(p1p1gp2_1_max_cfl_numbers) &lt;= 4.0 * 1.2)
</test>
    <test name="Errors" language="python">
import numpy

import fluidity.diagnostics.calc as calc
import fluidity.diagnostics.fluiditytools as fluidity_tools
import fluidity.diagnostics.vtutools as vtktools

vel = p1p1_0.GetVectorField("Velocity")
vmag = [calc.L2Norm(val) for val in vel]
vmag = numpy.array(vmag)
vmag.shape = (len(vmag), 1)
u = [val[0] for val in vel]
u = numpy.array(u)
u.shape = (len(u), 1)
v = [val[1] for val in vel]
v = numpy.array(v)
v.shape = (len(v), 1)
p1p1_0.AddScalarField("VelocityMagnitude", vmag)
p1p1_0.AddScalarField("XVelocity", u)
p1p1_0.AddScalarField("YVelocity", v)

p1p1_0_vmagRms = p1p1_0.GetFieldRms("VelocityMagnitude")
p1p1_0_vmagMax = vmag.max()
p1p1_0_uRms = p1p1_0.GetFieldRms("XVelocity")
p1p1_0_uMax = u.max()
p1p1_0_vRms = p1p1_0.GetFieldRms("YVelocity")
p1p1_0_vMax = v.max()

diff = vtktools.VtuDiff(p1p1_1, p1p1_0)
vel = diff.GetVectorField("Velocity")
vmag = [calc.L2Norm(val) for val in vel]
vmag = numpy.array(vmag)
vmag.shape = (len(vmag), 1)
u = [val[0] for val in vel]
u = numpy.array(u)
u.shape = (len(u), 1)
v = [val[1] for val in vel]
v = numpy.array(v)
v.shape = (len(v), 1)
diff.AddScalarField("VelocityMagnitude", vmag)
diff.AddScalarField("XVelocity", u)
diff.AddScalarField("YVelocity", v)

p1p1_1_p1p1_0_vmagRmsError = diff.GetFieldRms("VelocityMagnitude")
p1p1_1_p1p1_0_vmagMaxError = vmag.max()
p1p1_1_p1p1_0_uRmsError = diff.GetFieldRms("XVelocity")
p1p1_1_p1p1_0_uMaxError = u.max()
p1p1_1_p1p1_0_vRmsError = diff.GetFieldRms("YVelocity")
p1p1_1_p1p1_0_vMaxError = v.max()

print("p1p1_1-p1p1_0 vmag l2", p1p1_1_p1p1_0_vmagRmsError, p1p1_1_p1p1_0_vmagRmsError / p1p1_0_vmagRms)
print("p1p1_1-p1p1_0 vmag inf", p1p1_1_p1p1_0_vmagMaxError, p1p1_1_p1p1_0_vmagMaxError / p1p1_0_vmagMax)
print("p1p1_1-p1p1_0 u l2", p1p1_1_p1p1_0_uRmsError, p1p1_1_p1p1_0_uRmsError / p1p1_0_uRms)
print("p1p1_1-p1p1_0 u inf", p1p1_1_p1p1_0_uMaxError, p1p1_1_p1p1_0_uMaxError / p1p1_0_uMax)
print("p1p1_1-p1p1_0 v l2", p1p1_1_p1p1_0_vRmsError, p1p1_1_p1p1_0_vRmsError / p1p1_0_vRms)
print("p1p1_1-p1p1_0 v inf", p1p1_1_p1p1_0_vMaxError, p1p1_1_p1p1_0_vMaxError / p1p1_0_vMax)

diff = vtktools.VtuDiff(p1p1gp2_1, p1p1_0)
vel = diff.GetVectorField("Velocity")
vmag = [calc.L2Norm(val) for val in vel]
vmag = numpy.array(vmag)
vmag.shape = (len(vmag), 1)
u = [val[0] for val in vel]
u = numpy.array(u)
u.shape = (len(u), 1)
v = [val[1] for val in vel]
v = numpy.array(v)
v.shape = (len(v), 1)
diff.AddScalarField("VelocityMagnitude", vmag)
diff.AddScalarField("XVelocity", u)
diff.AddScalarField("YVelocity", v)

p1p1gp2_1_p1p1_0_vmagRmsError = diff.GetFieldRms("VelocityMagnitude")
p1p1gp2_1_p1p1_0_vmagMaxError = vmag.max()
p1p1gp2_1_p1p1_0_uRmsError = diff.GetFieldRms("XVelocity")
p1p1gp2_1_p1p1_0_uMaxError = u.max()
p1p1gp2_1_p1p1_0_vRmsError = diff.GetFieldRms("YVelocity")
p1p1gp2_1_p1p1_0_vMaxError = v.max()

print("p1p1gp2_1-p1p1_0 vmag l2", p1p1gp2_1_p1p1_0_vmagRmsError, p1p1gp2_1_p1p1_0_vmagRmsError / p1p1_0_vmagRms)
print("p1p1gp2_1-p1p1_0 vmag inf", p1p1gp2_1_p1p1_0_vmagMaxError, p1p1gp2_1_p1p1_0_vmagMaxError / p1p1_0_vmagMax)
print("p1p1gp2_1-p1p1_0 u l2", p1p1gp2_1_p1p1_0_uRmsError, p1p1gp2_1_p1p1_0_uRmsError / p1p1_0_uRms)
print("p1p1gp2_1-p1p1_0 u inf", p1p1gp2_1_p1p1_0_uMaxError, p1p1gp2_1_p1p1_0_uMaxError / p1p1_0_uMax)
print("p1p1gp2_1-p1p1_0 v l2", p1p1gp2_1_p1p1_0_vRmsError, p1p1gp2_1_p1p1_0_vRmsError / p1p1_0_vRms)
print("p1p1gp2_1-p1p1_0 v inf", p1p1gp2_1_p1p1_0_vMaxError, p1p1gp2_1_p1p1_0_vMaxError / p1p1_0_vMax)

assert(p1p1_1_p1p1_0_uRmsError &lt; 0.001)
assert(p1p1_1_p1p1_0_vRmsError &lt; 0.001)
assert(p1p1gp2_1_p1p1_0_uRmsError &lt; 0.0005)
assert(p1p1gp2_1_p1p1_0_vRmsError &lt; 0.0005)
</test>
  </pass_tests>
  <warn_tests>
  </warn_tests>
</testproblem>
