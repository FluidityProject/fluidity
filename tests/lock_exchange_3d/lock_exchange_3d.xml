<?xml version='1.0' encoding='UTF-8'?>
<testproblem>
  <name>lock exchange mixing test</name>
  <owner userid="hhiester"/>
  <tags>flml</tags>
    <problem_definition length="medium" nprocs="1">
    <command_line>mpiexec fluidity -v3 -l  lock_exchange_3d.flml </command_line>
  </problem_definition>  
  <variables>  
     <variable name="temp_bin_lower_0" language="python"> 
from fluidity_tools import stat_parser
stat = stat_parser("lock_exchange_3d.stat")
temp_bin_lower_0 = stat['Water']['Temperature']['mixing_bins%cg_normalised'][0,0]+ stat['Water']['Temperature']['mixing_bins%cg_normalised'][1,0]+ stat['Water']['Temperature']['mixing_bins%cg_normalised'][2,0]
    </variable>
     <variable name="temp_bin_upper_0" language="python"> 
from fluidity_tools import stat_parser
stat = stat_parser("lock_exchange_3d.stat")
temp_bin_upper_0 =  stat['Water']['Temperature']['mixing_bins%cg_normalised'][3,0]+ stat['Water']['Temperature']['mixing_bins%cg_normalised'][4,0]+ stat['Water']['Temperature']['mixing_bins%cg_normalised'][5,0]
    </variable>
     <variable name="temp_bin_total_0" language="python"> 
from fluidity_tools import stat_parser
stat = stat_parser("lock_exchange_3d.stat")
temp_bin_total_0 = sum(stat['Water']['Temperature']['mixing_bins%cg_normalised'][:,0])
    </variable>
     <variable name="temp_bin_total_end" language="python"> 
from fluidity_tools import stat_parser
stat = stat_parser("lock_exchange_3d.stat")
last_val = len(stat["ElapsedTime"]["value"])-1 
temp_bin_total_end = sum(stat['Water']['Temperature']['mixing_bins%cg_normalised'][:,last_val])
    </variable>
    <variable name="hartel_no_slip_head_speed" language="python">
hartel_no_slip_head_speed = 0.0128350
    </variable>
    <variable name="hartel_free_slip_head_speed" language="python">
hartel_free_slip_head_speed = 0.01509346
    </variable>
 <variable name="results_head_speed" language="python">

import vtk
import glob
import sys
import os
import scipy.stats

hartel_no_slip_head_speed = 0.0128350
hartel_free_slip_head_speed = 0.01509346

def get_head_speed(filelist, timdum=1.5):
  mins = []
  maxs = []
  nums = []
  for file in filelist:
    try:
      os.stat(file)
    except:
      print("No such file: %s" % file)
      sys.exit(1)
    num = int(file.split(".vtu")[0].split('_')[-1])
    if num&gt;2:
      nums.append(num)
      reader = vtk.vtkXMLUnstructuredGridReader();
      reader.SetFileName(file)
      reader.Update()
      data = reader.GetOutput()
      data.GetPointData().SetActiveScalars("Temperature")
      bbox = data.GetBounds()
      centre = (bbox[3]+bbox[2])/2.0
      plane = vtk.vtkPlane()
      plane.SetOrigin(0.0, centre, 0.0)
      plane.SetNormal(0.0, 1.0, 0.0)
      cutter = vtk.vtkCutter()
      cutter.SetCutFunction(plane)
      if vtk.vtkVersion.GetVTKMajorVersion() &lt;= 5:
        cutter.SetInput(data)
      else:
        cutter.SetInputData(data)
      cutter.Update()
      contour = vtk.vtkContourFilter ()
      if vtk.vtkVersion.GetVTKMajorVersion() &lt;= 5:
        contour.SetInput(cutter.GetOutput())
      else:
        contour.SetInputData(cutter.GetOutput())
      contour.SetValue(0, 0.0)
      contour.Update()
      polydata = contour.GetOutput()
      bounding_box = polydata.GetBounds()
      (minx, maxx) = bounding_box[0:2]
      mins.append(minx); maxs.append(maxx)
  results = []
  for y in [mins, maxs]:
    x = [nums[i] * timdum for i in range(len(nums))]
    r = scipy.stats.linregress(x, y)[0]
    print(x,y)
    results.append(abs(r))
  results.append(abs(hartel_free_slip_head_speed - results[0]))
  results.append(abs(hartel_no_slip_head_speed -  results[1]))
  return results
  
filelist = glob.glob("*.vtu")
filelist.sort()
print(filelist)
results_head_speed = get_head_speed(filelist)
print("Speed of free slip head, no slip head and errors from literature values")
print(results_head_speed)
    </variable>
 </variables>    
 <pass_tests> 
<test name="check cg lower 2 mixing bins have roughly half material at t=0 (tol = 1e-3)" language="python">
print((abs(temp_bin_lower_0 - 0.5)))
assert (abs(temp_bin_lower_0 - 0.5) &lt; 1e-3)
</test>
    <test name="check cg upper mixing bin has half material at t=0 (tol= 1e-3)" language="python">
print((abs(temp_bin_upper_0 - 0.5)))
assert (abs(temp_bin_upper_0 - 0.5) &lt; 1e-3)
</test>
   <test name="check cg mixing bins of temp sum to 1 at t=0 (tol = 1e-5)" language="python">
print((abs(temp_bin_total_0 - 1.0)))
assert (abs(temp_bin_total_0 - 1.0) &lt; 1e-5)
    </test>
    <test name="check cg mixing bins of temp sum to 1 at final step (tol = 1e-5)" language="python">
print((abs(temp_bin_total_end - 1.0)))
assert (abs(temp_bin_total_end - 1.0) &lt; 1e-5)
    </test>
    <test name="Speed of head at no slip boundaries (20%)" language="python">
print((abs((hartel_no_slip_head_speed -  results_head_speed[1])/hartel_no_slip_head_speed)))
assert((abs((hartel_no_slip_head_speed -  results_head_speed[1])/hartel_no_slip_head_speed)) &lt; 0.2)
    </test>
    <test name="Speed of head at free slip boundaries (20%)" language="python">
print((abs((hartel_free_slip_head_speed -  results_head_speed[0])/hartel_free_slip_head_speed)))
assert((abs((hartel_free_slip_head_speed -  results_head_speed[0])/hartel_free_slip_head_speed)) &lt; 0.2)
    </test>
  </pass_tests>
  <warn_tests>
    <test name="Speed of head at no slip boundaries (15%)" language="python">
print((abs((hartel_no_slip_head_speed -  results_head_speed[1])/hartel_no_slip_head_speed)))
assert((abs((hartel_no_slip_head_speed -  results_head_speed[1])/hartel_no_slip_head_speed)) &lt; 0.15)
    </test>
    <test name="Speed of head at free slip boundaries (15%)" language="python">
print((abs((hartel_free_slip_head_speed -  results_head_speed[0])/hartel_free_slip_head_speed)))
assert((abs((hartel_free_slip_head_speed -  results_head_speed[0])/hartel_free_slip_head_speed)) &lt; 0.15)
    </test>
  </warn_tests>
</testproblem>
