<?xml version="1.0" encoding="utf-8" ?>
<testproblem>
  <name>Stokes-Subduction-VK-Case-1b</name>
  <owner userid="rhodrid"/>

  <tags>flml</tags>

  <problem_definition length="short" nprocs="1">
    <command_line>fluidity -v2 -l Stokes-Subduction-VK-Case-1b.flml</command_line>
  </problem_definition>

<variables>
  <variable name="solvers_converged" language="python">
import os
files = os.listdir("./")
solvers_converged = not "matrixdump" in files and not "matrixdump.info" in files
  </variable>

<variable name="T60" language="python">
import h5py
import numpy as np
f = h5py.File('VK_Case_1b.detectors.h5part', 'r')
d = f['/Step#{}'.format(len(f) - 1)]
det_id, = np.where(d['id'][:] == f.attrs['Temperature6060%ids'][0])
T60 = d['Fluid%Temperature'][det_id[0]] - 273.
</variable>

<variable name="TL2SLAB" language="python">
import h5py
import numpy as np
import math

f = h5py.File('VK_Case_1b.detectors.h5part', 'r')
tslab_ids = f.attrs['TSlab%ids']
s = np.zeros(len(f))

for i in range(len(f)):
  ids = np.where(f['/Step#{}/id'.format(i)][:] == tslab_ids[:,None])[1]
  s[i] = np.sum((f['/Step#{}/Fluid%Temperature'.format(i)][:][ids] - 273.)**2)

TL2 = [math.sqrt(s) for s in s/36]
TL2SLAB = TL2[-1]<comment>Computes the L2 Temperature norm in 36 equidistant points along the slab, close to the wedge corner.</comment>
</variable>

<variable name="TL2WEDGE" language="python">
import h5py
import numpy as np
import math

f = h5py.File('VK_Case_1b.detectors.h5part', 'r')
twedge_ids = f.attrs['TWedge%ids']
s = np.zeros(len(f))

for i in range(len(f)):
  ids = np.where(f['/Step#{}/id'.format(i)][:] == twedge_ids[:,None])[1]
  s[i] = np.sum((f['/Step#{}/Fluid%Temperature'.format(i)][:][ids] - 273.)**2)

TL2 = [math.sqrt(s) for s in s/78]
TL2WEDGE = TL2[-1]<comment>Computes the L2 Temperature norm for 78 points in the wedge corner.</comment>
</variable>

<variable name="HORIZ_GRADIENT_ONE" language="python">
import h5py
import numpy as np
f = h5py.File('VK_Case_1b.detectors.h5part', 'r')
d = f['/Step#{}'.format(len(f) - 1)]
det_id, = np.where(d['id'][:] == f.attrs['Pressure_up%ids'][0])
HORIZ_GRADIENT_ONE = d['Fluid%FiniteElementGradient%x'][det_id[0]]
</variable>

<variable name="VERTICAL_GRADIENT_ONE" language="python">
import h5py
import numpy as np
f = h5py.File('VK_Case_1b.detectors.h5part', 'r')
d = f['/Step#{}'.format(len(f) - 1)]
det_id, = np.where(d['id'][:] == f.attrs['Pressure_up%ids'][0])
VERTICAL_GRADIENT_ONE = -d['Fluid%FiniteElementGradient%y'][det_id[0]]
</variable>

<variable name="HORIZ_GRADIENT_TWO" language="python">
import h5py
import numpy as np
f = h5py.File('VK_Case_1b.detectors.h5part', 'r')
d = f['/Step#{}'.format(len(f) - 1)]
det_id, = np.where(d['id'][:] == f.attrs['Pressure_down%ids'][0])
HORIZ_GRADIENT_TWO = d['Fluid%FiniteElementGradient%x'][det_id[0]]
</variable>

<variable name="VERTICAL_GRADIENT_TWO" language="python">
import h5py
import numpy as np
f = h5py.File('VK_Case_1b.detectors.h5part', 'r')
d = f['/Step#{}'.format(len(f) - 1)]
det_id, = np.where(d['id'][:] == f.attrs['Pressure_down%ids'][0])
VERTICAL_GRADIENT_TWO = -d['Fluid%FiniteElementGradient%y'][det_id[0]]
</variable>

</variables>

<pass_tests>
  <test name="Solvers converged" language="python">
    assert(solvers_converged)
  </test>

<test name="Temperature at (60,-60)km: 377.5K .lt. T .lt. 382.5K" language="python">
assert(abs(T60-380.0) &lt; 2.5)
</test>

<test name="Temperature along slab surface: 497K .lt. TL2SLAB .lt. 503K" language="python">
assert(abs(TL2SLAB-500.0) &lt; 3.)
</test>

<test name="Temperature in the wedge: 850.0K .lt. TL2WEDGE .lt. 860.0K" language="python">
assert(abs(TL2WEDGE-855.0) &lt; 5.)
</test>

<test name="Horizontal Pressure Gradient at (66,-54)km: 57350 Pa/m .lt. HORIZ_GRADIENT_ONE .lt. 57600Pa/m" language="python">
assert(abs(HORIZ_GRADIENT_ONE-57475.) &lt; 125.)
</test>

<test name="Vertical Pressure Gradient at (66,-54)km: 14965Pa/m .lt. VERTICAL_GRADIENT_ONE .lt. 15165Pa/m" language="python">
assert(abs(VERTICAL_GRADIENT_ONE)-15030. &lt; 50.)
</test>

<test name="Horizontal Pressure Gradient at (594,-354)km:  29.00Pa/m .lt. HORIZ_GRADIENT_TWO .lt. 29.40Pa/m" language="python">
assert(abs(HORIZ_GRADIENT_TWO-29.2) &lt; 0.2)
</test>

<test name="Vertical Pressure Gradient at (594,-354)km: 27.0Pa/m .lt. VERTICAL_GRADIENT_TWO .lt. 27.6Pa/m" language="python">
assert(abs(VERTICAL_GRADIENT_TWO-27.3) &lt; 0.3)
</test>

</pass_tests>

<warn_tests>
</warn_tests>

</testproblem>





