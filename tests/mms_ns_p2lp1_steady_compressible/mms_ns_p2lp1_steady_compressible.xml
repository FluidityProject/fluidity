<?xml version='1.0' encoding='UTF-8'?>
<testproblem>
  <name>p2p1 navier stokes spatial convergence test with strong bc and stress form viscosity</name>
  <owner userid="cwilson" />
  <tags>flml</tags>
  <problem_definition length="long" nprocs="1">
    <command_line>mpiexec fluidity -v2 -l MMS_A.flml; mv fluidity.log-0 MMS_A.log; mv fluidity.err-0 MMS_A.err; mpiexec fluidity -v2 -l MMS_B.flml; mv fluidity.log-0 MMS_B.log; mv fluidity.err-0 MMS_B.err</command_line>
    
  </problem_definition>
  <variables>
    <variable name="log_n_lines" language="python">
import os
files = os.listdir("./")
log_n_lines = {}
for file in files:
  if file.endswith(".log"):
    fileHandle = open(file)
    log = fileHandle.read()
    logSplit = log.split("\n")
    print(file + ":")
    for line in logSplit[-10:]:
      print(line)
    log_n_lines[file] = len(logSplit)
    fileHandle.close()
    </variable>
    <variable name="ab_convergence_vel" language="python">from fluidity_tools import stat_parser as stat
from math import log

a_error_x = stat("MMS_A.stat")["NS"]["VelocityAbsoluteDifference%1"]["l2norm"][-1]
b_error_x = stat("MMS_B.stat")["NS"]["VelocityAbsoluteDifference%1"]["l2norm"][-1]
a_error_y = stat("MMS_A.stat")["NS"]["VelocityAbsoluteDifference%2"]["l2norm"][-1]
b_error_y = stat("MMS_B.stat")["NS"]["VelocityAbsoluteDifference%2"]["l2norm"][-1]

a_error_inf_x = stat("MMS_A.stat")["NS"]["VelocityAbsoluteDifference%1"]["max"][-1]
b_error_inf_x = stat("MMS_B.stat")["NS"]["VelocityAbsoluteDifference%1"]["max"][-1]
a_error_inf_y = stat("MMS_A.stat")["NS"]["VelocityAbsoluteDifference%2"]["max"][-1]
b_error_inf_y = stat("MMS_B.stat")["NS"]["VelocityAbsoluteDifference%2"]["max"][-1]

print(a_error_x)
print(b_error_x)
print(a_error_y)
print(b_error_y)

print(a_error_inf_x)
print(b_error_inf_x)
print(a_error_inf_y)
print(b_error_inf_y)

ab_ratio_x = a_error_x / b_error_x
ab_ratio_y = a_error_y / b_error_y
ab_ratio_inf_x = a_error_inf_x / b_error_inf_x
ab_ratio_inf_y = a_error_inf_y / b_error_inf_y
ab_convergence_vel = [[log(ab_ratio_x, 2), log(ab_ratio_inf_x, 2)], [log(ab_ratio_y, 2), log(ab_ratio_inf_y, 2)]]</variable>
    <variable name="ab_convergence_p" language="python">from fluidity_tools import stat_parser as stat
from math import log

a_error = stat("MMS_A.stat")["NS"]["PressureAbsoluteDifference"]["l2norm"][-1]
b_error = stat("MMS_B.stat")["NS"]["PressureAbsoluteDifference"]["l2norm"][-1]

a_error_inf = stat("MMS_A.stat")["NS"]["PressureAbsoluteDifference"]["max"][-1]
b_error_inf = stat("MMS_B.stat")["NS"]["PressureAbsoluteDifference"]["max"][-1]

print(a_error)
print(b_error)

print(a_error_inf)
print(b_error_inf)

ab_ratio = a_error / b_error
ab_ratio_inf = a_error_inf / b_error_inf
ab_convergence_p = [log(ab_ratio, 2), log(ab_ratio_inf, 2)]</variable>
    <variable name="ab_convergence_rho" language="python">from fluidity_tools import stat_parser as stat
from math import log

a_error = stat("MMS_A.stat")["NS"]["DensityAbsoluteDifference"]["l2norm"][-1]
b_error = stat("MMS_B.stat")["NS"]["DensityAbsoluteDifference"]["l2norm"][-1]

a_error_inf = stat("MMS_A.stat")["NS"]["DensityAbsoluteDifference"]["max"][-1]
b_error_inf = stat("MMS_B.stat")["NS"]["DensityAbsoluteDifference"]["max"][-1]

print(a_error)
print(b_error)

print(a_error_inf)
print(b_error_inf)

ab_ratio = a_error / b_error
ab_ratio_inf = a_error_inf / b_error_inf
ab_convergence_rho = [log(ab_ratio, 2), log(ab_ratio_inf, 2)]</variable>
    <variable name="ab_convergence_e" language="python">
from fluidity_tools import stat_parser as stat
from math import log

a_error = stat("MMS_A.stat")["NS"]["InternalEnergyAbsoluteDifference"]["l2norm"][-1]
b_error = stat("MMS_B.stat")["NS"]["InternalEnergyAbsoluteDifference"]["l2norm"][-1]

a_error_inf = stat("MMS_A.stat")["NS"]["InternalEnergyAbsoluteDifference"]["max"][-1]
b_error_inf = stat("MMS_B.stat")["NS"]["InternalEnergyAbsoluteDifference"]["max"][-1]

print(a_error)
print(b_error)

print(a_error_inf)
print(b_error_inf)

ab_ratio = a_error / b_error
ab_ratio_inf = a_error_inf / b_error_inf
ab_convergence_e = [log(ab_ratio, 2), log(ab_ratio_inf, 2)]
    </variable>

    <variable name="a_finish_time" language="python">from fluidity_tools import stat_parser as stat
a_finish_time = stat("MMS_A.stat")["ElapsedTime"]["value"][-1]</variable>
    <variable name="b_finish_time" language="python">from fluidity_tools import stat_parser as stat
b_finish_time = stat("MMS_B.stat")["ElapsedTime"]["value"][-1]</variable>

   <variable name="a_max_iterations" language="python">
from fluidity_tools import stat_parser as stat
a_max_iterations = stat("MMS_A.convergence")["Iteration"]["value"].max()
    </variable>
   <variable name="b_max_iterations" language="python">
from fluidity_tools import stat_parser as stat
b_max_iterations = stat("MMS_B.convergence")["Iteration"]["value"].max()
    </variable>

    <variable name="a_final_change_vel" language="python">import vtktools
from fluidity_tools import stat_parser as stat
vtu = vtktools.vtu("MMS_A_1.vtu")
dt = stat("MMS_A.stat")["dt"]["value"][-1]
a_final_change_vel = max(max(abs(vtu.GetVectorField("Velocity")[:,0]-vtu.GetVectorField("OldVelocity")[:,0])/dt), max(abs(vtu.GetVectorField("Velocity")[:,1]-vtu.GetVectorField("OldVelocity")[:,1])/dt))</variable>
    <variable name="b_final_change_vel" language="python">import vtktools
from fluidity_tools import stat_parser as stat
vtu = vtktools.vtu("MMS_B_1.vtu")
dt = stat("MMS_B.stat")["dt"]["value"][-1]
b_final_change_vel = max(max(abs(vtu.GetVectorField("Velocity")[:,0]-vtu.GetVectorField("OldVelocity")[:,0])/dt), max(abs(vtu.GetVectorField("Velocity")[:,1]-vtu.GetVectorField("OldVelocity")[:,1])/dt))</variable>

    <variable name="a_final_change_p" language="python">import vtktools
from fluidity_tools import stat_parser as stat
vtu = vtktools.vtu("MMS_A_1.vtu")
dt = stat("MMS_A.stat")["dt"]["value"][-1]
a_final_change_p = max(abs(vtu.GetScalarField("Pressure")-vtu.GetScalarField("OldPressure"))/dt)</variable>
    <variable name="b_final_change_p" language="python">import vtktools
from fluidity_tools import stat_parser as stat
vtu = vtktools.vtu("MMS_B_1.vtu")
dt = stat("MMS_B.stat")["dt"]["value"][-1]
b_final_change_p = max(abs(vtu.GetScalarField("Pressure")-vtu.GetScalarField("OldPressure"))/dt)</variable>

    <variable name="a_final_change_rho" language="python">import vtktools
from fluidity_tools import stat_parser as stat
vtu = vtktools.vtu("MMS_A_1.vtu")
dt = stat("MMS_A.stat")["dt"]["value"][-1]
a_final_change_rho = max(abs(vtu.GetScalarField("Density")-vtu.GetScalarField("OldDensity"))/dt)</variable>
    <variable name="b_final_change_rho" language="python">import vtktools
from fluidity_tools import stat_parser as stat
vtu = vtktools.vtu("MMS_B_1.vtu")
dt = stat("MMS_B.stat")["dt"]["value"][-1]
b_final_change_rho = max(abs(vtu.GetScalarField("Density")-vtu.GetScalarField("OldDensity"))/dt)</variable>
    <variable name="a_final_change_e" language="python">import vtktools
from fluidity_tools import stat_parser as stat
vtu = vtktools.vtu("MMS_A_1.vtu")
dt = stat("MMS_A.stat")["dt"]["value"][-1]
a_final_change_e = max(abs(vtu.GetScalarField("InternalEnergy")-vtu.GetScalarField("OldInternalEnergy"))/dt)</variable>
    <variable name="b_final_change_e" language="python">import vtktools
from fluidity_tools import stat_parser as stat
vtu = vtktools.vtu("MMS_B_1.vtu")
dt = stat("MMS_B.stat")["dt"]["value"][-1]
b_final_change_e = max(abs(vtu.GetScalarField("InternalEnergy")-vtu.GetScalarField("OldInternalEnergy"))/dt)</variable>

  </variables>
  <pass_tests>
    <test name="ab_convergence_vel_x: L2 order &gt; 2.0" language="python">assert(ab_convergence_vel[0][0] &gt; 2.0)</test>
    <test name="ab_convergence_vel_y: L2 order &gt; 2.0" language="python">assert(ab_convergence_vel[1][0] &gt; 2.0)</test>

    <test name="ab_convergence_p: L2 order &gt; 2.0" language="python">assert(ab_convergence_p[0] &gt; 2.0)</test>

    <test name="ab_convergence_rho: L2 order &gt; 2.0" language="python">assert(ab_convergence_rho[0] &gt; 2.0)</test>

    <test name="ab_convergence_e: L2 order &gt; 2.0" language="python">assert(ab_convergence_e[0] &gt; 2.0)</test>
    <test name="checking A finished in less than 50.0" language="python">assert(a_finish_time-50.0 &lt; 1.E-10)</test>
    <test name="checking B finished in less than 50.0" language="python">assert(b_finish_time-50.0 &lt; 1.E-10)</test>

    <test name="checking A only used 5-9 iterations" language="python">
assert(abs(a_max_iterations-7.0) &lt; 2.0)
    </test>
    <test name="checking B only used 5-9 iterations" language="python">
assert(abs(b_max_iterations-7.0) &lt; 2.0)
    </test>

    <test name="checking steady state was reached in A vel" language="python">assert(a_final_change_vel &lt; 1.E-3)</test>
    <test name="checking steady state was reached in B vel" language="python">assert(b_final_change_vel &lt; 1.E-3)</test>

    <test name="checking steady state was reached in A p" language="python">assert(a_final_change_p &lt; 1.E-3)</test>
    <test name="checking steady state was reached in B p" language="python">assert(b_final_change_p &lt; 1.E-3)</test>

    <test name="checking steady state was reached in A rho" language="python">assert(a_final_change_rho &lt; 1.E-3)</test>
    <test name="checking steady state was reached in B rho" language="python">assert(b_final_change_rho &lt; 1.E-3)</test>

    <test name="checking steady state was reached in A e" language="python">assert(a_final_change_e &lt; 1.E-3)</test>
    <test name="checking steady state was reached in B e" language="python">assert(b_final_change_e &lt; 1.E-3)</test>
  </pass_tests>
  <warn_tests />
</testproblem>