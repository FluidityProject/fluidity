<?xml version='1.0' encoding='UTF-8'?>
<testproblem>
  <name>wetting_and_drying_thacker_cg_parallel</name>
  <owner userid="sf1409"/>
  <tags> parallel </tags>
  <problem_definition length="medium" nprocs="4">
    <command_line>mpiexec flredecomp -i 1 -o 4 -v -l thacker_B_d0=1.0 thacker_B_d0=1.0_flredecomp &amp;&amp;
mpiexec fluidity thacker_B_d0=1.0_flredecomp.flml</command_line>
  </problem_definition>
  <variables>
    <variable name="ElapsedTime" language="python">from fluidity_tools import stat_parser
s = stat_parser("thacker_B_d0=1.0.stat")
ElapsedTime=s["ElapsedTime"]["value"]</variable>
    <variable name="fs_error_l2" language="python">from fluidity_tools import stat_parser
s = stat_parser("thacker_B_d0=1.0.stat")
fs_error_l2=s["water"]["fs_error_abs"]["l2norm"]</variable>
    <variable name="fs_error_max" language="python">from fluidity_tools import stat_parser
s = stat_parser("thacker_B_d0=1.0.stat")
fs_error_max=s["water"]["fs_error_abs"]["max"]</variable>
    <variable name="vel_error_l2" language="python">from fluidity_tools import stat_parser
s = stat_parser("thacker_B_d0=1.0.stat")
vel_error_l2=s["water"]["vel_error%magnitude"]["l2norm"]</variable>
    <variable name="vel_error_max" language="python">from fluidity_tools import stat_parser
s = stat_parser("thacker_B_d0=1.0.stat")
vel_error_max=s["water"]["vel_error%magnitude"]["max"]</variable>
    <variable name="volume" language="python">from fluidity_tools import stat_parser
s = stat_parser("thacker_B_d0=1.0.stat")
volume=s["water"]["Density"]["integral"]</variable>
  </variables>
  <pass_tests>
    <test name="endtime" language="python">print("Checking simulation endtime")
assert(ElapsedTime[-1]==86400.0)</test>
    <test name="fs_error" language="python">tol_l2=1500000
tol_max=0.6
print("Checking fs_error_l2 ", max(fs_error_l2), " &lt; ", tol_l2)
for val in fs_error_l2:
  assert(val&lt;tol_l2)
print("Checking fs_error_max ", max(fs_error_max), " &lt; ", tol_max)
for val in fs_error_max:
  assert(val&lt;tol_max)</test>
    <test name="vel_error" language="python">tol_l2=1000000
tol_max=3.0
print("Checking vel_error_l2 &lt; ", tol_l2)
for val in vel_error_l2:
  assert(val&lt;tol_l2)
print("Checking vel_error_max &lt; ", tol_max)
for val in vel_error_max:
  assert(val&lt;tol_max)</test>
  </pass_tests>
</testproblem>
