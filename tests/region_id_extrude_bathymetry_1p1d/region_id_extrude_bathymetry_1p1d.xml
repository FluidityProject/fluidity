<?xml version='1.0' encoding='UTF-8'?>
<testproblem>
  <name>region_id_extrude_bathymetry_1p1d</name>
  <owner userid="cwilson"/>
  <problem_definition length="short" nprocs="1">
    <command_line>fluidity -v2 -l region_id_extrude_bathymetry_1p1d.flml</command_line>
  </problem_definition>
  <variables>
    <variable name="solvers_converged" language="python">
import os
files = os.listdir("./")
solvers_converged = not "matrixdump" in files and not "matrixdump.info" in files
    </variable>
    <variable name="err_n_lines" language="python">import glob
files = glob.glob1(".","*.err-?")
err_n_lines = {}
for file in files:
    fileHandle = open(file)
    log = fileHandle.read()
    logSplit = log.split("\n")
    print(file + ":")
    for line in logSplit[-10:]:
        print(line)
    err_n_lines[file] = len(logSplit)
    fileHandle.close()
</variable>
    <variable name="log_n_lines" language="python">import glob
files = glob.glob1(".","*.log-?")
log_n_lines = {}
for file in files:
    fileHandle = open(file)
    log = fileHandle.read()
    logSplit = log.split("\n")
    print(file + ":")
    for line in logSplit[-10:]:
        print(line)
    log_n_lines[file] = len(logSplit)
    fileHandle.close()
</variable>
    <variable name="domain_area" language="python">from fluidity_tools import stat_parser as stat
domain_area = stat("landslide_benchmark.stat")["Water"]["ConstantField"]["integral"]</variable>
    <variable name="no_nodes" language="python">from fluidity_tools import stat_parser as stat
no_nodes = stat("landslide_benchmark.stat")["CoordinateMesh"]["nodes"]</variable>
    <variable name="finish_time" language="python">from fluidity_tools import stat_parser as stat
finish_time = stat("landslide_benchmark.stat")["ElapsedTime"]["value"][-1]</variable>
    <variable name="integral_tracer_1" language="python">from fluidity_tools import stat_parser as stat
integral_tracer_1 = stat("landslide_benchmark.stat")["Water"]["OtherTracer"]["surface_integral%1"]</variable>
    <variable name="integral_tracer_2" language="python">from fluidity_tools import stat_parser as stat
integral_tracer_2 = stat("landslide_benchmark.stat")["Water"]["OtherTracer"]["surface_integral%2"]</variable>
    <variable name="integral_tracer_6" language="python">from fluidity_tools import stat_parser as stat
integral_tracer_6 = stat("landslide_benchmark.stat")["Water"]["Tracer"]["surface_integral%6"]</variable>
    <variable name="integral_tracer_7" language="python">from fluidity_tools import stat_parser as stat
integral_tracer_7 = stat("landslide_benchmark.stat")["Water"]["OtherTracer"]["surface_integral%7"]</variable>
    <variable name="integral_tracer_8" language="python">from fluidity_tools import stat_parser as stat
integral_tracer_8 = stat("landslide_benchmark.stat")["Water"]["Tracer"]["surface_integral%8"]</variable>
    <variable name="integral_tracer_9" language="python">from fluidity_tools import stat_parser as stat
integral_tracer_9 = stat("landslide_benchmark.stat")["Water"]["Tracer"]["surface_integral%9"]</variable>
    <variable name="integral_tracer_dg_1" language="python">from fluidity_tools import stat_parser as stat
integral_tracer_dg_1 = stat("landslide_benchmark.stat")["Water"]["OtherTracerP1DG"]["surface_integral%1"]</variable>
    <variable name="integral_tracer_dg_2" language="python">from fluidity_tools import stat_parser as stat
integral_tracer_dg_2 = stat("landslide_benchmark.stat")["Water"]["OtherTracerP1DG"]["surface_integral%2"]</variable>
    <variable name="integral_tracer_dg_6" language="python">from fluidity_tools import stat_parser as stat
integral_tracer_dg_6 = stat("landslide_benchmark.stat")["Water"]["TracerP1DG"]["surface_integral%6"]</variable>
    <variable name="integral_tracer_dg_7" language="python">from fluidity_tools import stat_parser as stat
integral_tracer_dg_7 = stat("landslide_benchmark.stat")["Water"]["OtherTracerP1DG"]["surface_integral%7"]</variable>
    <variable name="integral_tracer_dg_8" language="python">from fluidity_tools import stat_parser as stat
integral_tracer_dg_8 = stat("landslide_benchmark.stat")["Water"]["TracerP1DG"]["surface_integral%8"]</variable>
    <variable name="integral_tracer_dg_9" language="python">from fluidity_tools import stat_parser as stat
integral_tracer_dg_9 = stat("landslide_benchmark.stat")["Water"]["TracerP1DG"]["surface_integral%9"]</variable>
    <variable name="region_id_1" language="python">
import h5py
f = h5py.File('landslide_benchmark.detectors.h5part', 'r')
region_id_1 = f['/Step#0/Water%RegionIDs'][0]</variable>
    <variable name="region_id_2" language="python">
import h5py
f = h5py.File('landslide_benchmark.detectors.h5part', 'r')
region_id_2 = f['/Step#0/Water%RegionIDs'][1]</variable>
    <variable name="region_id_3" language="python">
import h5py
f = h5py.File('landslide_benchmark.detectors.h5part', 'r')
region_id_3 = f['/Step#0/Water%RegionIDs'][2]</variable>
  </variables>
  <pass_tests>
    <test name="Solvers converged" language="python">
      assert(solvers_converged)
    </test>
    <test name="domain_area_constant" language="python">assert abs(domain_area[0]-65578750.) &lt; 1.E-10</test>
    <test name="check_no_nodes" language="python">assert abs(no_nodes[0]-26554) == 0</test>
    <test name="check_finish_time" language="python">assert abs(finish_time) &lt; 1.E-10</test>
    <test name="tracer_id_1" language="python">import numpy
assert numpy.all(abs(integral_tracer_1-1) &lt; 1.E-6)</test>
    <test name="tracer_id_2" language="python">import numpy
assert numpy.all(abs(integral_tracer_2-2) &lt; 1.E-6)</test>
    <test name="tracer_id_6" language="python">import numpy
assert numpy.all(abs(integral_tracer_6-6) &lt; 1.E-6)</test>
    <test name="tracer_id_7" language="python">import numpy
assert numpy.all(abs(integral_tracer_7-7) &lt; 1.E-6)</test>
    <test name="tracer_id_8" language="python">import numpy
assert numpy.all(abs(integral_tracer_8-8) &lt; 1.E-6)</test>
    <test name="tracer_id_9" language="python">import numpy
assert numpy.all(abs(integral_tracer_9-9) &lt; 1.E-6)</test>
    <test name="tracer_dg_id_1" language="python">import numpy
assert numpy.all(abs(integral_tracer_dg_1-1) &lt; 1.E-6)</test>
    <test name="tracer_dg_id_2" language="python">import numpy
assert numpy.all(abs(integral_tracer_dg_2-2) &lt; 1.E-6)</test>
    <test name="tracer_dg_id_6" language="python">import numpy
assert numpy.all(abs(integral_tracer_dg_6-6) &lt; 1.E-6)</test>
    <test name="tracer_dg_id_7" language="python">import numpy
assert numpy.all(abs(integral_tracer_dg_7-7) &lt; 1.E-6)</test>
    <test name="tracer_dg_id_8" language="python">import numpy
assert numpy.all(abs(integral_tracer_dg_8-8) &lt; 1.E-6)</test>
    <test name="tracer_dg_id_9" language="python">import numpy
assert numpy.all(abs(integral_tracer_dg_9-9) &lt; 1.E-6)</test>
    <test name="value_region_id_1" language="python">import numpy
assert numpy.all(abs(region_id_1-1) &lt; 1.E-10)</test>
    <test name="value_region_id_2" language="python">import numpy
assert numpy.all(abs(region_id_2-2) &lt; 1.E-10)</test>
    <test name="value_region_id_3" language="python">import numpy
assert numpy.all(abs(region_id_3-3) &lt; 1.E-10)</test>
  </pass_tests>
</testproblem>
