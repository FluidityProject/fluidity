<?xml version='1.0' encoding='utf-8'?>
<fluidity_options>
  <simulation_name>
    <string_value lines="1">top_hat_cv</string_value>
  </simulation_name>
  <problem_type>
    <string_value lines="1">fluids</string_value>
  </problem_type>
  <geometry>
    <dimension>
      <integer_value rank="0">2</integer_value>
    </dimension>
    <mesh name="CoordinateMesh">
      <from_file file_name="line">
        <format name="gmsh"/>
        <stat>
          <include_in_stat/>
        </stat>
      </from_file>
    </mesh>
    <mesh name="VelocityMesh">
      <from_mesh>
        <mesh name="PeriodicMesh"/>
        <stat>
          <exclude_from_stat/>
        </stat>
      </from_mesh>
    </mesh>
    <mesh name="PressureMesh">
      <from_mesh>
        <mesh name="PeriodicMesh"/>
        <stat>
          <exclude_from_stat/>
        </stat>
      </from_mesh>
    </mesh>
    <mesh name="PeriodicMesh">
      <from_mesh>
        <mesh name="CoordinateMesh"/>
        <periodic_boundary_conditions name="PeriodicBoundaryCondition">
          <physical_boundary_ids>
            <integer_value rank="1" shape="1">1</integer_value>
          </physical_boundary_ids>
          <aliased_boundary_ids>
            <integer_value rank="1" shape="1">2</integer_value>
          </aliased_boundary_ids>
          <coordinate_map>
            <string_value type="code" language="python" lines="20">def val(x, t):
	return [0.0, x[1]]</string_value>
          </coordinate_map>
        </periodic_boundary_conditions>
        <stat>
          <exclude_from_stat/>
        </stat>
      </from_mesh>
    </mesh>
    <quadrature>
      <degree>
        <integer_value rank="0">4</integer_value>
      </degree>
    </quadrature>
  </geometry>
  <io>
    <dump_format>
      <string_value>vtk</string_value>
    </dump_format>
    <dump_period>
      <constant>
        <real_value rank="0">1</real_value>
      </constant>
    </dump_period>
    <output_mesh name="CoordinateMesh"/>
    <stat/>
  </io>
  <timestepping>
    <current_time>
      <real_value rank="0">0.0</real_value>
    </current_time>
    <timestep>
      <real_value rank="0">1.0</real_value>
    </timestep>
    <finish_time>
      <real_value rank="0">80.0</real_value>
    </finish_time>
    <nonlinear_iterations>
      <integer_value rank="0">1</integer_value>
    </nonlinear_iterations>
  </timestepping>
  <physical_parameters/>
  <material_phase name="Fluid">
    <vector_field rank="1" name="Velocity">
      <prescribed>
        <mesh name="VelocityMesh"/>
        <value name="WholeMesh">
          <python>
            <string_value type="code" language="python" lines="20">def val(x, t):
	gridPoints = 40
	CFL = 0.125
	return [(1.0 / gridPoints) * CFL, 0.0]</string_value>
          </python>
        </value>
        <output>
          <exclude_from_vtu/>
        </output>
        <stat>
          <exclude_from_stat/>
        </stat>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
      </prescribed>
    </vector_field>
    <scalar_field rank="0" name="Tracer">
      <prognostic>
        <mesh name="VelocityMesh"/>
        <equation name="AdvectionDiffusion"/>
        <spatial_discretisation>
          <control_volumes>
            <face_value name="FiniteElement">
              <limit_face_value>
                <limiter name="Sweby">
                  <locally_bound_upwind_value/>
                </limiter>
              </limit_face_value>
            </face_value>
            <diffusion_scheme name="ElementGradient"/>
          </control_volumes>
          <conservative_advection>
            <real_value rank="0">1.0</real_value>
          </conservative_advection>
        </spatial_discretisation>
        <temporal_discretisation>
          <theta>
            <real_value rank="0">0.5</real_value>
          </theta>
          <control_volumes>
            <number_advection_iterations>
              <integer_value rank="0">3</integer_value>
            </number_advection_iterations>
            <limit_theta/>
          </control_volumes>
        </temporal_discretisation>
        <solver>
          <iterative_method name="gmres">
            <restart>
              <integer_value rank="0">30</integer_value>
            </restart>
          </iterative_method>
          <preconditioner name="sor"/>
          <relative_error>
            <real_value rank="0">1.0e-10</real_value>
          </relative_error>
          <max_iterations>
            <integer_value rank="0">1000</integer_value>
          </max_iterations>
          <never_ignore_solver_failures/>
          <diagnostics>
            <monitors/>
          </diagnostics>
        </solver>
        <initial_condition name="WholeMesh">
          <python>
            <string_value type="code" language="python" lines="20">def val(x, t):
	topHatPoints = 10
	gridPoints = 40
	if x[0] &lt; float(topHatPoints + 0.5) / float(gridPoints):
		return 1.0
	else:
		return 0.0</string_value>
          </python>
        </initial_condition>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
        <consistent_interpolation/>
      </prognostic>
    </scalar_field>
  </material_phase>
</fluidity_options>
