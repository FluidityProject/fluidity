<?xml version='1.0' encoding='UTF-8'?>
<testproblem>
  <name>Square convection (Ra=10^6 version)</name>
  <owner userid="rhodrid"/>
  <tags>flml</tags>
  <problem_definition length="medium" nprocs="2">
    <command_line>
mpiexec flredecomp -i 1 -o 2 -v -l square-convection square-convection_flredecomp &amp;&amp;
mpiexec fluidity -v2 -l square-convection_flredecomp.flml</command_line>
  </problem_definition>
  <variables>
    <variable name="timesteps" language="python">
import fluidity_tools
s = fluidity_tools.stat_parser("square-convection.stat")
timesteps = len(s["ElapsedTime"]["value"])
    </variable>
    <variable name="max_cfl_numbers" language="python">
import fluidity_tools
s = fluidity_tools.stat_parser("square-convection.stat")
max_cfl_numbers = s["Fluid"]["CFLNumber"]["max"]
    </variable>
    <variable name="solvers_converged" language="python">
import os
files = os.listdir("./")
solvers_converged = not "matrixdump" in files and not "matrixdump.info" in files 
    </variable>
    <variable name="final_mid_line_u" language="python">
import fluidity.diagnostics.fluiditytools as fluidity_tools
import fluidity.diagnostics.utils as utils
import fluidity.diagnostics.vtutools as vtktools

vtu = vtktools.vtu(fluidity_tools.VtuFilenames("square-convection", fluidity_tools.FindMaxVtuId("square-convection"), extension = ".pvtu")[0])
vtu = vtktools.VtuFromPvtu(vtu)
line = vtktools.PlanarVtuCut(vtu, origin = (0.5, 0.0, 0.0), normal = (1.0, 0.0, 0.0))

coords = line.GetLocations()
vel = line.GetVectorField("Velocity")

z = [coord[1] for coord in coords]
u = [val[0] for val in vel]
z, u = utils.KeyedSort(z, u, returnSortedKeys = True)

final_mid_line_u = [(z[i], u[i]) for i in range(len(z))]
    </variable>
    <variable name="final_mid_line_w" language="python">
import fluidity.diagnostics.fluiditytools as fluidity_tools
import fluidity.diagnostics.utils as utils
import fluidity.diagnostics.vtutools as vtktools

vtu = vtktools.vtu(fluidity_tools.VtuFilenames("square-convection", fluidity_tools.FindMaxVtuId("square-convection"), extension = ".pvtu")[0])
vtu = vtktools.VtuFromPvtu(vtu)
line = vtktools.PlanarVtuCut(vtu, origin = (0.0, 0.5, 0.0), normal = (0.0, 1.0, 0.0))

coords = line.GetLocations()
vel = line.GetVectorField("Velocity")

x = [coord[0] for coord in coords]
w = [val[1] for val in vel]
x, w = utils.KeyedSort(x, w, returnSortedKeys = True)

final_mid_line_w = [(x[i], w[i]) for i in range(len(x))]
    </variable>
    <variable name="psi_max" language="python">
import fluidity.diagnostics.fluiditytools as fluidity_tools
import fluidity.diagnostics.vtutools as vtktools

vtu = vtktools.vtu(fluidity_tools.VtuFilenames("square-convection", fluidity_tools.FindMaxVtuId("square-convection"), extension = ".pvtu")[0])
vtu = vtktools.VtuFromPvtu(vtu)

coords = vtu.GetLocations()
psi = vtu.GetScalarField("StreamFunction")

psi_max = (coords[0][:2], abs(psi[0]))
for i, coord in enumerate(coords):
  if abs(psi[i]) &gt; psi_max[1]:
    psi_max = (coord[:2], abs(psi[i]))
    </variable>
    <variable name="psi_mid" language="python">
import h5py
import numpy as np
f = h5py.File("square-convection.detectors.h5part", "r")
d = f["/Step#{}".format(len(f) - 1)]
det_id, = np.where(d["id"][:] == f.attrs["MidPoint%ids"][0])
psi_mid = d["Fluid%StreamFunction"][det_id[0]]
    </variable>
    <variable name="left_boundary_average_nu" language="python">
import fluidity_tools
s = fluidity_tools.stat_parser("square-convection.stat")
left_boundary_average_nu = s["Fluid"]["Temperature"]["surface_integral%LeftH"][-1]
    </variable>
    <variable name="left_boundary_mid_height_nu" language="python">
import h5py
import numpy as np
f = h5py.File("square-convection.detectors.h5part", "r")
d = f["/Step#{}".format(len(f) - 1)]
det_id, = np.where(d["id"][:] == f.attrs["LeftBoundaryMidHeight%ids"][0])
left_boundary_mid_height_nu = d["Fluid%TemperatureGradient%x"][det_id[0]]
    </variable>
    <variable name="left_boundary_nus" language="python">
import fluidity.diagnostics.fluiditytools as fluidity_tools
import fluidity.diagnostics.vtutools as vtktools

vtu = vtktools.vtu(fluidity_tools.VtuFilenames("square-convection", fluidity_tools.FindMaxVtuId("square-convection"), extension = ".pvtu")[0])
vtu = vtktools.VtuFromPvtu(vtu)
coords = vtu.GetLocations()
gradT = vtu.GetVectorField("TemperatureGradient")
left_boundary_nus = []
for i, coord in enumerate(coords):
  if coord[0] &lt; 1.0e-6:
    left_boundary_nus.append((coord[1], -gradT[i][0]))
    </variable>
  </variables>
  <pass_tests>
<!--Crash tests-->
    <test name="Simulation completed" language="python">
import fluidity_tools
assert(timesteps &lt; 10000)
    </test>
    <test name="Solvers converged" language="python">
assert(solvers_converged)
    </test>
    <test name="CFL number" language="python">
print(max(max_cfl_numbers))
assert(max(max_cfl_numbers) &lt;= 4.0 * 1.2)
    </test>
<!--Benchmark tests. Testing against benchmark values from:
  G. de Vahl Davis and I. P. Jones, Natural Convection In A Square Cavity: A Comparison Exercise, Int. J. for Num. Meth. in Fluids, vol. 3, 227-248 (1983)-->
    <test name="Mid-line umax benchmark" language="python">
import fluidity_tools
max = final_mid_line_u[0]
for z, u in final_mid_line_u[1:]:
  if u &gt; max[1]:
    max = (z, u)
print("Max u = " + str(max[1]) + " at z = " + str(max[0]))
fluidity_tools.compare_variable(max[0], 0.850, 0.06)
fluidity_tools.compare_variable(max[1], 64.63, 0.06)
    </test>
    <test name="Mid-line wmax benchmark" language="python">
import fluidity_tools
max = final_mid_line_w[0]
for x, w in final_mid_line_w[1:]:
  if w &gt; max[1]:
    max = (x, w)
print("Max w = " + str(max[1]) + " at x = " + str(max[0]))
fluidity_tools.compare_variable(max[0], 0.0379, 0.03)
# Tolerance increased for flredecomp
#fluidity_tools.compare_variable(max[1], 219.36, 0.003)
fluidity_tools.compare_variable(max[1], 219.36, 0.004)
    </test>
    <test name="Streamfunction max benchmark" language="python">
import fluidity_tools
if psi_max[0][0] &lt; 0.5:
  fluidity_tools.compare_variable(psi_max[0][0], 0.151, 0.01)
  fluidity_tools.compare_variable(psi_max[0][1], 0.547, 0.03)
else:
  fluidity_tools.compare_variable(1.0 -psi_max[0][0], 0.151, 0.01)
  fluidity_tools.compare_variable(1.0 - psi_max[0][1], 0.547, 0.03)
fluidity_tools.compare_variable(psi_max[1], 16.750, 0.004)
    </test>
    <test name="Mid-point streamfunction benchmark" language="python">
import fluidity_tools
fluidity_tools.compare_variable(abs(psi_mid), 16.32, 0.01)
    </test>
    <test name="Left boundary average Nu benchmark" language="python">
import fluidity_tools
fluidity_tools.compare_variable(left_boundary_average_nu, 8.800, 0.03)
    </test>
    <test name="Left boundary mid-height Nu benchmark" language="python">
import fluidity_tools
fluidity_tools.compare_variable(left_boundary_mid_height_nu, -8.799, 0.1)
    </test>
    <test name="Final left boundary Nu extrema benchmarks" language="python">
import fluidity_tools
min = left_boundary_nus[0]
max = left_boundary_nus[0]
for z, nu in left_boundary_nus[1:]:
  if nu &lt; min[1]:
    min = (z, nu)
  if nu &gt; max[1]:
    max = (z, nu)
print("Min Nu = " + str(min[1]) + " at z = " + str(min[0]))
print("Max Nu = " + str(max[1]) + " at z = " + str(max[0]))
fluidity_tools.compare_variable(min[0], 1.0, 0.001)
# This is way off the benchmark figure
#fluidity_tools.compare_variable(min[1], 0.989, 0.1)
fluidity_tools.compare_variable(max[0], 0.0378, 0.05)
fluidity_tools.compare_variable(max[1], 17.925, 0.1)
    </test>
  </pass_tests>
  <warn_tests>
  </warn_tests>
</testproblem>
