<?xml version='1.0' encoding='UTF-8'?>
<testproblem>
  <name>Control volume, multi-material surface integral pressure check</name>
  <owner userid="cwilson"/>
  <tags>flml</tags>
    <problem_definition length="short" nprocs="1">
    <command_line>fluidity -v2 mmat-balancepressure-p0p1cv-gpp2.flml &gt; mmat-balancepressure-p0p1cv-gpp2.log &amp;&amp; fluidity -v2 mmat-balancepressure-p0p1cv-gpp2-bc.flml &gt; mmat-balancepressure-p0p1cv-gpp2-bc.log &amp;&amp; fluidity -v2 mmat-balancepressure-p0p1cv-hpp2dg.flml &gt; mmat-balancepressure-p0p1cv-hpp2dg.log &amp;&amp; fluidity -v2 mmat-balancepressure-p0p1-rhop0-vfracp0.flml &gt; mmat-balancepressure-p0p1-rhop0-vfracp0.log &amp;&amp; fluidity -v2 mmat-balancepressure-p1dgp2-rhop1dg-vfracp1cv.flml &gt; mmat-balancepressure-p1dgp2-rhop1dg-vfracp1cv.log &amp;&amp; fluidity -v2 mmat-balancepressure-p0p1cv-hpp2.flml &gt; mmat-balancepressure-p0p1cv-hpp2.log &amp;&amp; fluidity -v2 mmat-balancepressure-p0p1cv-vbpp2.flml &gt; mmat-balancepressure-p0p1cv-vbpp2.log</command_line>
  </problem_definition>  
  <variables>  
    <variable name="pressure_p0p1cv_gpp2" language="python">
import fluidity_tools
pressure_p0p1cv_gpp2 = max(fluidity_tools.stat_parser("mmat-balancepressure-p0p1cv-gpp2.stat")['Water']['Pressure']['max'])
    </variable>    
    <variable name="minpressure_p0p1cv_gpp2" language="python">
import fluidity_tools
minpressure_p0p1cv_gpp2 = min(fluidity_tools.stat_parser("mmat-balancepressure-p0p1cv-gpp2.stat")['Water']['Pressure']['min'])
    </variable>    
    <variable name="geopressure_p0p1cv_gpp2" language="python">
import fluidity_tools
geopressure_p0p1cv_gpp2 = max(fluidity_tools.stat_parser("mmat-balancepressure-p0p1cv-gpp2.stat")['Water']['GeostrophicPressure']['max'])
    </variable>    
    <variable name="mingeopressure_p0p1cv_gpp2" language="python">
import fluidity_tools
mingeopressure_p0p1cv_gpp2 = min(fluidity_tools.stat_parser("mmat-balancepressure-p0p1cv-gpp2.stat")['Water']['GeostrophicPressure']['min'])
    </variable>    
    <variable name="velocityx_p0p1cv_gpp2" language="python">
import fluidity_tools
velocityx_p0p1cv_gpp2 = max(fluidity_tools.stat_parser("mmat-balancepressure-p0p1cv-gpp2.stat")['Water']['Velocity%1']['max'])
    </variable>    
    <variable name="velocityy_p0p1cv_gpp2" language="python">
import fluidity_tools
velocityy_p0p1cv_gpp2 = max(fluidity_tools.stat_parser("mmat-balancepressure-p0p1cv-gpp2.stat")['Water']['Velocity%2']['max'])
    </variable>    
    <variable name="velocity_p0p1cv_gpp2" language="python">
import fluidity_tools
velocity_p0p1cv_gpp2 = max(fluidity_tools.stat_parser("mmat-balancepressure-p0p1cv-gpp2.stat")['Water']['Velocity%magnitude']['max'])
    </variable>    
    <variable name="volfrac0_p0p1cv_gpp2" language="python">
import fluidity_tools
volfrac0_p0p1cv_gpp2 = fluidity_tools.stat_parser("mmat-balancepressure-p0p1cv-gpp2.stat")['Water']['MaterialVolumeFraction']['integral'][0]
    </variable>    
    <variable name="volfracend_p0p1cv_gpp2" language="python">
import fluidity_tools
volfracend_p0p1cv_gpp2 = fluidity_tools.stat_parser("mmat-balancepressure-p0p1cv-gpp2.stat")['Water']['MaterialVolumeFraction']['integral'][-1]
    </variable>    
    <variable name="maxdivergence_p0p1cv_gpp2" language="python">
import fluidity_tools
maxdivergence_p0p1cv_gpp2 = max(fluidity_tools.stat_parser("mmat-balancepressure-p0p1cv-gpp2.stat")['Water']['ControlVolumeDivergence']['max'])
    </variable>    
    <variable name="mindivergence_p0p1cv_gpp2" language="python">
import fluidity_tools
mindivergence_p0p1cv_gpp2 = min(fluidity_tools.stat_parser("mmat-balancepressure-p0p1cv-gpp2.stat")['Water']['ControlVolumeDivergence']['min'])
    </variable>    
    <variable name="pressure_p0p1cv_gpp2_bc" language="python">
import fluidity_tools
pressure_p0p1cv_gpp2_bc = max(fluidity_tools.stat_parser("mmat-balancepressure-p0p1cv-gpp2-bc.stat")['Water']['Pressure']['max'])
    </variable>
    <variable name="minpressure_p0p1cv_gpp2_bc" language="python">
import fluidity_tools
minpressure_p0p1cv_gpp2_bc = min(fluidity_tools.stat_parser("mmat-balancepressure-p0p1cv-gpp2-bc.stat")['Water']['Pressure']['min'])
    </variable>
    <variable name="geopressure_p0p1cv_gpp2_bc" language="python">
import fluidity_tools
geopressure_p0p1cv_gpp2_bc = max(fluidity_tools.stat_parser("mmat-balancepressure-p0p1cv-gpp2-bc.stat")['Water']['GeostrophicPressure']['max'])
    </variable>
    <variable name="mingeopressure_p0p1cv_gpp2_bc" language="python">
import fluidity_tools
mingeopressure_p0p1cv_gpp2_bc = min(fluidity_tools.stat_parser("mmat-balancepressure-p0p1cv-gpp2-bc.stat")['Water']['GeostrophicPressure']['min'])
    </variable>
    <variable name="velocityx_p0p1cv_gpp2_bc" language="python">
import fluidity_tools
velocityx_p0p1cv_gpp2_bc = max(fluidity_tools.stat_parser("mmat-balancepressure-p0p1cv-gpp2-bc.stat")['Water']['Velocity%1']['max'])
    </variable>
    <variable name="velocityy_p0p1cv_gpp2_bc" language="python">
import fluidity_tools
velocityy_p0p1cv_gpp2_bc = max(fluidity_tools.stat_parser("mmat-balancepressure-p0p1cv-gpp2-bc.stat")['Water']['Velocity%2']['max'])
    </variable>
    <variable name="velocity_p0p1cv_gpp2_bc" language="python">
import fluidity_tools
velocity_p0p1cv_gpp2_bc = max(fluidity_tools.stat_parser("mmat-balancepressure-p0p1cv-gpp2-bc.stat")['Water']['Velocity%magnitude']['max'])
    </variable>
    <variable name="volfrac0_p0p1cv_gpp2_bc" language="python">
import fluidity_tools
volfrac0_p0p1cv_gpp2_bc = fluidity_tools.stat_parser("mmat-balancepressure-p0p1cv-gpp2-bc.stat")['Water']['MaterialVolumeFraction']['integral'][0]
    </variable>
    <variable name="volfracend_p0p1cv_gpp2_bc" language="python">
import fluidity_tools
volfracend_p0p1cv_gpp2_bc = fluidity_tools.stat_parser("mmat-balancepressure-p0p1cv-gpp2-bc.stat")['Water']['MaterialVolumeFraction']['integral'][-1]
    </variable>
    <variable name="maxdivergence_p0p1cv_gpp2_bc" language="python">
import fluidity_tools
maxdivergence_p0p1cv_gpp2_bc = max(fluidity_tools.stat_parser("mmat-balancepressure-p0p1cv-gpp2-bc.stat")['Water']['ControlVolumeDivergence']['max'])
    </variable>
    <variable name="mindivergence_p0p1cv_gpp2_bc" language="python">
import fluidity_tools
mindivergence_p0p1cv_gpp2_bc = min(fluidity_tools.stat_parser("mmat-balancepressure-p0p1cv-gpp2-bc.stat")['Water']['ControlVolumeDivergence']['min'])
    </variable>
    <variable name="pressure_p0p1cv_hpp2dg" language="python">
import fluidity_tools
pressure_p0p1cv_hpp2dg = max(fluidity_tools.stat_parser("mmat-balancepressure-p0p1cv-hpp2dg.stat")['Water']['Pressure']['max'])
    </variable>    
    <variable name="minpressure_p0p1cv_hpp2dg" language="python">
import fluidity_tools
minpressure_p0p1cv_hpp2dg = min(fluidity_tools.stat_parser("mmat-balancepressure-p0p1cv-hpp2dg.stat")['Water']['Pressure']['min'])
    </variable>    
    <variable name="geopressure_p0p1cv_hpp2dg" language="python">
import fluidity_tools
geopressure_p0p1cv_hpp2dg = max(fluidity_tools.stat_parser("mmat-balancepressure-p0p1cv-hpp2dg.stat")['Water']['HydrostaticPressure']['max'])
    </variable>    
    <variable name="mingeopressure_p0p1cv_hpp2dg" language="python">
import fluidity_tools
mingeopressure_p0p1cv_hpp2dg = min(fluidity_tools.stat_parser("mmat-balancepressure-p0p1cv-hpp2dg.stat")['Water']['HydrostaticPressure']['min'])
    </variable>    
    <variable name="velocityx_p0p1cv_hpp2dg" language="python">
import fluidity_tools
velocityx_p0p1cv_hpp2dg = max(fluidity_tools.stat_parser("mmat-balancepressure-p0p1cv-hpp2dg.stat")['Water']['Velocity%1']['max'])
    </variable>    
    <variable name="velocityy_p0p1cv_hpp2dg" language="python">
import fluidity_tools
velocityy_p0p1cv_hpp2dg = max(fluidity_tools.stat_parser("mmat-balancepressure-p0p1cv-hpp2dg.stat")['Water']['Velocity%2']['max'])
    </variable>    
    <variable name="velocity_p0p1cv_hpp2dg" language="python">
import fluidity_tools
velocity_p0p1cv_hpp2dg = max(fluidity_tools.stat_parser("mmat-balancepressure-p0p1cv-hpp2dg.stat")['Water']['Velocity%magnitude']['max'])
    </variable>    
    <variable name="volfrac0_p0p1cv_hpp2dg" language="python">
import fluidity_tools
volfrac0_p0p1cv_hpp2dg = fluidity_tools.stat_parser("mmat-balancepressure-p0p1cv-hpp2dg.stat")['Water']['MaterialVolumeFraction']['integral'][0]
    </variable>    
    <variable name="volfracend_p0p1cv_hpp2dg" language="python">
import fluidity_tools
volfracend_p0p1cv_hpp2dg = fluidity_tools.stat_parser("mmat-balancepressure-p0p1cv-hpp2dg.stat")['Water']['MaterialVolumeFraction']['integral'][-1]
    </variable>    
    <variable name="maxdivergence_p0p1cv_hpp2dg" language="python">
import fluidity_tools
maxdivergence_p0p1cv_hpp2dg = max(fluidity_tools.stat_parser("mmat-balancepressure-p0p1cv-hpp2dg.stat")['Water']['ControlVolumeDivergence']['max'])
    </variable>    
    <variable name="mindivergence_p0p1cv_hpp2dg" language="python">
import fluidity_tools
mindivergence_p0p1cv_hpp2dg = min(fluidity_tools.stat_parser("mmat-balancepressure-p0p1cv-hpp2dg.stat")['Water']['ControlVolumeDivergence']['min'])
    </variable>    
    <variable name="pressure_p0p1cv_hpp2" language="python">
import fluidity_tools
pressure_p0p1cv_hpp2 = max(fluidity_tools.stat_parser("mmat-balancepressure-p0p1cv-hpp2.stat")['Water']['Pressure']['max'])
    </variable>    
    <variable name="minpressure_p0p1cv_hpp2" language="python">
import fluidity_tools
minpressure_p0p1cv_hpp2 = min(fluidity_tools.stat_parser("mmat-balancepressure-p0p1cv-hpp2.stat")['Water']['Pressure']['min'])
    </variable>    
    <variable name="geopressure_p0p1cv_hpp2" language="python">
import fluidity_tools
geopressure_p0p1cv_hpp2 = max(fluidity_tools.stat_parser("mmat-balancepressure-p0p1cv-hpp2.stat")['Water']['HydrostaticPressure']['max'])
    </variable>    
    <variable name="mingeopressure_p0p1cv_hpp2" language="python">
import fluidity_tools
mingeopressure_p0p1cv_hpp2 = min(fluidity_tools.stat_parser("mmat-balancepressure-p0p1cv-hpp2.stat")['Water']['HydrostaticPressure']['min'])
    </variable>    
    <variable name="velocityx_p0p1cv_hpp2" language="python">
import fluidity_tools
velocityx_p0p1cv_hpp2 = max(fluidity_tools.stat_parser("mmat-balancepressure-p0p1cv-hpp2.stat")['Water']['Velocity%1']['max'])
    </variable>    
    <variable name="velocityy_p0p1cv_hpp2" language="python">
import fluidity_tools
velocityy_p0p1cv_hpp2 = max(fluidity_tools.stat_parser("mmat-balancepressure-p0p1cv-hpp2.stat")['Water']['Velocity%2']['max'])
    </variable>    
    <variable name="velocity_p0p1cv_hpp2" language="python">
import fluidity_tools
velocity_p0p1cv_hpp2 = max(fluidity_tools.stat_parser("mmat-balancepressure-p0p1cv-hpp2.stat")['Water']['Velocity%magnitude']['max'])
    </variable>    
    <variable name="volfrac0_p0p1cv_hpp2" language="python">
import fluidity_tools
volfrac0_p0p1cv_hpp2 = fluidity_tools.stat_parser("mmat-balancepressure-p0p1cv-hpp2.stat")['Water']['MaterialVolumeFraction']['integral'][0]
    </variable>    
    <variable name="volfracend_p0p1cv_hpp2" language="python">
import fluidity_tools
volfracend_p0p1cv_hpp2 = fluidity_tools.stat_parser("mmat-balancepressure-p0p1cv-hpp2.stat")['Water']['MaterialVolumeFraction']['integral'][-1]
    </variable>    
    <variable name="maxdivergence_p0p1cv_hpp2" language="python">
import fluidity_tools
maxdivergence_p0p1cv_hpp2 = max(fluidity_tools.stat_parser("mmat-balancepressure-p0p1cv-hpp2.stat")['Water']['ControlVolumeDivergence']['max'])
    </variable>    
    <variable name="mindivergence_p0p1cv_hpp2" language="python">
import fluidity_tools
mindivergence_p0p1cv_hpp2 = min(fluidity_tools.stat_parser("mmat-balancepressure-p0p1cv-hpp2.stat")['Water']['ControlVolumeDivergence']['min'])
    </variable>   
    <variable name="pressure_p0p1_rhop0_vfracp0" language="python">
import fluidity_tools
pressure_p0p1_rhop0_vfracp0 = max(fluidity_tools.stat_parser("mmat-balancepressure-p0p1-rhop0-vfracp0.stat")['Water']['Pressure']['max'])
    </variable>    
    <variable name="minpressure_p0p1_rhop0_vfracp0" language="python">
import fluidity_tools
minpressure_p0p1_rhop0_vfracp0 = min(fluidity_tools.stat_parser("mmat-balancepressure-p0p1-rhop0-vfracp0.stat")['Water']['Pressure']['min'])
    </variable>    
    <variable name="velocityx_p0p1_rhop0_vfracp0" language="python">
import fluidity_tools
velocityx_p0p1_rhop0_vfracp0 = max(fluidity_tools.stat_parser("mmat-balancepressure-p0p1-rhop0-vfracp0.stat")['Water']['Velocity%1']['max'])
    </variable>    
    <variable name="velocityy_p0p1_rhop0_vfracp0" language="python">
import fluidity_tools
velocityy_p0p1_rhop0_vfracp0 = max(fluidity_tools.stat_parser("mmat-balancepressure-p0p1-rhop0-vfracp0.stat")['Water']['Velocity%2']['max'])
    </variable>    
    <variable name="velocity_p0p1_rhop0_vfracp0" language="python">
import fluidity_tools
velocity_p0p1_rhop0_vfracp0 = max(fluidity_tools.stat_parser("mmat-balancepressure-p0p1-rhop0-vfracp0.stat")['Water']['Velocity%magnitude']['max'])
    </variable>    
    <variable name="volfrac0_p0p1_rhop0_vfracp0" language="python">
import fluidity_tools
volfrac0_p0p1_rhop0_vfracp0 = fluidity_tools.stat_parser("mmat-balancepressure-p0p1-rhop0-vfracp0.stat")['Water']['MaterialVolumeFraction']['integral'][0]
    </variable>    
    <variable name="volfracend_p0p1_rhop0_vfracp0" language="python">
import fluidity_tools
volfracend_p0p1_rhop0_vfracp0 = fluidity_tools.stat_parser("mmat-balancepressure-p0p1-rhop0-vfracp0.stat")['Water']['MaterialVolumeFraction']['integral'][-1]
    </variable>    
    <variable name="maxdivergence_p0p1_rhop0_vfracp0" language="python">
import fluidity_tools
maxdivergence_p0p1_rhop0_vfracp0 = max(fluidity_tools.stat_parser("mmat-balancepressure-p0p1-rhop0-vfracp0.stat")['Water']['ControlVolumeDivergence']['max'])
    </variable>    
    <variable name="mindivergence_p0p1_rhop0_vfracp0" language="python">
import fluidity_tools
mindivergence_p0p1_rhop0_vfracp0 = min(fluidity_tools.stat_parser("mmat-balancepressure-p0p1-rhop0-vfracp0.stat")['Water']['ControlVolumeDivergence']['min'])
    </variable>
    <variable name="pressure_p1dgp2_rhop1dg_vfracp1cv" language="python">
import fluidity_tools
pressure_p1dgp2_rhop1dg_vfracp1cv = max(fluidity_tools.stat_parser("mmat-balancepressure-p1dgp2-rhop1dg-vfracp1cv.stat")['Water']['Pressure']['max'])
    </variable>    
    <variable name="minpressure_p1dgp2_rhop1dg_vfracp1cv" language="python">
import fluidity_tools
minpressure_p1dgp2_rhop1dg_vfracp1cv = min(fluidity_tools.stat_parser("mmat-balancepressure-p1dgp2-rhop1dg-vfracp1cv.stat")['Water']['Pressure']['min'])
    </variable>    
    <variable name="velocityx_p1dgp2_rhop1dg_vfracp1cv" language="python">
import fluidity_tools
velocityx_p1dgp2_rhop1dg_vfracp1cv = max(fluidity_tools.stat_parser("mmat-balancepressure-p1dgp2-rhop1dg-vfracp1cv.stat")['Water']['Velocity%1']['max'])
    </variable>    
    <variable name="velocityy_p1dgp2_rhop1dg_vfracp1cv" language="python">
import fluidity_tools
velocityy_p1dgp2_rhop1dg_vfracp1cv = max(fluidity_tools.stat_parser("mmat-balancepressure-p1dgp2-rhop1dg-vfracp1cv.stat")['Water']['Velocity%2']['max'])
    </variable>    
    <variable name="velocity_p1dgp2_rhop1dg_vfracp1cv" language="python">
import fluidity_tools
velocity_p1dgp2_rhop1dg_vfracp1cv = max(fluidity_tools.stat_parser("mmat-balancepressure-p1dgp2-rhop1dg-vfracp1cv.stat")['Water']['Velocity%magnitude']['max'])
    </variable>    
    <variable name="volfrac0_p1dgp2_rhop1dg_vfracp1cv" language="python">
import fluidity_tools
volfrac0_p1dgp2_rhop1dg_vfracp1cv = fluidity_tools.stat_parser("mmat-balancepressure-p1dgp2-rhop1dg-vfracp1cv.stat")['Water']['MaterialVolumeFraction']['integral'][0]
    </variable>    
    <variable name="volfracend_p1dgp2_rhop1dg_vfracp1cv" language="python">
import fluidity_tools
volfracend_p1dgp2_rhop1dg_vfracp1cv = fluidity_tools.stat_parser("mmat-balancepressure-p1dgp2-rhop1dg-vfracp1cv.stat")['Water']['MaterialVolumeFraction']['integral'][-1]
    </variable>    
    <variable name="maxdivergence_p1dgp2_rhop1dg_vfracp1cv" language="python">
import fluidity_tools
maxdivergence_p1dgp2_rhop1dg_vfracp1cv = max(fluidity_tools.stat_parser("mmat-balancepressure-p1dgp2-rhop1dg-vfracp1cv.stat")['Water']['ControlVolumeDivergence']['max'])
    </variable>    
    <variable name="mindivergence_p1dgp2_rhop1dg_vfracp1cv" language="python">
import fluidity_tools
mindivergence_p1dgp2_rhop1dg_vfracp1cv = min(fluidity_tools.stat_parser("mmat-balancepressure-p1dgp2-rhop1dg-vfracp1cv.stat")['Water']['ControlVolumeDivergence']['min'])
    </variable>    
    <variable name="pressure_p0p1cv_vbpp2" language="python">
import fluidity_tools
pressure_p0p1cv_vbpp2 = max(fluidity_tools.stat_parser("mmat-balancepressure-p0p1cv-vbpp2.stat")['Water']['Pressure']['max'])
    </variable>
    <variable name="minpressure_p0p1cv_vbpp2" language="python">
import fluidity_tools
minpressure_p0p1cv_vbpp2 = min(fluidity_tools.stat_parser("mmat-balancepressure-p0p1cv-vbpp2.stat")['Water']['Pressure']['min'])
    </variable>
    <variable name="geopressure_p0p1cv_vbpp2" language="python">
import fluidity_tools
geopressure_p0p1cv_vbpp2 = max(fluidity_tools.stat_parser("mmat-balancepressure-p0p1cv-vbpp2.stat")['Water']['VerticalBalancePressure']['max'])
    </variable>
    <variable name="mingeopressure_p0p1cv_vbpp2" language="python">
import fluidity_tools
mingeopressure_p0p1cv_vbpp2 = min(fluidity_tools.stat_parser("mmat-balancepressure-p0p1cv-vbpp2.stat")['Water']['VerticalBalancePressure']['min'])
    </variable>
    <variable name="velocityx_p0p1cv_vbpp2" language="python">
import fluidity_tools
velocityx_p0p1cv_vbpp2 = max(fluidity_tools.stat_parser("mmat-balancepressure-p0p1cv-vbpp2.stat")['Water']['Velocity%1']['max'])
    </variable>
    <variable name="velocityy_p0p1cv_vbpp2" language="python">
import fluidity_tools
velocityy_p0p1cv_vbpp2 = max(fluidity_tools.stat_parser("mmat-balancepressure-p0p1cv-vbpp2.stat")['Water']['Velocity%2']['max'])
    </variable>
    <variable name="velocity_p0p1cv_vbpp2" language="python">
import fluidity_tools
velocity_p0p1cv_vbpp2 = max(fluidity_tools.stat_parser("mmat-balancepressure-p0p1cv-vbpp2.stat")['Water']['Velocity%magnitude']['max'])
    </variable>
    <variable name="volfrac0_p0p1cv_vbpp2" language="python">
import fluidity_tools
volfrac0_p0p1cv_vbpp2 = fluidity_tools.stat_parser("mmat-balancepressure-p0p1cv-vbpp2.stat")['Water']['MaterialVolumeFraction']['integral'][0]
    </variable>
    <variable name="volfracend_p0p1cv_vbpp2" language="python">
import fluidity_tools
volfracend_p0p1cv_vbpp2 = fluidity_tools.stat_parser("mmat-balancepressure-p0p1cv-vbpp2.stat")['Water']['MaterialVolumeFraction']['integral'][-1]
    </variable>
    <variable name="maxdivergence_p0p1cv_vbpp2" language="python">
import fluidity_tools
maxdivergence_p0p1cv_vbpp2 = max(fluidity_tools.stat_parser("mmat-balancepressure-p0p1cv-vbpp2.stat")['Water']['ControlVolumeDivergence']['max'])
    </variable>
    <variable name="mindivergence_p0p1cv_vbpp2" language="python">
import fluidity_tools
mindivergence_p0p1cv_vbpp2 = min(fluidity_tools.stat_parser("mmat-balancepressure-p0p1cv-vbpp2.stat")['Water']['ControlVolumeDivergence']['min'])
    </variable>
    <variable name="solvers_converged" language="python">
import os
files = os.listdir("./")
solvers_converged = not "matrixdump" in files and not "matrixdump.info" in files
    </variable>
   </variables>
    <pass_tests>  
    <test name="check maximum pressure_p0p1cv_gpp2 is 0.0" language="python">
   assert abs(pressure_p0p1cv_gpp2) &lt; 1e-6
    </test>    
    <test name="check minimum pressure_p0p1cv_gpp2 0.0" language="python">
   assert abs(minpressure_p0p1cv_gpp2) &lt; 1e-6
    </test>    
    <test name="check minimum geopressure_p0p1cv_gpp2" language="python">
   assert abs(mingeopressure_p0p1cv_gpp2+2212) &lt; 10
    </test>    
    <test name="check maximum geopressure_p0p1cv_gpp2" language="python">
   assert abs(geopressure_p0p1cv_gpp2) &lt; 1e-6
    </test>    
    <test name="check maximum xspeed_p0p1cv_gpp2 is zero" language="python">
   assert abs(velocityx_p0p1cv_gpp2) &lt; 1e-6
    </test>
    <test name="check maximum yspeed_p0p1cv_gpp2 is zero" language="python">
   assert abs(velocityy_p0p1cv_gpp2) &lt; 1e-6
    </test>
    <test name="check maximum speed_p0p1cv_gpp2 is zero" language="python">
   assert abs(velocity_p0p1cv_gpp2) &lt; 1e-6
    </test>
    <test name="check volume fraction_p0p1cv_gpp2 conserved" language="python">
print('mass loss = ', abs(volfracend_p0p1cv_gpp2-volfrac0_p0p1cv_gpp2))
assert abs(volfracend_p0p1cv_gpp2-volfrac0_p0p1cv_gpp2) &lt; 1e-9
</test>
    <test name="check divergence_p0p1cv_gpp2" language="python">
   assert max(abs(maxdivergence_p0p1cv_gpp2), abs(mindivergence_p0p1cv_gpp2)) &lt; 1e-9
    </test>
    <test name="check maximum pressure_p0p1cv_gpp2_bc is 0.0" language="python">
   assert abs(pressure_p0p1cv_gpp2_bc) &lt; 1e-6
    </test>
    <test name="check minimum pressure_p0p1cv_gpp2_bc 0.0" language="python">
   assert abs(minpressure_p0p1cv_gpp2_bc) &lt; 1e-6
    </test>
    <test name="check minimum geopressure_p0p1cv_gpp2_bc" language="python">
   assert abs(mingeopressure_p0p1cv_gpp2_bc) &lt; 1.e-8
    </test>
    <test name="check maximum geopressure_p0p1cv_gpp2_bc" language="python">
   assert abs(geopressure_p0p1cv_gpp2_bc - 2212.6) &lt; 10
    </test>
    <test name="check maximum xspeed_p0p1cv_gpp2_bc is zero" language="python">
   assert abs(velocityx_p0p1cv_gpp2_bc) &lt; 1e-6
    </test>
    <test name="check maximum yspeed_p0p1cv_gpp2_bc is zero" language="python">
   assert abs(velocityy_p0p1cv_gpp2_bc) &lt; 1e-6
    </test>
    <test name="check maximum speed_p0p1cv_gpp2_bc is zero" language="python">
   assert abs(velocity_p0p1cv_gpp2_bc) &lt; 1e-6
    </test>
    <test name="check volume fraction_p0p1cv_gpp2_bc conserved" language="python">
print('mass loss = ', abs(volfracend_p0p1cv_gpp2_bc-volfrac0_p0p1cv_gpp2_bc))
assert abs(volfracend_p0p1cv_gpp2_bc-volfrac0_p0p1cv_gpp2_bc) &lt; 1e-9
</test>
    <test name="check divergence_p0p1cv_gpp2_bc" language="python">
   assert max(abs(maxdivergence_p0p1cv_gpp2_bc), abs(mindivergence_p0p1cv_gpp2_bc)) &lt; 1e-9
    </test>
    <test name="check maximum pressure_p0p1cv_hpp2dg is 0.0" language="python">
   assert abs(pressure_p0p1cv_hpp2dg) &lt; 1e-6
    </test>    
    <test name="check minimum pressure_p0p1cv_hpp2dg 0.0" language="python">
   assert abs(minpressure_p0p1cv_hpp2dg) &lt; 1e-6
    </test>    
    <test name="check minimum geopressure_p0p1cv_hpp2dg" language="python">
   assert abs(mingeopressure_p0p1cv_hpp2dg) &lt; 1e-6
    </test>    
    <test name="check maximum geopressure_p0p1cv_hpp2dg" language="python">
   assert abs(geopressure_p0p1cv_hpp2dg-2212.595) &lt; 1
    </test>    
    <test name="check maximum xspeed_p0p1cv_hpp2dg is zero" language="python">
   assert abs(velocityx_p0p1cv_hpp2dg) &lt; 1e-9
    </test>
    <test name="check maximum yspeed_p0p1cv_hpp2dg is zero" language="python">
   assert abs(velocityy_p0p1cv_hpp2dg) &lt; 1e-9
    </test>
    <test name="check maximum speed_p0p1cv_hpp2dg is zero" language="python">
   assert abs(velocity_p0p1cv_hpp2dg) &lt; 1e-9
    </test>
    <test name="check volume fraction_p0p1cv_hpp2dg conserved" language="python">
print('mass loss = ', abs(volfracend_p0p1cv_hpp2dg-volfrac0_p0p1cv_hpp2dg))
assert abs(volfracend_p0p1cv_hpp2dg-volfrac0_p0p1cv_hpp2dg) &lt; 1e-9
</test>
    <test name="check divergence_p0p1cv_hpp2dg" language="python">
   assert max(abs(maxdivergence_p0p1cv_hpp2dg), abs(mindivergence_p0p1cv_hpp2dg)) &lt; 1e-9
    </test>
    <test name="check maximum pressure_p0p1cv_hpp2 is 0.0" language="python">
   assert abs(pressure_p0p1cv_hpp2) &lt; 1e-5
    </test>    
    <test name="check minimum pressure_p0p1cv_hpp2 0.0" language="python">
   assert abs(minpressure_p0p1cv_hpp2) &lt; 1e-5
    </test>    
    <test name="check minimum geopressure_p0p1cv_hpp2" language="python">
   assert abs(mingeopressure_p0p1cv_hpp2) &lt; 1e-6
    </test>    
    <test name="check maximum geopressure_p0p1cv_hpp2" language="python">
   assert abs(geopressure_p0p1cv_hpp2-2212.6) &lt; 1
    </test>    
    <test name="check maximum xspeed_p0p1cv_hpp2 is zero" language="python">
   assert abs(velocityx_p0p1cv_hpp2) &lt; 1e-9
    </test>
    <test name="check maximum yspeed_p0p1cv_hpp2 is zero" language="python">
   assert abs(velocityy_p0p1cv_hpp2) &lt; 1e-9
    </test>
    <test name="check maximum speed_p0p1cv_hpp2 is zero" language="python">
   assert abs(velocity_p0p1cv_hpp2) &lt; 1e-9
    </test>
    <test name="check volume fraction_p0p1cv_hpp2 conserved" language="python">
print('mass loss = ', abs(volfracend_p0p1cv_hpp2-volfrac0_p0p1cv_hpp2))
assert abs(volfracend_p0p1cv_hpp2-volfrac0_p0p1cv_hpp2) &lt; 1e-9
</test>
    <test name="check divergence_p0p1cv_hpp2" language="python">
   assert max(abs(maxdivergence_p0p1cv_hpp2), abs(mindivergence_p0p1cv_hpp2)) &lt; 1e-9
    </test>
    <test name="check maximum pressure_p0p1_rhop0_vfracp0 is 2457.35" language="python">
   assert abs(pressure_p0p1_rhop0_vfracp0-2457.35) &lt; 1
    </test>    
    <test name="check minimum pressure_p0p1_rhop0_vfracp0 0.0" language="python">
   assert abs(minpressure_p0p1_rhop0_vfracp0) &lt; 1e-6
    </test>    
    <test name="check maximum xspeed_p0p1_rhop0_vfracp0 is low" language="python">
   assert abs(velocityx_p0p1_rhop0_vfracp0) &lt; 1e-3
    </test>
    <test name="check maximum yspeed_p0p1_rhop0_vfracp0 is low" language="python">
   assert abs(velocityy_p0p1_rhop0_vfracp0) &lt; 1e-3
    </test>
    <test name="check maximum speed_p0p1_rhop0_vfracp0 is low" language="python">
   assert abs(velocity_p0p1_rhop0_vfracp0) &lt; 1e-3
    </test>
    <test name="check volume fraction_p0p1_rhop0_vfracp0 almost conserved" language="python">
print('mass loss = ', abs(volfracend_p0p1_rhop0_vfracp0-volfrac0_p0p1_rhop0_vfracp0))
assert abs(volfracend_p0p1_rhop0_vfracp0-volfrac0_p0p1_rhop0_vfracp0) &lt; 1e-5
</test>
    <test name="check divergence_p0p1_rhop0_vfracp0" language="python">
   assert max(abs(maxdivergence_p0p1_rhop0_vfracp0), abs(mindivergence_p0p1_rhop0_vfracp0)) &lt; 1e-9
    </test>
    <test name="check maximum pressure_p1dgp2_rhop1dg_vfracp1cv is 2212.595" language="python">
   assert abs(pressure_p1dgp2_rhop1dg_vfracp1cv-2212.595) &lt; 1
    </test>    
    <test name="check minimum pressure_p1dgp2_rhop1dg_vfracp1cv 0.0" language="python">
   assert abs(minpressure_p1dgp2_rhop1dg_vfracp1cv) &lt; 1e-6
    </test>    
    <test name="check maximum xspeed_p1dgp2_rhop1dg_vfracp1cv is low" language="python">
   assert abs(velocityx_p1dgp2_rhop1dg_vfracp1cv) &lt; 1e-3
    </test>
    <test name="check maximum yspeed_p1dgp2_rhop1dg_vfracp1cv is low" language="python">
   assert abs(velocityy_p1dgp2_rhop1dg_vfracp1cv) &lt; 1e-3
    </test>
    <test name="check maximum speed_p1dgp2_rhop1dg_vfracp1cv is low" language="python">
   assert abs(velocity_p1dgp2_rhop1dg_vfracp1cv) &lt; 1e-3
    </test>
    <test name="check volume fraction_p1dgp2_rhop1dg_vfracp1cv almost conserved" language="python">
print('mass loss = ', abs(volfracend_p1dgp2_rhop1dg_vfracp1cv-volfrac0_p1dgp2_rhop1dg_vfracp1cv))
assert abs(volfracend_p1dgp2_rhop1dg_vfracp1cv-volfrac0_p1dgp2_rhop1dg_vfracp1cv) &lt; 1e-5
</test>
    <test name="check divergence_p1dgp2_rhop1dg_vfracp1cv" language="python">
   assert max(abs(maxdivergence_p1dgp2_rhop1dg_vfracp1cv), abs(mindivergence_p1dgp2_rhop1dg_vfracp1cv)) &lt; 1e-9
    </test>
    <test name="check maximum pressure_p0p1cv_vbpp2 is 0.0" language="python">
   assert abs(pressure_p0p1cv_vbpp2) &lt; 1e-6
    </test>
    <test name="check minimum pressure_p0p1cv_vbpp2 0.0" language="python">
   assert abs(minpressure_p0p1cv_vbpp2) &lt; 1e-6
    </test>
    <test name="check minimum geopressure_p0p1cv_vbpp2" language="python">
   assert abs(mingeopressure_p0p1cv_vbpp2) &lt; 1e-9
    </test>
    <test name="check maximum geopressure_p0p1cv_vbpp2" language="python">
   assert abs(geopressure_p0p1cv_vbpp2 - 2212.5) &lt; 10
    </test>
    <test name="check maximum xspeed_p0p1cv_vbpp2 is zero" language="python">
   assert abs(velocityx_p0p1cv_vbpp2) &lt; 1e-8
    </test>
    <test name="check maximum yspeed_p0p1cv_vbpp2 is zero" language="python">
   assert abs(velocityy_p0p1cv_vbpp2) &lt; 1e-8
    </test>
    <test name="check maximum speed_p0p1cv_vbpp2 is zero" language="python">
   assert abs(velocity_p0p1cv_vbpp2) &lt; 1e-8
    </test>
    <test name="check volume fraction_p0p1cv_vbpp2 conserved" language="python">
print('mass loss = ', abs(volfracend_p0p1cv_vbpp2-volfrac0_p0p1cv_vbpp2))
assert abs(volfracend_p0p1cv_vbpp2-volfrac0_p0p1cv_vbpp2) &lt; 1e-9
</test>
    <test name="check divergence_p0p1cv_vbpp2" language="python">
   assert max(abs(maxdivergence_p0p1cv_vbpp2), abs(mindivergence_p0p1cv_vbpp2)) &lt; 1e-9
    </test>
    <test name="Solvers converged" language="python">
assert(solvers_converged)
    </test>
  </pass_tests>
  <warn_tests>
  </warn_tests>
</testproblem>
