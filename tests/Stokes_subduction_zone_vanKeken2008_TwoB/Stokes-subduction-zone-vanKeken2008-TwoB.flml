<?xml version='1.0' encoding='utf-8'?>
<fluidity_options>
  <simulation_name>
    <string_value lines="1">vanKekenTwoB</string_value>
  </simulation_name>
  <problem_type>
    <string_value lines="1">stokes</string_value>
  </problem_type>
  <geometry>
    <dimension>
      <integer_value rank="0">2</integer_value>
    </dimension>
    <mesh name="CoordinateMesh">
      <from_file file_name="Subduction_Mesh">
        <format name="gmsh"/>
        <stat>
          <include_in_stat/>
        </stat>
      </from_file>
    </mesh>
    <mesh name="VelocityMesh">
      <from_mesh>
        <mesh name="CoordinateMesh"/>
        <mesh_shape>
          <polynomial_degree>
            <integer_value rank="0">2</integer_value>
          </polynomial_degree>
        </mesh_shape>
        <stat>
          <exclude_from_stat/>
        </stat>
      </from_mesh>
    </mesh>
    <mesh name="P0_Mesh">
      <from_mesh>
        <mesh name="CoordinateMesh"/>
        <mesh_shape>
          <polynomial_degree>
            <integer_value rank="0">0</integer_value>
          </polynomial_degree>
        </mesh_shape>
        <mesh_continuity>
          <string_value>discontinuous</string_value>
        </mesh_continuity>
        <stat>
          <exclude_from_stat/>
        </stat>
      </from_mesh>
    </mesh>
    <quadrature>
      <degree>
        <integer_value rank="0">5</integer_value>
      </degree>
    </quadrature>
  </geometry>
  <io>
    <dump_format>
      <string_value>vtk</string_value>
    </dump_format>
    <dump_period>
      <constant>
        <real_value rank="0">2e12</real_value>
      </constant>
    </dump_period>
    <output_mesh name="CoordinateMesh"/>
    <stat>
      <output_at_start/>
    </stat>
    <detectors>
      <static_detector name="Temperature6060">
        <location>
          <real_value shape="2" dim1="dim" rank="1">60000. -60000.</real_value>
        </location>
      </static_detector>
      <detector_array name="TSlab">
        <number_of_detectors>
          <integer_value rank="0">36</integer_value>
        </number_of_detectors>
        <static/>
        <python>
          <string_value lines="20" type="code" language="python">def val(t):
  import numpy
  start = numpy.array([0, 0])
  end = numpy.array([210000, -210000])
  output = []
  for i in range(36):
    output.append(start + (float(i)/35) * end)
  return output</string_value>
        </python>
      </detector_array>
      <detector_array name="TWedge">
        <number_of_detectors>
          <integer_value rank="0">78</integer_value>
        </number_of_detectors>
        <static/>
        <python>
          <string_value lines="20" type="code" language="python">def val(t):
  output1 = []
  for i in range(12):
    for j in range(12):
        if i &gt;= j:
           output1.append([54000 + (float(i)/20) * 120000, -54000 + (float(j)/20) * (-120000)])
  return output1</string_value>
        </python>
      </detector_array>
      <fail_outside_domain/>
    </detectors>
  </io>
  <timestepping>
    <current_time>
      <real_value rank="0">0.0</real_value>
    </current_time>
    <timestep>
      <real_value rank="0">1e11</real_value>
    </timestep>
    <finish_time>
      <real_value rank="0">1.0e15</real_value>
    </finish_time>
    <adaptive_timestep>
      <requested_cfl>
        <real_value rank="0">3.0</real_value>
      </requested_cfl>
      <courant_number name="CFLNumber">
        <mesh name="CoordinateMesh"/>
      </courant_number>
      <increase_tolerance>
        <real_value rank="0">5</real_value>
      </increase_tolerance>
    </adaptive_timestep>
    <steady_state>
      <tolerance>
        <real_value rank="0">7.5e-2</real_value>
        <infinity_norm/>
      </tolerance>
    </steady_state>
  </timestepping>
  <material_phase name="Fluid">
    <scalar_field name="Pressure" rank="0">
      <prognostic>
        <mesh name="CoordinateMesh"/>
        <spatial_discretisation>
          <continuous_galerkin>
            <remove_stabilisation_term/>
          </continuous_galerkin>
        </spatial_discretisation>
        <scheme>
          <poisson_pressure_solution>
            <string_value lines="1">never</string_value>
          </poisson_pressure_solution>
          <use_projection_method>
            <full_schur_complement>
              <inner_matrix name="FullMomentumMatrix">
                <solver>
                  <iterative_method name="preonly"/>
                  <preconditioner name="lu">
                    <factorization_package name="mumps"/>
                  </preconditioner>
                  <relative_error>
                    <real_value rank="0">1.0e-6</real_value>
                  </relative_error>
                  <max_iterations>
                    <integer_value rank="0">10000</integer_value>
                  </max_iterations>
                  <start_from_zero/>
                  <never_ignore_solver_failures/>
                  <diagnostics>
                    <monitors/>
                  </diagnostics>
                </solver>
              </inner_matrix>
              <preconditioner_matrix name="ScaledPressureMassMatrix"/>
            </full_schur_complement>
          </use_projection_method>
        </scheme>
        <solver>
          <iterative_method name="fgmres"/>
          <preconditioner name="ksp">
            <solver>
              <iterative_method name="cg"/>
              <preconditioner name="sor"/>
              <relative_error>
                <real_value rank="0">1.0e-7</real_value>
              </relative_error>
              <max_iterations>
                <integer_value rank="0">1000</integer_value>
              </max_iterations>
              <never_ignore_solver_failures/>
              <diagnostics>
                <monitors/>
              </diagnostics>
            </solver>
          </preconditioner>
          <relative_error>
            <real_value rank="0">1.0e-4</real_value>
          </relative_error>
          <max_iterations>
            <integer_value rank="0">10000</integer_value>
          </max_iterations>
          <never_ignore_solver_failures/>
          <diagnostics>
            <monitors/>
          </diagnostics>
        </solver>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
        <steady_state>
          <exclude_from_steady_state/>
        </steady_state>
        <consistent_interpolation/>
      </prognostic>
    </scalar_field>
    <scalar_field name="Density" rank="0">
      <diagnostic>
        <algorithm name="Internal" material_phase_support="multiple"/>
        <mesh name="VelocityMesh"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <vector_field name="Velocity" rank="1">
      <prognostic>
        <mesh name="VelocityMesh"/>
        <equation name="LinearMomentum"/>
        <spatial_discretisation>
          <continuous_galerkin>
            <stabilisation>
              <no_stabilisation/>
            </stabilisation>
            <mass_terms>
              <exclude_mass_terms/>
            </mass_terms>
            <advection_terms>
              <exclude_advection_terms/>
            </advection_terms>
            <stress_terms>
              <partial_stress_form/>
            </stress_terms>
          </continuous_galerkin>
          <conservative_advection>
            <real_value rank="0">1.0</real_value>
          </conservative_advection>
        </spatial_discretisation>
        <temporal_discretisation>
          <theta>
            <real_value rank="0">1.0</real_value>
          </theta>
          <relaxation>
            <real_value rank="0">1.0</real_value>
          </relaxation>
        </temporal_discretisation>
        <solver>
          <iterative_method name="preonly"/>
          <preconditioner name="lu">
            <factorization_package name="mumps"/>
          </preconditioner>
          <relative_error>
            <real_value rank="0">1.0e-6</real_value>
          </relative_error>
          <max_iterations>
            <integer_value rank="0">10000</integer_value>
          </max_iterations>
          <never_ignore_solver_failures/>
          <diagnostics>
            <monitors/>
          </diagnostics>
        </solver>
        <initial_condition name="Batchelor">
          <region_ids>
            <integer_value shape="1" rank="1">27</integer_value>
          </region_ids>
          <python>
          <string_value lines="20" type="code" language="python">def val(X, t):
  from math import sqrt, atan, cos, sin, pi

  Xcoord = X[0]
  Ycoord = X[1]

  Depth = (X[1] * -1.) -50000.
  Xdist  = X[0] -50000.

  if(Xdist == 0.) :
    Xdist = 0.000000000000001

  if Depth == 0 :
    Vx = 0.
    Vy = 0.

  else :
    ALFA = atan(1)
    THETA = atan(Depth/Xdist)

    VTHETA = (((ALFA - THETA) * sin(THETA) * sin(ALFA)) - (ALFA * THETA * sin(ALFA-THETA))) / (ALFA**2 - (sin(ALFA)**2))
    VTHETA = VTHETA * (0.05/(3600.*24.*365.)) *-1.

    VR = (((ALFA - THETA) * cos(THETA) * sin(ALFA)) - (sin(ALFA) * sin(THETA)) - (ALFA * sin(ALFA-THETA)) + (ALFA*THETA*cos(ALFA-THETA))) / ((ALFA**2) - (sin(ALFA))**2)
    VR = VR * (0.05/(3600.*24.*365.))

    Vx = -( VTHETA*sin(THETA) - VR*cos(THETA) )
    Vy = - (VTHETA*cos(THETA) + VR*sin(THETA) )

  return [Vx, Vy]</string_value>
          </python>
        </initial_condition>
        <prescribed_region name="Crust">
          <region_ids>
            <integer_value shape="1" rank="1">24</integer_value>
          </region_ids>
          <constant>
            <real_value shape="2" dim1="dim" rank="1">0. 0.</real_value>
          </constant>
        </prescribed_region>
        <prescribed_region name="Slab">
          <region_ids>
            <integer_value shape="1" rank="1">30</integer_value>
          </region_ids>
          <python>
            <string_value lines="20" type="code" language="python">def val(X, t):
  from math import sqrt
  vx = sqrt(((0.05/(3600.*24.*365.))**2.)/2.)
  vy = -sqrt(((0.05/(3600.*24.*365.))**2.)/2.)
  return [vx,vy]</string_value>
          </python>
        </prescribed_region>
        <boundary_conditions name="Crust">
          <surface_ids>
            <integer_value shape="1" rank="1">32</integer_value>
          </surface_ids>
          <type name="dirichlet">
            <align_bc_with_cartesian>
              <x_component>
                <constant>
                  <real_value rank="0">0.0</real_value>
                </constant>
              </x_component>
              <y_component>
                <constant>
                  <real_value rank="0">0.0</real_value>
                </constant>
              </y_component>
            </align_bc_with_cartesian>
          </type>
        </boundary_conditions>
        <boundary_conditions name="Slab">
          <surface_ids>
            <integer_value shape="1" rank="1">31</integer_value>
          </surface_ids>
          <type name="dirichlet">
            <align_bc_with_cartesian>
              <x_component>
                <python>
                  <string_value lines="20" type="code" language="python">def val(X, t):
        from math import sqrt
        vx = sqrt(((0.05/(3600.*24.*365.))**2.)/2.)
        return vx</string_value>
                </python>
              </x_component>
              <y_component>
                <python>
                  <string_value lines="20" type="code" language="python">def val(X, t):
        from math import sqrt
        vy = -sqrt(((0.05/(3600.*24.*365.))**2.)/2.)
        return vy</string_value>
                </python>
              </y_component>
            </align_bc_with_cartesian>
          </type>
        </boundary_conditions>
        <tensor_field name="Viscosity" rank="2">
          <diagnostic>
            <mesh name="CoordinateMesh"/>
            <algorithm name="tensor_python_diagnostic" material_phase_support="single">
              <string_value lines="20" type="code" language="python">import math
import numpy

T = state.scalar_fields["Temperature"]
S = state.scalar_fields["secondinvariant"]

assert(T.node_count == field.node_count)
assert(S.node_count == field.node_count)

A = 28968.6
EA = 540000.
n = 3.5
R = 8.3145 # Universal Gas Constant
etamax = 1e26 # Maximum viscosity
epsilon = 1e-20 # To ensure you don't get divide by zero errors.

for i in range(field.node_count):
    etadisl = A*(math.exp(EA/(n*R*T.node_val(i))))*max(epsilon,S.node_val(i))**((1.-n)/n)
    effeta = (etadisl*etamax)/(etadisl+etamax)
    visc = numpy.zeros((2,2))
    for i1 in range(2):
        for i2 in range(2):
            visc[i1][i2] = effeta
    field.set(i,visc)</string_value>
              <depends>
                <string_value lines="1">secondinvariant,Temperature,dummy</string_value>
              </depends>
            </algorithm>
            <output/>
            <stat>
              <include_in_stat/>
            </stat>
          </diagnostic>
        </tensor_field>
        <output/>
        <stat>
          <include_in_stat/>
          <surface_integral type="normal" name="Outflow">
            <surface_ids>
              <integer_value shape="2" rank="1">13 16</integer_value>
            </surface_ids>
          </surface_integral>
          <surface_integral type="normal" name="All">
            <surface_ids>
              <integer_value shape="3" rank="1">12 13 16</integer_value>
            </surface_ids>
          </surface_integral>
          <previous_time_step>
            <exclude_from_stat/>
          </previous_time_step>
          <nonlinear_field>
            <exclude_from_stat/>
          </nonlinear_field>
        </stat>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
        <consistent_interpolation/>
      </prognostic>
    </vector_field>
    <scalar_field name="Temperature" rank="0">
      <prognostic>
        <mesh name="CoordinateMesh"/>
        <equation name="AdvectionDiffusion"/>
        <spatial_discretisation>
          <continuous_galerkin>
            <stabilisation>
              <no_stabilisation/>
            </stabilisation>
            <advection_terms/>
            <mass_terms>
              <exclude_mass_terms/>
            </mass_terms>
          </continuous_galerkin>
          <conservative_advection>
            <real_value rank="0">0.0</real_value>
          </conservative_advection>
        </spatial_discretisation>
        <temporal_discretisation>
          <theta>
            <real_value rank="0">1.0</real_value>
          </theta>
        </temporal_discretisation>
        <solver>
          <iterative_method name="preonly"/>
          <preconditioner name="lu">
            <factorization_package name="mumps"/>
          </preconditioner>
          <relative_error>
            <real_value rank="0">1.0e-4</real_value>
          </relative_error>
          <max_iterations>
            <integer_value rank="0">50000</integer_value>
          </max_iterations>
          <never_ignore_solver_failures/>
          <diagnostics>
            <monitors/>
          </diagnostics>
        </solver>
        <initial_condition name="WholeMesh">
          <python>
            <string_value lines="20" type="code" language="python">def val(x, t):
              T = 273.
              return T</string_value>
          </python>
        </initial_condition>
        <boundary_conditions name="SurfaceTemperature">
          <surface_ids>
            <integer_value shape="1" rank="1">10</integer_value>
          </surface_ids>
          <type name="dirichlet">
            <constant>
              <real_value rank="0">273.0</real_value>
            </constant>
          </type>
        </boundary_conditions>
        <boundary_conditions name="InflowWedge">
          <surface_ids>
            <integer_value shape="1" rank="1">12</integer_value>
          </surface_ids>
          <type name="dirichlet">
            <constant>
              <real_value rank="0">1573.</real_value>
            </constant>
          </type>
        </boundary_conditions>
        <boundary_conditions name="ERF">
          <surface_ids>
            <integer_value shape="1" rank="1">15</integer_value>
          </surface_ids>
          <type name="dirichlet">
            <python>
              <string_value lines="20" type="code" language="python">def val(X, t):
  import math

  def erf(x):
    # save the sign of x
    sign = 1
    if x &lt; 0:
      sign = -1
    x = abs(x)

    # constants
    a1 =  0.254829592
    a2 = -0.284496736
    a3 =  1.421413741
    a4 = -1.453152027
    a5 =  1.061405429
    p  =  0.3275911

    # A&amp;S formula 7.1.26
    t = 1.0/(1.0 + p*x)
    y = 1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*math.exp(-x*x)
    return sign*y # erf(-x) = -erf(x)


  Depth = X[1] * -1.
  Age = 1576800000000000.
  TempHalfSpace = 273. + 1300.*(erf(Depth/(2.*math.sqrt(0.0000007272*Age))))
  return TempHalfSpace</string_value>
            </python>
          </type>
        </boundary_conditions>
        <boundary_conditions name="LinearGradientCrust">
          <surface_ids>
            <integer_value shape="1" rank="1">11</integer_value>
          </surface_ids>
          <type name="dirichlet">
            <python>
              <string_value lines="20" type="code" language="python">def val(X, t):
  Depth = X[1] * -1.
  T = 273. + (Depth*0.026)
  return T</string_value>
            </python>
          </type>
        </boundary_conditions>
        <tensor_field name="Diffusivity" rank="2">
          <prescribed>
            <value name="WholeMesh">
              <isotropic>
                <constant>
                  <real_value rank="0">0.0000007272</real_value>
                </constant>
              </isotropic>
            </value>
            <output/>
          </prescribed>
        </tensor_field>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
        <consistent_interpolation/>
      </prognostic>
    </scalar_field>
    <scalar_field name="secondinvariant" rank="0">
      <diagnostic>
        <algorithm source_field_type="tensor" material_phase_support="single " name="tensor_second_invariant" source_field_name="Strain_rate"/>
        <mesh name="CoordinateMesh"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <exclude_from_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <scalar_field name="dummy" rank="0">
      <prescribed>
        <mesh name="CoordinateMesh"/>
        <value name="prescribed">
          <region_ids>
            <integer_value shape="2" rank="1">24 30</integer_value>
          </region_ids>
          <constant>
            <real_value rank="0">1.</real_value>
          </constant>
        </value>
        <value name="prognostic">
          <region_ids>
            <integer_value shape="1" rank="1">27</integer_value>
          </region_ids>
          <constant>
            <real_value rank="0">0.</real_value>
          </constant>
        </value>
        <output/>
        <stat/>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
      </prescribed>
    </scalar_field>
    <scalar_field name="Ele_Owner" rank="0">
      <diagnostic>
        <algorithm name="element_ownership" material_phase_support="single"/>
        <mesh name="P0_Mesh"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <scalar_field name="Ele_Halos" rank="0">
      <diagnostic>
        <algorithm name="element_halo" material_phase_support="single"/>
        <mesh name="P0_Mesh"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <scalar_field name="Node_Halo" rank="0">
      <diagnostic>
        <algorithm name="node_halo" material_phase_support="single"/>
        <mesh name="CoordinateMesh"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <scalar_field name="NodeOwner" rank="0">
      <diagnostic>
        <algorithm legacy="true" name="Internal" material_phase_support="multiple"/>
        <mesh name="CoordinateMesh"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <tensor_field name="Strain_rate" rank="2">
      <diagnostic>
        <algorithm source_field_type="vector" material_phase_support="single " name="strain_rate" source_field_name="Velocity"/>
        <mesh name="CoordinateMesh"/>
        <output/>
        <stat>
          <include_in_stat/>
        </stat>
      </diagnostic>
    </tensor_field>
  </material_phase>
  <flredecomp>
    <field_weighted_partitions>
      <scalar_field name="FieldWeightedPartitionValues" rank="0">
        <prescribed>
          <mesh name="CoordinateMesh"/>
          <value name="Prognostic_Regions">
            <region_ids>
              <integer_value shape="1" rank="1">27</integer_value>
            </region_ids>
            <constant>
              <real_value rank="0">1.</real_value>
            </constant>
          </value>
          <value name="Prescribed_Regions">
            <region_ids>
              <integer_value shape="2" rank="1">24 30</integer_value>
            </region_ids>
            <constant>
              <real_value rank="0">0.005</real_value>
            </constant>
          </value>
          <output/>
          <stat/>
          <detectors>
            <exclude_from_detectors/>
          </detectors>
        </prescribed>
      </scalar_field>
    </field_weighted_partitions>
  </flredecomp>
</fluidity_options>
