<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE testproblem SYSTEM "regressiontest.dtd">
<testproblem>

  <name>swe_mms_p2p1_quadratic_drag</name>
  <owner userid="ctj10"/>
  <tags>flml</tags>
  
  <problem_definition length="medium" nprocs="1">
    <command_line>fluidity -v3 MMS_A.flml &gt; MMS_A.log; fluidity -v3 MMS_B.flml &gt; MMS_B.log; fluidity -v3 MMS_C.flml &gt; MMS_C.log</command_line>
  </problem_definition>
  
  <variables>
  
    <variable name="ab_convergence_vel" language="python">
from fluidity_tools import stat_parser as stat
from math import log

print("Calculating errors for Velocity in A-B convergence test")
a_error_x = stat("MMS_A.stat")["Fluid"]["VelocityError%1"]["l2norm"][-1]
a_error_y = stat("MMS_A.stat")["Fluid"]["VelocityError%2"]["l2norm"][-1]
b_error_x = stat("MMS_B.stat")["Fluid"]["VelocityError%1"]["l2norm"][-1]
b_error_y = stat("MMS_B.stat")["Fluid"]["VelocityError%2"]["l2norm"][-1]

print(a_error_x)
print(a_error_y)
print(b_error_x)
print(b_error_y)

ab_ratio_x = a_error_x / b_error_x
ab_ratio_y = a_error_y / b_error_y
ab_convergence_vel = [log(ab_ratio_x, 2), log(ab_ratio_y, 2)]
</variable>
    
    <variable name="ab_convergence_p" language="python">
from fluidity_tools import stat_parser as stat
from math import log

print("Calculating errors for Pressure in A-B convergence test")
a_error = stat("MMS_A.stat")["Fluid"]["PressureError"]["l2norm"][-1]
b_error = stat("MMS_B.stat")["Fluid"]["PressureError"]["l2norm"][-1]

print(a_error)
print(b_error)

ab_ratio = a_error / b_error
ab_convergence_p = log(ab_ratio, 2)
</variable>
    
    <variable name="bc_convergence_vel" language="python">
from fluidity_tools import stat_parser as stat
from math import log

print("Calculating errors for Velocity in B-C convergence test")
b_error_x = stat("MMS_B.stat")["Fluid"]["VelocityError%1"]["l2norm"][-1]
b_error_y = stat("MMS_B.stat")["Fluid"]["VelocityError%2"]["l2norm"][-1]
c_error_x = stat("MMS_C.stat")["Fluid"]["VelocityError%1"]["l2norm"][-1]
c_error_y = stat("MMS_C.stat")["Fluid"]["VelocityError%2"]["l2norm"][-1]

print(b_error_x)
print(b_error_y)
print(c_error_x)
print(c_error_y)

bc_ratio_x = b_error_x / c_error_x
bc_ratio_y = b_error_y / c_error_y
bc_convergence_vel = [log(bc_ratio_x, 2), log(bc_ratio_y, 2)]
</variable>
    
    <variable name="bc_convergence_p" language="python">
from fluidity_tools import stat_parser as stat
from math import log

print("Calculating errors for Pressure in B-C convergence test")
b_error = stat("MMS_B.stat")["Fluid"]["PressureError"]["l2norm"][-1]
c_error = stat("MMS_C.stat")["Fluid"]["PressureError"]["l2norm"][-1]

print(b_error)
print(c_error)

bc_ratio = b_error / c_error
bc_convergence_p = log(bc_ratio, 2)
</variable>
    
    <variable name="solvers_converged" language="python">
import os
files = os.listdir("./")
solvers_converged = not "matrixdump" in files and not "matrixdump.info" in files
    </variable>
  </variables>
  
  <pass_tests>
    <test name="ab_convergence_vel_x: L2 order &gt; 2.65" language="python">
assert(ab_convergence_vel[0] &gt; 2.65)
    </test>
    <test name="ab_convergence_vel_y: L2 order &gt; 2.7" language="python">
assert(ab_convergence_vel[1] &gt; 2.7)
    </test>
    
    <test name="ab_convergence_p: L2 order &gt; 2" language="python">
assert(ab_convergence_p &gt; 2)
    </test>
    
    <test name="bc_convergence_vel_x: L2 order &gt; 2.7" language="python">
assert(bc_convergence_vel[0] &gt; 2.7)
    </test>
    <test name="bc_convergence_vel_y: L2 order &gt; 2.7" language="python">
assert(bc_convergence_vel[1] &gt; 2.7)
    </test>
    
    <test name="bc_convergence_p: L2 order &gt; 2" language="python">
assert(bc_convergence_p &gt; 2)
    </test>
    
    <test name="Solvers converged" language="python">
assert(solvers_converged)
    </test>
    
  </pass_tests>
  
  <warn_tests>
  </warn_tests>
  
</testproblem>
