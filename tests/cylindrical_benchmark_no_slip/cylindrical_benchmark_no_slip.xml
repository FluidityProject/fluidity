<?xml version='1.0' encoding='utf-8'?>
<testproblem>
  <name>cylindrical_benchmark_noslip</name>
  <owner userid="skramer"/>
  <tags>assess</tags>
  <problem_definition length="medium" nprocs="1">
    <command_line>for i in A B C; do
  fluidity -v2 -l cylindrical_${i}.flml;
done</command_line>
  </problem_definition>
  <variables>
    <variable name="ab_volume_convergence_vel" language="python">import calculate_convergence as cc
file_coarse = "cylindrical_A.stat"
file_fine = "cylindrical_B.stat"
ab_volume_convergence_vel = cc.velocity_convergence(file_coarse,file_fine)
    </variable>

    <variable name="bc_volume_convergence_vel" language="python">import calculate_convergence as cc
file_coarse = "cylindrical_B.stat"
file_fine = "cylindrical_C.stat"
bc_volume_convergence_vel = cc.velocity_convergence(file_coarse,file_fine)
    </variable>

    <variable name="ab_volume_convergence_pressure" language="python">import calculate_convergence as cc
file_coarse = "cylindrical_A.stat"
file_fine = "cylindrical_B.stat"
ab_volume_convergence_pressure = cc.pressure_convergence(file_coarse,file_fine)
    </variable>

    <variable name="bc_volume_convergence_pressure" language="python">import calculate_convergence as cc
file_coarse = "cylindrical_B.stat"
file_fine = "cylindrical_C.stat"
bc_volume_convergence_pressure = cc.pressure_convergence(file_coarse,file_fine)
    </variable>

    <variable name="ab_volume_convergence_ns" language="python">import calculate_convergence as cc
file_coarse = "cylindrical_A.stat"
file_fine = "cylindrical_B.stat"
ab_volume_convergence_ns = cc.normalstress_convergence(file_coarse,file_fine)
    </variable>

    <variable name="bc_volume_convergence_ns" language="python">import calculate_convergence as cc
file_coarse = "cylindrical_B.stat"
file_fine = "cylindrical_C.stat"
bc_volume_convergence_ns = cc.normalstress_convergence(file_coarse,file_fine)
    </variable>

    <variable name="ab_surface_convergence_ns" language="python">import calculate_convergence as cc
file_coarse = "cylindrical_A.stat"
file_fine = "cylindrical_B.stat"
ab_surface_convergence_ns = cc.surface_normalstress_convergence(file_coarse,file_fine)
    </variable>

    <variable name="bc_surface_convergence_ns" language="python">import calculate_convergence as cc
file_coarse = "cylindrical_B.stat"
file_fine = "cylindrical_C.stat"
bc_surface_convergence_ns = cc.surface_normalstress_convergence(file_coarse,file_fine)
    </variable>

    <variable name="ab_CMB_convergence_ns" language="python">import calculate_convergence as cc
file_coarse = "cylindrical_A.stat"
file_fine = "cylindrical_B.stat"
ab_CMB_convergence_ns = cc.CMB_normalstress_convergence(file_coarse,file_fine)
    </variable>

    <variable name="bc_CMB_convergence_ns" language="python">import calculate_convergence as cc
file_coarse = "cylindrical_B.stat"
file_fine = "cylindrical_C.stat"
bc_CMB_convergence_ns = cc.CMB_normalstress_convergence(file_coarse,file_fine)
    </variable>


  </variables>

  <pass_tests>
    <test name="abvolume_vel" language="python">assert( abs(ab_volume_convergence_vel -1.5) &lt; 0.2)</test>
    <test name="bcvolume_vel" language="python">assert( abs(bc_volume_convergence_vel -1.5) &lt; 0.2)</test>

    <test name="abvolume_pressure" language="python">assert( abs(ab_volume_convergence_pressure -0.5) &lt; 0.04)</test>
    <test name="bcvolume_pressure" language="python">assert( abs(bc_volume_convergence_pressure -0.5) &lt; 0.04)</test>

    <test name="abvolume_ns" language="python">assert( abs(ab_volume_convergence_ns -0.5) &lt; 0.2)</test>
    <test name="bcvolume_ns" language="python">assert( abs(bc_volume_convergence_ns -0.5) &lt; 0.2)</test>
    <test name="absurface_ns" language="python">assert( abs(ab_surface_convergence_ns -2.0) &lt; 0.8)</test>
    <test name="bcsurface_ns" language="python">assert( abs(bc_surface_convergence_ns -2.0) &lt; 0.8)</test>
    <test name="abCMB_ns" language="python">assert( abs(ab_CMB_convergence_ns -2.0) &lt; 0.8)</test>
    <test name="bcCMB_ns" language="python">assert( abs(bc_CMB_convergence_ns -2.0) &lt; 0.8)</test>

  </pass_tests>

</testproblem>
