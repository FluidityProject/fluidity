<?xml version='1.0' encoding='utf-8'?>
<fluidity_options>
  <simulation_name>
    <string_value lines="1">Stommel2_adapt-A</string_value>
  </simulation_name>
  <problem_type>
    <string_value lines="1">oceans</string_value>
  </problem_type>
  <geometry>
    <dimension>
      <integer_value rank="0">2</integer_value>
    </dimension>
    <mesh name="CoordinateMesh">
      <from_file file_name="Stommel2_adapt">
        <format name="gmsh"/>
        <stat>
          <include_in_stat/>
        </stat>
      </from_file>
    </mesh>
    <mesh name="VelocityMesh">
      <from_mesh>
        <mesh name="CoordinateMesh"/>
        <stat>
          <exclude_from_stat/>
        </stat>
      </from_mesh>
    </mesh>
    <mesh name="PressureMesh">
      <from_mesh>
        <mesh name="CoordinateMesh"/>
        <stat>
          <exclude_from_stat/>
        </stat>
      </from_mesh>
    </mesh>
    <quadrature>
      <degree>
        <integer_value rank="0">3</integer_value>
      </degree>
      <surface_degree>
        <integer_value rank="0">3</integer_value>
      </surface_degree>
    </quadrature>
  </geometry>
  <io>
    <dump_format>
      <string_value>vtk</string_value>
    </dump_format>
    <dump_period>
      <constant>
        <real_value rank="0">5.0e5</real_value>
      </constant>
    </dump_period>
    <output_mesh name="VelocityMesh"/>
    <stat/>
  </io>
  <timestepping>
    <current_time>
      <real_value rank="0">0.0</real_value>
    </current_time>
    <timestep>
      <real_value rank="0">1.e4</real_value>
    </timestep>
    <finish_time>
      <real_value rank="0">1.0e7</real_value>
    </finish_time>
    <nonlinear_iterations>
      <integer_value rank="0">1</integer_value>
    </nonlinear_iterations>
  </timestepping>
  <physical_parameters/>
  <material_phase name="fluid">
    <vector_field name="Velocity" rank="1">
      <prescribed>
        <mesh name="VelocityMesh"/>
        <value name="WholeMesh">
          <python>
            <string_value lines="20" type="code" language="python">def val(X, t):
  from math import exp, sin, cos
  ##L=1.e6; F=0.1; rho=1000.0; H=200.0; gamma=1.e-6;
  ##A = F*L/(pi*gamma*rho*H) 
  A = 159154.94309189534
  ##alpha = beta/gamma
  ##1/alpha = 100km=1e5; alpha = 1.e-5
  ##beta=1e-11
  ##zplus = -alpha/2 + sqrt((alpha**2)/4 + (pi/L)**2)
  zplus = 9.0504906000698326e-07
  ##zminus = -alpha/2 - sqrt((alpha**2)/4 + (pi/L)**2)
  zminus = -1.0905049060006982e-05  
  ##p=(1-exp(L*zminus))/(exp(L*zplus)-exp(L*zminus))  
  p =  0.40451761482981791
  ## q = 1-p
  q = 0.59548238517018204
  ## pi/L = 3.1415926535897933e-06
  ##psi = A*sin(3.1415926535897933e-06*y)*(p*exp(x*zplus) + q*exp(x*zminus) - 1.0)
  ## u = d psi/d y
  ## A*pi/L = 0.5
  u = 0.5*cos(3.1415926535897933e-06*X[1])*(p*exp(X[0]*zplus) + q*exp(X[0]*zminus) - 1.0)
  ## v = -d psi/d x
  v = -A*sin(3.1415926535897933e-06*X[1])*(p*zplus*exp(X[0]*zplus) + q*zminus*exp(X[0]*zminus))
  return [u,v]</string_value>
            <comment>psi(x,y) = A*sin(pi*y/L)*(p*exp(x*zplus) + q*exp(x*zminus) - 1.0)
A = F*L/(pi*gamma*rho*H)
L=1.e6
F=0.1
rho = 1000
H=200
gamma=1e-6
q=1-p
p=(1-exp(L*zminus)/(exp(L*zplus)-exp(L*zminus))
zplus = -alpha/2 + sqrt((alpha**2)/4 + (pi/L)**2)
zminus = -alpha/2 - sqrt((alpha**2)/4 + (pi/L)**2)
alpha = beta/gamma
1/alpha = 100km=1e5
beta=1e-11</comment>
          </python>
        </value>
        <output/>
        <stat>
          <include_in_stat/>
        </stat>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
      </prescribed>
    </vector_field>
    <scalar_field name="Temperature" rank="0">
      <prognostic>
        <mesh name="VelocityMesh"/>
        <equation name="AdvectionDiffusion"/>
        <spatial_discretisation>
          <control_volumes>
            <face_value name="FiniteElement">
              <limit_face_value>
                <limiter name="Sweby">
                  <project_upwind_value_from_point>
                    <store_upwind_elements>
                      <store_upwind_quadrature/>
                    </store_upwind_elements>
                  </project_upwind_value_from_point>
                </limiter>
              </limit_face_value>
            </face_value>
            <diffusion_scheme name="ElementGradient"/>
          </control_volumes>
          <conservative_advection>
            <real_value rank="0">0.0</real_value>
          </conservative_advection>
        </spatial_discretisation>
        <temporal_discretisation>
          <theta>
            <real_value rank="0">1.0</real_value>
          </theta>
          <control_volumes>
            <number_advection_iterations>
              <integer_value rank="0">3</integer_value>
            </number_advection_iterations>
            <limit_theta/>
          </control_volumes>
        </temporal_discretisation>
        <solver>
          <iterative_method name="gmres">
            <restart>
              <integer_value rank="0">30</integer_value>
            </restart>
          </iterative_method>
          <preconditioner name="eisenstat"/>
          <relative_error>
            <real_value rank="0">1.0e-6</real_value>
          </relative_error>
          <max_iterations>
            <integer_value rank="0">3000</integer_value>
          </max_iterations>
          <never_ignore_solver_failures/>
          <diagnostics>
            <monitors/>
          </diagnostics>
        </solver>
        <initial_condition name="WholeMesh">
          <python>
            <string_value lines="20" type="code" language="python">def val(X, t):
  from math import exp
  L =1.e6
  T =  10.0*exp(-((X[0] - 2.*L/3.)**2 + (X[1] - L/3.)**2)/(2.*(L/12.5)**2))
  return T</string_value>
          </python>
        </initial_condition>
        <output/>
        <stat>
          <include_mixing_stats name="mixing">
            <control_volumes/>
            <mixing_bin_bounds>
              <constant>
                <real_value shape="11" rank="1">0 1 2 3 4 5 6 7 8 9 10</real_value>
              </constant>
            </mixing_bin_bounds>
          </include_mixing_stats>
        </stat>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
        <adaptivity_options>
          <absolute_measure>
            <scalar_field name="InterpolationErrorBound" rank="0">
              <prescribed>
                <value name="WholeMesh">
                  <constant>
                    <real_value rank="0">0.15</real_value>
                  </constant>
                </value>
                <output/>
                <stat/>
                <detectors>
                  <exclude_from_detectors/>
                </detectors>
              </prescribed>
            </scalar_field>
          </absolute_measure>
        </adaptivity_options>
        <consistent_interpolation/>
      </prognostic>
    </scalar_field>
    <scalar_field name="Streamfunction" rank="0">
      <prescribed>
        <mesh name="VelocityMesh"/>
        <value name="WholeMesh">
          <python>
            <string_value lines="20" type="code" language="python">def val(X, t):
  from math import exp, sin, cos
  ##L=1.e6; F=0.1; rho=1000.0; H=200.0; gamma=1.e-6;
  ##A = F*L/(pi*gamma*rho*H) 
  A = 159154.94309189534
  ##alpha = beta/gamma
  ##1/alpha = 100km=1e5; alpha = 1.e-5
  ##beta=1e-11
  ##zplus = -alpha/2 + sqrt((alpha**2)/4 + (pi/L)**2)
  zplus = 9.0504906000698326e-07
  ##zminus = -alpha/2 - sqrt((alpha**2)/4 + (pi/L)**2)
  zminus = -1.0905049060006982e-05 
  ##p=(1-exp(L*zminus))/(exp(L*zplus)-exp(L*zminus))  
  p =  0.40451761482981791
  ## q = 1-p
  q = 0.59548238517018204
  ## pi/L = 3.1415926535897933e-06
  psi = A*sin(3.1415926535897933e-06*X[1])*(p*exp(X[0]*zplus) + q*exp(X[0]*zminus) - 1.0)
  return psi</string_value>
          </python>
        </value>
        <output/>
        <stat/>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
      </prescribed>
    </scalar_field>
  </material_phase>
  <mesh_adaptivity>
    <hr_adaptivity>
      <period_in_timesteps>
        <integer_value rank="0">10</integer_value>
      </period_in_timesteps>
      <maximum_number_of_nodes>
        <integer_value rank="0">500000</integer_value>
      </maximum_number_of_nodes>
      <anisotropic_gradation>
        <tensor_field name="Gamma">
          <anisotropic_symmetric>
            <constant>
              <real_value symmetric="true" dim2="dim" shape="2 2" dim1="dim" rank="2">0.7 0.0 0.0 0.7</real_value>
            </constant>
          </anisotropic_symmetric>
        </tensor_field>
      </anisotropic_gradation>
      <tensor_field name="MinimumEdgeLengths">
        <anisotropic_symmetric>
          <constant>
            <real_value symmetric="true" dim2="dim" shape="2 2" dim1="dim" rank="2">1.e3 0.0 0.0 1.e3</real_value>
          </constant>
        </anisotropic_symmetric>
      </tensor_field>
      <tensor_field name="MaximumEdgeLengths">
        <anisotropic_symmetric>
          <constant>
            <real_value symmetric="true" dim2="dim" shape="2 2" dim1="dim" rank="2">1.e6 0.0 0.0 1.e6</real_value>
          </constant>
        </anisotropic_symmetric>
      </tensor_field>
      <aspect_ratio_bound>
        <real_value rank="0">1.0e10</real_value>
      </aspect_ratio_bound>
      <adapt_at_first_timestep>
        <number_of_adapts>
          <integer_value rank="0">8</integer_value>
        </number_of_adapts>
      </adapt_at_first_timestep>
    </hr_adaptivity>
  </mesh_adaptivity>
</fluidity_options>
