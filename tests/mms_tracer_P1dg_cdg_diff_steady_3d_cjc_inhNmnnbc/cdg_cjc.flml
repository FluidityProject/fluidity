<?xml version='1.0' encoding='utf-8'?>
<fluidity_options>
  <simulation_name>
    <string_value lines="1">cdg</string_value>
  </simulation_name>
  <problem_type>
    <string_value lines="1">fluids</string_value>
  </problem_type>
  <geometry>
    <dimension>
      <integer_value rank="0">3</integer_value>
    </dimension>
    <mesh name="CoordinateMesh">
      <from_file file_name="box">
        <format name="gmsh"/>
        <stat>
          <include_in_stat/>
        </stat>
      </from_file>
    </mesh>
    <mesh name="VelocityMesh">
      <from_mesh>
        <mesh name="CoordinateMesh"/>
        <mesh_shape>
          <polynomial_degree>
            <integer_value rank="0">1</integer_value>
          </polynomial_degree>
        </mesh_shape>
        <mesh_continuity>
          <string_value>discontinuous</string_value>
        </mesh_continuity>
        <stat>
          <exclude_from_stat/>
        </stat>
      </from_mesh>
    </mesh>
    <mesh name="PressureMesh">
      <from_mesh>
        <mesh name="CoordinateMesh"/>
        <stat>
          <exclude_from_stat/>
        </stat>
      </from_mesh>
    </mesh>
    <quadrature>
      <degree>
        <integer_value rank="0">4</integer_value>
      </degree>
    </quadrature>
  </geometry>
  <io>
    <dump_format>
      <string_value>vtk</string_value>
    </dump_format>
    <dump_period>
      <constant>
        <real_value rank="0">500.0</real_value>
      </constant>
    </dump_period>
    <output_mesh name="VelocityMesh"/>
    <stat/>
  </io>
  <timestepping>
    <current_time>
      <real_value rank="0">0</real_value>
    </current_time>
    <timestep>
      <real_value rank="0">0.05</real_value>
    </timestep>
    <finish_time>
      <real_value rank="0">1.0e-10</real_value>
    </finish_time>
    <steady_state>
      <tolerance>
        <real_value rank="0">1.E-6</real_value>
        <infinity_norm/>
      </tolerance>
    </steady_state>
  </timestepping>
  <physical_parameters/>
  <material_phase name="Stuff">
    <vector_field rank="1" name="Velocity">
      <prescribed>
        <mesh name="VelocityMesh"/>
        <value name="WholeMesh">
          <constant>
            <real_value rank="1" dim1="dim" shape="3">0.0 0.0 0.0</real_value>
            <comment>def val(XX, t):
   from math import sin,cos
   x = XX[0];
   y = XX[1];
   z = XX[2];
   x2 = x*x;
   y2 = y*y;
   z2 = z*z;
   u = sin(5*(x2+y2+z2));
   v = cos(3*(x2-y2+z2));
   w = sin(3*(-x2-y2+z2));
   return (u, v, w)</comment>
          </constant>
        </value>
        <output/>
        <stat>
          <include_in_stat/>
        </stat>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
      </prescribed>
    </vector_field>
    <scalar_field rank="0" name="NumericalSolution">
      <prognostic>
        <mesh name="VelocityMesh"/>
        <equation name="AdvectionDiffusion"/>
        <spatial_discretisation>
          <discontinuous_galerkin>
            <advection_scheme>
              <none/>
              <integrate_advection_by_parts>
                <twice/>
              </integrate_advection_by_parts>
            </advection_scheme>
            <diffusion_scheme>
              <compact_discontinuous_galerkin/>
            </diffusion_scheme>
            <mass_terms>
              <exclude_mass_terms/>
            </mass_terms>
          </discontinuous_galerkin>
          <conservative_advection>
            <real_value rank="0">0.0</real_value>
          </conservative_advection>
        </spatial_discretisation>
        <temporal_discretisation>
          <theta>
            <real_value rank="0">1.0</real_value>
          </theta>
        </temporal_discretisation>
        <solver>
          <iterative_method name="cg"/>
          <preconditioner name="mg"/>
          <relative_error>
            <real_value rank="0">1.E-10</real_value>
          </relative_error>
          <max_iterations>
            <integer_value rank="0">10000</integer_value>
          </max_iterations>
          <start_from_zero/>
          <never_ignore_solver_failures/>
          <diagnostics>
            <monitors/>
          </diagnostics>
        </solver>
        <initial_condition name="WholeMesh">
          <constant>
            <real_value rank="0">0</real_value>
          </constant>
        </initial_condition>
        <boundary_conditions name="Diriclet">
          <surface_ids>
            <integer_value rank="1" shape="5">28 29 30 31 32</integer_value>
          </surface_ids>
          <type name="dirichlet">
            <apply_weakly>
              <boundary_overwrites_initial_condition/>
            </apply_weakly>
            <python>
              <string_value type="code" language="python" lines="20">def val(XX, t):
   from math import exp
   x = XX[0];
   y = XX[1];
   z = XX[2];
   u = exp(-((x-0.5)**2 + (y-0.5)**2 + (z-0.5)**2)/2)
   return u</string_value>
            </python>
          </type>
        </boundary_conditions>
        <boundary_conditions name="inhomogeneous_Neumann_on_x_normal_boundary_surface">
          <surface_ids>
            <integer_value rank="1" shape="1">33</integer_value>
          </surface_ids>
          <type name="neumann">
            <python>
              <string_value type="code" language="python" lines="20">def val(XX, t):
   from math import exp
   x = XX[0];
   y = XX[1];
   z = XX[2];
   u = exp(-((x-0.5)**2 + (y-0.5)**2 + (z-0.5)**2)/2)*(0.5-x)
   return u</string_value>
            </python>
          </type>
        </boundary_conditions>
        <tensor_field name="Diffusivity" rank="2">
          <prescribed>
            <value name="WholeMesh">
              <isotropic>
                <constant>
                  <real_value rank="0">1.0</real_value>
                </constant>
              </isotropic>
            </value>
            <output/>
            <particles>
              <exclude_from_particles/>
            </particles>
          </prescribed>
        </tensor_field>
        <scalar_field name="Source" rank="0">
          <prescribed>
            <value name="WholeMesh">
              <python>
                <string_value type="code" language="python" lines="20">def val(XX, t):
   from math import exp
   x = XX[0];
   y = XX[1];
   z = XX[2];
   T = exp(-((x-0.5)**2 + (y-0.5)**2 + (z-0.5)**2)/2)
   S = (3 - (x-0.5)**2 - (y-0.5)**2 - (z-0.5)**2)*T
   return S</string_value>
                <comment>sage: T(x,y,z,t,nu,adv,beta,omega) = sin(25*x*y*z + omega*t) - 2*(y+z)/(sqrt(x*z+1.0))
sage: T_t = diff(T,t)
sage: T_x = diff(T,x)
sage: T_y = diff(T,y)
sage: T_z = diff(T,z)
sage: T_xx = diff(T_x,x)
sage: T_yy = diff(T_y,y)
sage: T_zz = diff(T_z,z)
sage: 
sage: u(x,y,z,t) = sin(5*(x^2+y^2+z^2))
sage: v(x,y,z,t) = cos(3*(x^2-y^2+z^2))
sage: w(x,y,z,t) = sin(3*(-x^2-y^2+z^2))
sage: 
sage: u_x = diff(u,x)
sage: u_y = diff(u,y)
sage: u_z = diff(u,z)
sage: v_x = diff(v,x)
sage: v_y = diff(v,y)
sage: v_z = diff(v,z)
sage: w_x = diff(w,x)
sage: w_y = diff(w,y)
sage: w_z = diff(w,z)
sage: 
sage: S = T_t + adv*(u*T_x + v*T_y + w*T_z + beta*(T*(u_x + v_y + w_z))) - nu*(T_xx + T_yy + T_zz)
sage: 
sage: 
sage: S
(x, y, z, t, nu, adv, beta, omega) |--&gt; -(2*(2*(y + z)/sqrt(x*z + 1.00000000000000) - sin(25*x*y*z + omega*t))*(5*x*cos(5*x^2 + 5*y^2 + 5*z^2) + 3*y*sin(3*x^2 - 3*y^2 + 3*z^2) + 3*z*cos(-3*x^2 - 3*y^2 + 3*z^2))*beta - (25*y*z*cos(25*x*y*z + omega*t) + (y + z)*z/(x*z + 1.00000000000000)^(3/2))*sin(5*x^2 + 5*y^2 + 5*z^2) - (25*x*z*cos(25*x*y*z + omega*t) - 2/sqrt(x*z + 1.00000000000000))*cos(3*x^2 - 3*y^2 + 3*z^2) - (25*x*y*cos(25*x*y*z + omega*t) + (y + z)*x/(x*z + 1.00000000000000)^(3/2) - 2/sqrt(x*z + 1.00000000000000))*sin(-3*x^2 - 3*y^2 + 3*z^2))*adv + 1/2*(1250*x^2*y^2*sin(25*x*y*z + omega*t) + 1250*x^2*z^2*sin(25*x*y*z + omega*t) + 1250*y^2*z^2*sin(25*x*y*z + omega*t) + 3*(y + z)*x^2/(x*z + 1.00000000000000)^(5/2) + 3*(y + z)*z^2/(x*z + 1.00000000000000)^(5/2) - 4*x/(x*z + 1.00000000000000)^(3/2))*nu + omega*cos(25*x*y*z + omega*t)</comment>
              </python>
            </value>
            <output/>
            <stat/>
            <detectors>
              <exclude_from_detectors/>
            </detectors>
            <particles>
              <exclude_from_particles/>
            </particles>
          </prescribed>
        </scalar_field>
        <output>
          <include_previous_time_step/>
        </output>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
        <consistent_interpolation/>
      </prognostic>
    </scalar_field>
    <scalar_field rank="0" name="AnalyticalSolution">
      <prescribed>
        <mesh name="VelocityMesh"/>
        <value name="WholeMesh">
          <python>
            <string_value type="code" language="python" lines="20">def val(XX, t):
   from math import exp
   x = XX[0];
   y = XX[1];
   z = XX[2];
   u = exp(-((x-0.5)**2 + (y-0.5)**2 + (z-0.5)**2)/2)
   return u</string_value>
          </python>
        </value>
        <output/>
        <stat/>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
      </prescribed>
    </scalar_field>
    <scalar_field rank="0" name="AbsoluteDifference">
      <diagnostic field_name_a="AnalyticalSolution" field_name_b="NumericalSolution">
        <algorithm name="Internal" material_phase_support="multiple"/>
        <mesh name="VelocityMesh"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <scalar_field rank="0" name="DG_CourantNumber">
      <diagnostic>
        <algorithm name="Internal" material_phase_support="multiple"/>
        <mesh name="VelocityMesh"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
  </material_phase>
</fluidity_options>
