<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE testproblem SYSTEM "regressiontest.dtd">
<testproblem>
  <name>p2lumpedp1 RANS k-epsilon spatial convergence test with strong bcs</name>
  <owner userid="sparkinson"/>
  <tags>flml</tags>
  <problem_definition length="medium" nprocs="1">
    <command_line>fluidity MMS_A.flml &gt; MMS_A.log; fluidity MMS_B.flml &gt; MMS_B.log; fluidity MMS_C.flml &gt; MMS_C.log; fluidity MMS_D.flml &gt; MMS_D.log</command_line>
  </problem_definition>
  <variables>
    <variable name="convergence" language="python">
from fluidity_tools import stat_parser as stat
from vtktools import *
from math import log
import numpy as np

meshes = [['A','B'], ['B','C'], ['C','D']]

convergence = np.ones(8) * 1e10

print('')
print('ORDER OF CONVERGENCE')
print('-------------------------------------------')

print('VelocityError:')
print('-------------------------------------------')

for i, mesh in enumerate(meshes):

    a_error_x = stat("MMS_"+str(mesh[0])+".stat")["NS"]["VelocityError%1"]["l2norm"][-1]
    b_error_x = stat("MMS_"+str(mesh[1])+".stat")["NS"]["VelocityError%1"]["l2norm"][-1]
    a_error_y = stat("MMS_"+str(mesh[0])+".stat")["NS"]["VelocityError%2"]["l2norm"][-1]
    b_error_y = stat("MMS_"+str(mesh[1])+".stat")["NS"]["VelocityError%2"]["l2norm"][-1]

    ratio_x = a_error_x / b_error_x
    ratio_y = a_error_y / b_error_y

    print(mesh[0] + '-&gt;' + mesh[1] + ': ', [log(ratio_x, 2), log(ratio_y, 2)])

    convergence[0] = min(log(ratio_x, 2), log(ratio_y, 2), convergence[0])

print('-------------------------------------------')

fields = ['s1Error',
          's2Error',
          'PressureError',
          ]

for i, field in enumerate(fields):
    print(field)
    print('-------------------------------------------')

    for j, mesh in enumerate(meshes):

        a_error = stat("MMS_"+str(mesh[0])+".stat")["NS"][field]["l2norm"][-1]
        b_error = stat("MMS_"+str(mesh[1])+".stat")["NS"][field]["l2norm"][-1]

        ratio = a_error / b_error

        print(mesh[0] + '-&gt;' + mesh[1] + ': ', log(ratio, 2))

        convergence[i+1] = min(log(ratio, 2), convergence[i+1])

    print('-------------------------------------------')

fields = ['s1BedloadErosionRateError',
          's2BedloadErosionRateError',
          's1BedloadDepositRateError',
          's2BedloadDepositRateError',
          ]

for i, field in enumerate(fields):
    print(field)
    print('-------------------------------------------')

    for j, mesh in enumerate(meshes):

        a = vtu('MMS_'+str(mesh[0])+'_1.vtu')
        b = vtu('MMS_'+str(mesh[1])+'_1.vtu')

        a_error = a.GetField(field).max()
        b_error = b.GetField(field).max()

        ratio = a_error / b_error

        print(mesh[0] + '-&gt;' + mesh[1] + ': ', log(ratio, 2))

        convergence[i+4] = min(log(ratio, 2), convergence[i+4])

    print('-------------------------------------------')
</variable>
    <variable name="a_finish_time" language="python">
from fluidity_tools import stat_parser as stat
a_finish_time = stat("MMS_A.stat")["ElapsedTime"]["value"][-1]
    </variable>
    <variable name="b_finish_time" language="python">
from fluidity_tools import stat_parser as stat
b_finish_time = stat("MMS_B.stat")["ElapsedTime"]["value"][-1]
    </variable>
    <variable name="c_finish_time" language="python">
from fluidity_tools import stat_parser as stat
c_finish_time = stat("MMS_C.stat")["ElapsedTime"]["value"][-1]
    </variable>
    <variable name="d_finish_time" language="python">
from fluidity_tools import stat_parser as stat
d_finish_time = stat("MMS_D.stat")["ElapsedTime"]["value"][-1]
    </variable>
  </variables>
  <pass_tests>
    <test name="velocity convergence order &gt; 2.8" language="python">
assert(convergence[0] &gt; 2.8)
    </test>
    <test name="pressure convergence order &gt; 1.7" language="python">
assert(convergence[3] &gt; 1.7)
    </test>
    <test name="s1 convergence order &gt; 2.8" language="python">
assert(convergence[1] &gt; 2.8)
    </test>
    <test name="s2 convergence order &gt; 2.8" language="python">
assert(convergence[2] &gt; 2.8)
    </test>
    <test name="s1 erosion rate convergence order &gt; 1.8" language="python">
assert(convergence[4] &gt; 1.8)
    </test>
    <test name="s1 deposit rate convergence order &gt; 1.8" language="python">
assert(convergence[6] &gt; 1.8)
    </test>
    <test name="s2 erosion rate convergence order &gt; 1.8" language="python">
assert(convergence[5] &gt; 1.8)
    </test>
    <test name="s2 deposit rate convergence order &gt; 1.8" language="python">
assert(convergence[7] &gt; 1.8)
    </test>
    <test name="checking A finished in less than 100 seconds" language="python">
assert(a_finish_time-100.0 &lt; 1.E-10)
    </test>
    <test name="checking B finished in less than 100 seconds" language="python">
assert(b_finish_time-100.0 &lt; 1.E-10)
    </test>
    <test name="checking C finished in less than 100 seconds" language="python">
assert(c_finish_time-100.0 &lt; 1.E-10)
    </test>
    <test name="checking D finished in less than 100 seconds" language="python">
assert(d_finish_time-100.0 &lt; 1.E-10)
    </test>
  </pass_tests>
  <warn_tests>
  </warn_tests>
</testproblem>
