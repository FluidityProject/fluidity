<?xml version='1.0' encoding='UTF-8'?>
<testproblem>
  <name>tidal diagnostics</name>
  <owner userid="jhill1"/>
  <tags>flml tides</tags>
  <problem_definition length="medium" nprocs="1">
    <command_line>mpiexec fluidity tidal_diagnostics.flml </command_line>
  </problem_definition>
  <variables>
    <variable name="solvers_converged" language="python">
import os
files = os.listdir("./")
solvers_converged = not "matrixdump" in files and not "matrixdump.info" in files
    </variable>
    <variable name="M2amp" language="python">
from fluidity_tools import stat_parser
stat=stat_parser( "Water_World.stat" )
M2amp = stat["Fields"]["M2amp"]["max"][-1]
    </variable>
    <variable name="S2amp" language="python">
from fluidity_tools import stat_parser
stat=stat_parser( "Water_World.stat" )
S2amp = stat["Fields"]["S2amp"]["max"][-1]
    </variable>
    <!-- Check that amp is not calculated until after spin up time-->
    <!-- We have a TS of 1000s and we request 5000 spin up time and 
         data to be calculated over 100 timesteps. This means no 
         results until 100*1000 + 5000 = 105,000 seconds [104 in stat file]. Output is every
         21600 seconds, so M2amp should be zero until 5 outputs = 
         108,000 seconds [106 in stat file] --> 
    <variable name="M2ampPreSpin" language="python">
from fluidity_tools import stat_parser
stat=stat_parser( "Water_World.stat" )
M2ampPreSpin = stat["Fields"]["M2amp"]["max"][106]
    </variable>
    <variable name="S2ampPreSpin" language="python">
from fluidity_tools import stat_parser
stat=stat_parser( "Water_World.stat" )
S2ampPreSpin = stat["Fields"]["S2amp"]["max"][106]
    </variable>
    <variable name="M2ampPostSpin" language="python">
from fluidity_tools import stat_parser
stat=stat_parser( "Water_World.stat" )
M2ampPostSpin = stat["Fields"]["M2amp"]["max"][109]
    </variable>
    <variable name="S2ampPostSpin" language="python">
from fluidity_tools import stat_parser
stat=stat_parser( "Water_World.stat" )
S2ampPostSpin = stat["Fields"]["S2amp"]["max"][109]
    </variable>

  </variables>
  <pass_tests>
    <test name="Solvers converged" language="python">
      assert(solvers_converged)
  </test>
    <test name="S2 is minimal" language="python">
      assert(S2amp &lt; 0.01)
  </test>
  <test name="M2 is correct" language="python">
      assert(abs(M2amp - 0.242334) &lt; 0.02)
  </test>    
  <test name="S2pre is zero" language="python">
      assert(S2ampPreSpin == 0)
  </test>
  <test name="M2pre is zero" language="python">
      assert(M2ampPreSpin == 0)
  </test>
  <test name="S2post is non-zero" language="python">
      assert(S2ampPostSpin &gt; 0)
  </test>
  <test name="M2post is non-zero" language="python">
      assert(M2ampPostSpin &gt; 0)
  </test>

  </pass_tests>
  <warn_tests>
  </warn_tests>
</testproblem>
