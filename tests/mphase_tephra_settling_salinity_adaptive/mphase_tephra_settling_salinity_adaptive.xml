<?xml version='1.0' encoding='UTF-8'?>
<testproblem>

  <name>mphase_tephra_settling_salinity_adaptive</name>
  <owner userid="ctj10"/>
  <tags>flml longtime</tags>

  <problem_definition length="vlong" nprocs="8">
    <command_line>mpiexec flredecomp -i 1 -o 8 -v -l mphase_tephra_settling_salinity_adaptive mphase_tephra_settling_salinity_adaptive_flredecomp &amp;&amp;
mpiexec fluidity mphase_tephra_settling_salinity_adaptive_flredecomp.flml</command_line>
    <!-- This is a 2D (adaptive) simulation of the formation of density currents in a body of water with a salinity gradient. -->
    <!-- A constant influx of tephra (with d = 62e-6 metres) is delivered along the top boundary. -->
    <!-- Due to the high flux rate of 22.7 g/cm^2/hr, density currents/plumes should eventually almost immediately -->
    <!-- because the bulk density of the tephra-water mixture quickly becomes large enough relative to the underlying particle-free water. -->
    <!-- The tephra plume should impinge on the inflexion in the salinity gradient and spread out horizontally, causing rapid deceleration. -->
    <!-- After a second tephra layer forms along the inflexion, the particles continue their descent towards the -->
    <!-- bottom of the water tank. -->
  </problem_definition>

  <variables>
    <variable name="tephra_velocity_magnitude_max" language="python">
from fluidity_tools import stat_parser
s = stat_parser("mphase_tephra_settling_salinity_adaptive.stat")
tephra_velocity_magnitude_max = s["Tephra"]["Velocity%magnitude"]["max"]
    </variable>

    <variable name="time" language="python">
from fluidity_tools import stat_parser
s = stat_parser("mphase_tephra_settling_salinity_adaptive.stat")
time = s["ElapsedTime"]["value"]
    </variable>

    <variable name="salinity_min_final" language="python">
from fluidity_tools import stat_parser
s = stat_parser("mphase_tephra_settling_salinity_adaptive.stat")
salinity_min_final = s["Water"]["Salinity"]["min"][-1]
    </variable>

    <variable name="salinity_max_final" language="python">
from fluidity_tools import stat_parser
s = stat_parser("mphase_tephra_settling_salinity_adaptive.stat")
salinity_max_final = s["Water"]["Salinity"]["max"][-1]
    </variable>

    <variable name="solvers_converged" language="python">
import os
files = os.listdir("./")
solvers_converged = not "matrixdump" in files and not "matrixdump.info" in files
    </variable>
  </variables>

  <pass_tests>
    <test name="Maximum Tephra velocity is less than 0.002 for the first 5 seconds" language="python">
for t in range(0, len(time)):
   if(time[t] &gt; 5.0):
      assert tephra_velocity_magnitude_max[0:t-1].all() &lt; 0.002
      break
    </test>

    <test name="Maximum Tephra velocity is between 0.002 and 0.7 for the rest of the simulation" language="python">
for t in range(0, len(time)):
   if(time[t] &gt; 5.0):
      assert min(tephra_velocity_magnitude_max[t:]) &gt; 0.002
      assert max(tephra_velocity_magnitude_max[t:]) &lt; 0.7
      break
    </test>

    <test name="Salinity gradient remains mostly unchanged by the plumes passing through it" language="python">
assert salinity_min_final &gt; 0
assert salinity_max_final &lt; 70
    </test>

    <test name="Solvers converged" language="python">
assert(solvers_converged)
    </test>
  </pass_tests>

  <warn_tests>
  </warn_tests>

</testproblem>
