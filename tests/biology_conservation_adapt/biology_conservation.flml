<?xml version='1.0' encoding='utf-8'?>
<fluidity_options>
  <simulation_name>
    <string_value lines="1">biology_conservation</string_value>
    <comment>Check that biological quantities are preserved with a settling velocity, adapt in vertical, and the dodgy exclude advection option</comment>
  </simulation_name>
  <problem_type>
    <string_value lines="1">oceans</string_value>
  </problem_type>
  <geometry>
    <dimension>
      <integer_value rank="0">3</integer_value>
    </dimension>
    <mesh name="CoordinateMesh">
      <from_mesh>
        <mesh name="2DMesh"/>
        <extrude>
          <regions name="WholeMesh">
            <bottom_depth>
              <constant>
                <real_value rank="0">2100</real_value>
              </constant>
            </bottom_depth>
            <sizing_function>
              <constant>
                <real_value rank="0">10</real_value>
              </constant>
            </sizing_function>
            <top_surface_id>
              <integer_value rank="0">111</integer_value>
            </top_surface_id>
            <bottom_surface_id>
              <integer_value rank="0">333</integer_value>
            </bottom_surface_id>
          </regions>
        </extrude>
        <stat>
          <include_in_stat/>
        </stat>
      </from_mesh>
    </mesh>
    <mesh name="VelocityMesh">
      <from_mesh>
        <mesh name="CoordinateMesh"/>
        <stat>
          <exclude_from_stat/>
        </stat>
      </from_mesh>
    </mesh>
    <mesh name="PressureMesh">
      <from_mesh>
        <mesh name="CoordinateMesh"/>
        <stat>
          <exclude_from_stat/>
        </stat>
      </from_mesh>
    </mesh>
    <mesh name="2DMesh">
      <from_file file_name="surface">
        <format name="gmsh"/>
        <stat>
          <exclude_from_stat/>
        </stat>
      </from_file>
    </mesh>
    <quadrature>
      <degree>
        <integer_value rank="0">5</integer_value>
      </degree>
    </quadrature>
  </geometry>
  <io>
    <dump_format>
      <string_value>vtk</string_value>
    </dump_format>
    <dump_period_in_timesteps>
      <constant>
        <integer_value rank="0">24</integer_value>
      </constant>
    </dump_period_in_timesteps>
    <output_mesh name="VelocityMesh"/>
    <checkpointing>
      <checkpoint_period_in_dumps>
        <integer_value rank="0">140</integer_value>
      </checkpoint_period_in_dumps>
    </checkpointing>
    <stat/>
    <detectors>
      <static_detector name="Max">
        <location>
          <real_value rank="1" dim1="dim" shape="3">1. 99. -10</real_value>
        </location>
      </static_detector>
      <static_detector name="Min">
        <location>
          <real_value rank="1" dim1="dim" shape="3">99. 1. -10.</real_value>
        </location>
      </static_detector>
      <fail_outside_domain/>
    </detectors>
  </io>
  <timestepping>
    <current_time>
      <real_value rank="0">0</real_value>
      <comment>80 Days</comment>
    </current_time>
    <timestep>
      <real_value rank="0">900</real_value>
    </timestep>
    <finish_time>
      <real_value rank="0">172800</real_value>
      <comment>2  days</comment>
    </finish_time>
    <nonlinear_iterations>
      <integer_value rank="0">2</integer_value>
    </nonlinear_iterations>
  </timestepping>
  <physical_parameters>
    <gravity>
      <magnitude>
        <real_value rank="0">9.8</real_value>
      </magnitude>
      <vector_field name="GravityDirection" rank="1">
        <prescribed>
          <mesh name="CoordinateMesh"/>
          <value name="WholeMesh">
            <constant>
              <real_value rank="1" dim1="dim" shape="3">0.0 0.0 -1.0</real_value>
            </constant>
          </value>
          <output/>
          <stat>
            <include_in_stat/>
          </stat>
          <detectors>
            <exclude_from_detectors/>
          </detectors>
          <particles>
            <exclude_from_particles/>
          </particles>
        </prescribed>
      </vector_field>
    </gravity>
  </physical_parameters>
  <material_phase name="water">
    <vector_field rank="1" name="Velocity">
      <prescribed>
        <mesh name="VelocityMesh"/>
        <value name="WholeMesh">
          <constant>
            <real_value rank="1" dim1="dim" shape="3">1 1 1</real_value>
          </constant>
        </value>
        <output/>
        <stat>
          <include_in_stat/>
        </stat>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
      </prescribed>
    </vector_field>
    <scalar_field rank="0" name="Phytoplankton">
      <prognostic>
        <mesh name="VelocityMesh"/>
        <equation name="AdvectionDiffusion"/>
        <spatial_discretisation>
          <control_volumes>
            <face_value name="FiniteElement">
              <only_sinking_velocity/>
              <limit_face_value>
                <limiter name="Sweby"/>
              </limit_face_value>
            </face_value>
            <diffusion_scheme name="ElementGradient"/>
          </control_volumes>
          <conservative_advection>
            <real_value rank="0">1</real_value>
          </conservative_advection>
        </spatial_discretisation>
        <temporal_discretisation>
          <theta>
            <real_value rank="0">0.5</real_value>
          </theta>
        </temporal_discretisation>
        <solver>
          <iterative_method name="gmres">
            <restart>
              <integer_value rank="0">30</integer_value>
            </restart>
          </iterative_method>
          <preconditioner name="sor"/>
          <relative_error>
            <real_value rank="0">1.0e-7</real_value>
          </relative_error>
          <max_iterations>
            <integer_value rank="0">3000</integer_value>
          </max_iterations>
          <never_ignore_solver_failures/>
          <diagnostics>
            <monitors/>
          </diagnostics>
        </solver>
        <initial_condition name="WholeMesh">
          <python>
            <string_value type="code" language="python" lines="20">def val(X,t):
        if (abs(X[2]) &lt; 300):
                return 1
        else:
                return 0</string_value>
          </python>
        </initial_condition>
        <boundary_conditions name="NoFlux">
          <surface_ids>
            <integer_value rank="1" shape="2">111 333</integer_value>
          </surface_ids>
          <type name="zero_flux"/>
        </boundary_conditions>
        <scalar_field name="Source" rank="0">
          <diagnostic>
            <algorithm name="Internal" material_phase_support="multiple"/>
            <output/>
            <stat/>
            <detectors>
              <include_in_detectors/>
            </detectors>
            <particles>
              <exclude_from_particles/>
            </particles>
          </diagnostic>
        </scalar_field>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
        <adaptivity_options>
          <relative_measure>
            <scalar_field rank="0" name="InterpolationErrorBound">
              <prescribed>
                <value name="WholeMesh">
                  <constant>
                    <real_value rank="0">0.01</real_value>
                  </constant>
                </value>
                <output/>
                <stat/>
                <detectors>
                  <exclude_from_detectors/>
                </detectors>
                <particles>
                  <exclude_from_particles/>
                </particles>
              </prescribed>
            </scalar_field>
            <tolerance>
              <real_value rank="0">1e-6</real_value>
            </tolerance>
          </relative_measure>
        </adaptivity_options>
        <galerkin_projection>
          <continuous>
            <bounded name="Diffuse">
              <boundedness_iterations>
                <integer_value rank="0">10000</integer_value>
              </boundedness_iterations>
            </bounded>
            <solver>
              <iterative_method name="cg"/>
              <preconditioner name="sor"/>
              <relative_error>
                <real_value rank="0">1e-7</real_value>
              </relative_error>
              <max_iterations>
                <integer_value rank="0">3000</integer_value>
              </max_iterations>
              <never_ignore_solver_failures/>
              <diagnostics>
                <monitors/>
              </diagnostics>
            </solver>
          </continuous>
        </galerkin_projection>
      </prognostic>
    </scalar_field>
    <scalar_field rank="0" name="Zooplankton">
      <prognostic>
        <mesh name="VelocityMesh"/>
        <equation name="AdvectionDiffusion"/>
        <spatial_discretisation>
          <control_volumes>
            <face_value name="FiniteElement">
              <only_sinking_velocity/>
              <limit_face_value>
                <limiter name="Sweby"/>
              </limit_face_value>
            </face_value>
            <diffusion_scheme name="ElementGradient"/>
          </control_volumes>
          <conservative_advection>
            <real_value rank="0">1</real_value>
          </conservative_advection>
        </spatial_discretisation>
        <temporal_discretisation>
          <theta>
            <real_value rank="0">0.5</real_value>
          </theta>
        </temporal_discretisation>
        <solver>
          <iterative_method name="gmres">
            <restart>
              <integer_value rank="0">30</integer_value>
            </restart>
          </iterative_method>
          <preconditioner name="sor"/>
          <relative_error>
            <real_value rank="0">0.1e-7</real_value>
          </relative_error>
          <max_iterations>
            <integer_value rank="0">3000</integer_value>
          </max_iterations>
          <never_ignore_solver_failures/>
          <diagnostics>
            <monitors/>
          </diagnostics>
        </solver>
        <initial_condition name="WholeMesh">
          <python>
            <string_value type="code" language="python" lines="20">def val(X,t):
        if (abs(X[2]) &lt; 300):
                return 1
        else:
                return 0</string_value>
          </python>
        </initial_condition>
        <boundary_conditions name="Noflux">
          <surface_ids>
            <integer_value rank="1" shape="2">111 333</integer_value>
          </surface_ids>
          <type name="zero_flux"/>
        </boundary_conditions>
        <scalar_field name="Source" rank="0">
          <diagnostic>
            <algorithm name="Internal" material_phase_support="multiple"/>
            <output/>
            <stat/>
            <detectors>
              <include_in_detectors/>
            </detectors>
            <particles>
              <exclude_from_particles/>
            </particles>
          </diagnostic>
        </scalar_field>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
        <galerkin_projection>
          <continuous>
            <bounded name="Diffuse">
              <boundedness_iterations>
                <integer_value rank="0">10000</integer_value>
              </boundedness_iterations>
            </bounded>
            <solver>
              <iterative_method name="cg"/>
              <preconditioner name="sor"/>
              <relative_error>
                <real_value rank="0">1e-7</real_value>
              </relative_error>
              <max_iterations>
                <integer_value rank="0">3000</integer_value>
              </max_iterations>
              <never_ignore_solver_failures/>
              <diagnostics>
                <monitors/>
              </diagnostics>
            </solver>
          </continuous>
        </galerkin_projection>
      </prognostic>
    </scalar_field>
    <scalar_field rank="0" name="Nutrient">
      <prognostic>
        <mesh name="VelocityMesh"/>
        <equation name="AdvectionDiffusion"/>
        <spatial_discretisation>
          <control_volumes>
            <face_value name="FiniteElement">
              <only_sinking_velocity/>
              <limit_face_value>
                <limiter name="Sweby"/>
              </limit_face_value>
            </face_value>
            <diffusion_scheme name="ElementGradient"/>
          </control_volumes>
          <conservative_advection>
            <real_value rank="0">0.5</real_value>
          </conservative_advection>
        </spatial_discretisation>
        <temporal_discretisation>
          <theta>
            <real_value rank="0">0.5</real_value>
          </theta>
        </temporal_discretisation>
        <solver>
          <iterative_method name="gmres">
            <restart>
              <integer_value rank="0">30</integer_value>
            </restart>
          </iterative_method>
          <preconditioner name="sor"/>
          <relative_error>
            <real_value rank="0">1.e-7</real_value>
          </relative_error>
          <max_iterations>
            <integer_value rank="0">3000</integer_value>
          </max_iterations>
          <never_ignore_solver_failures/>
          <diagnostics>
            <monitors/>
          </diagnostics>
        </solver>
        <initial_condition name="WholeMesh">
          <constant>
            <real_value rank="0">4</real_value>
          </constant>
        </initial_condition>
        <boundary_conditions name="NoFlux">
          <surface_ids>
            <integer_value rank="1" shape="2">111 333</integer_value>
          </surface_ids>
          <type name="zero_flux"/>
        </boundary_conditions>
        <scalar_field name="Source" rank="0">
          <diagnostic>
            <algorithm name="Internal" material_phase_support="multiple"/>
            <output/>
            <stat/>
            <detectors>
              <include_in_detectors/>
            </detectors>
            <particles>
              <exclude_from_particles/>
            </particles>
          </diagnostic>
        </scalar_field>
        <scalar_field name="Absorption" rank="0">
          <diagnostic>
            <algorithm name="Internal" material_phase_support="multiple"/>
            <output/>
            <stat/>
            <detectors>
              <include_in_detectors/>
            </detectors>
            <particles>
              <exclude_from_particles/>
            </particles>
          </diagnostic>
        </scalar_field>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
        <galerkin_projection>
          <continuous>
            <bounded name="Diffuse">
              <boundedness_iterations>
                <integer_value rank="0">10000</integer_value>
              </boundedness_iterations>
            </bounded>
            <solver>
              <iterative_method name="cg"/>
              <preconditioner name="sor"/>
              <relative_error>
                <real_value rank="0">1e-7</real_value>
              </relative_error>
              <max_iterations>
                <integer_value rank="0">3000</integer_value>
              </max_iterations>
              <never_ignore_solver_failures/>
              <diagnostics>
                <monitors/>
              </diagnostics>
            </solver>
          </continuous>
        </galerkin_projection>
      </prognostic>
    </scalar_field>
    <scalar_field rank="0" name="Detritus">
      <prognostic>
        <mesh name="VelocityMesh"/>
        <equation name="AdvectionDiffusion"/>
        <spatial_discretisation>
          <control_volumes>
            <face_value name="FiniteElement">
              <only_sinking_velocity/>
              <limit_face_value>
                <limiter name="Sweby"/>
              </limit_face_value>
            </face_value>
            <diffusion_scheme name="ElementGradient"/>
          </control_volumes>
          <conservative_advection>
            <real_value rank="0">1</real_value>
          </conservative_advection>
        </spatial_discretisation>
        <temporal_discretisation>
          <theta>
            <real_value rank="0">0.5</real_value>
          </theta>
        </temporal_discretisation>
        <solver>
          <iterative_method name="gmres">
            <restart>
              <integer_value rank="0">30</integer_value>
            </restart>
          </iterative_method>
          <preconditioner name="sor"/>
          <relative_error>
            <real_value rank="0">1.0e-7</real_value>
          </relative_error>
          <max_iterations>
            <integer_value rank="0">3000</integer_value>
          </max_iterations>
          <never_ignore_solver_failures/>
          <diagnostics>
            <monitors/>
          </diagnostics>
        </solver>
        <initial_condition name="WholeMesh">
          <python>
            <string_value type="code" language="python" lines="20">def val(X,t):
        if (abs(X[2]) &lt; 300):
                return 0.1
        else:
                return 0</string_value>
          </python>
        </initial_condition>
        <boundary_conditions name="NoFlux">
          <surface_ids>
            <integer_value rank="1" shape="2">111 333</integer_value>
          </surface_ids>
          <type name="zero_flux"/>
        </boundary_conditions>
        <scalar_field name="Source" rank="0">
          <diagnostic>
            <algorithm name="Internal" material_phase_support="multiple"/>
            <output/>
            <stat/>
            <detectors>
              <include_in_detectors/>
            </detectors>
            <particles>
              <exclude_from_particles/>
            </particles>
          </diagnostic>
        </scalar_field>
        <scalar_field name="SinkingVelocity" rank="0">
          <prescribed>
            <mesh name="VelocityMesh"/>
            <value name="WholeMesh">
              <python>
                <string_value type="code" language="python" lines="20">def val(X,t):
	if (X[2]&gt;-1000):
		return 0.001
	elif(X[2]&gt;-2000):
		return 0.001*(X[2]+2000)/1000.0
	else:
		return 0.0</string_value>
              </python>
            </value>
            <output/>
            <stat/>
            <detectors>
              <exclude_from_detectors/>
            </detectors>
            <particles>
              <exclude_from_particles/>
            </particles>
          </prescribed>
        </scalar_field>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
        <adaptivity_options>
          <relative_measure>
            <scalar_field rank="0" name="InterpolationErrorBound">
              <prescribed>
                <value name="WholeMesh">
                  <constant>
                    <real_value rank="0">0.01</real_value>
                  </constant>
                </value>
                <output/>
                <stat/>
                <detectors>
                  <exclude_from_detectors/>
                </detectors>
                <particles>
                  <exclude_from_particles/>
                </particles>
              </prescribed>
            </scalar_field>
            <tolerance>
              <real_value rank="0">1e-6</real_value>
            </tolerance>
          </relative_measure>
        </adaptivity_options>
        <galerkin_projection>
          <continuous>
            <bounded name="Diffuse">
              <boundedness_iterations>
                <integer_value rank="0">10000</integer_value>
              </boundedness_iterations>
            </bounded>
            <solver>
              <iterative_method name="cg"/>
              <preconditioner name="sor"/>
              <relative_error>
                <real_value rank="0">1e-7</real_value>
              </relative_error>
              <max_iterations>
                <integer_value rank="0">3000</integer_value>
              </max_iterations>
              <never_ignore_solver_failures/>
              <diagnostics>
                <monitors/>
              </diagnostics>
            </solver>
          </continuous>
        </galerkin_projection>
      </prognostic>
    </scalar_field>
    <scalar_field rank="0" name="PrimaryProduction">
      <diagnostic>
        <algorithm name="Internal" material_phase_support="multiple"/>
        <mesh name="VelocityMesh"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <scalar_field rank="0" name="PhytoplanktonGrazing">
      <diagnostic>
        <algorithm name="Internal" material_phase_support="multiple"/>
        <mesh name="VelocityMesh"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <scalar_field rank="0" name="TotalBiology">
      <diagnostic>
        <algorithm name="scalar_python_diagnostic" material_phase_support="single">
          <string_value type="code" language="python" lines="20">D=state.scalar_fields["Detritus"]
P=state.scalar_fields["Phytoplankton"]
Z=state.scalar_fields["Zooplankton"]
N=state.scalar_fields["Nutrient"]

for node in range(field.node_count):
	field.set(node, P.node_val(node) + N.node_val(node) + Z.node_val(node) + D.node_val(node))</string_value>
          <depends>
            <string_value lines="1">Phytoplankton,Zooplankton,Detritus,Nutrient</string_value>
          </depends>
        </algorithm>
        <mesh name="VelocityMesh"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
  </material_phase>
  <mesh_adaptivity>
    <hr_adaptivity>
      <period>
        <real_value rank="0">9000</real_value>
      </period>
      <maximum_number_of_nodes>
        <integer_value rank="0">10000</integer_value>
      </maximum_number_of_nodes>
      <enable_gradation>
        <gradation_parameter>
          <real_value rank="0">2.0</real_value>
        </gradation_parameter>
      </enable_gradation>
      <tensor_field name="MinimumEdgeLengths">
        <anisotropic_symmetric>
          <constant>
            <real_value symmetric="true" rank="2" dim1="dim" dim2="dim" shape="3 3">100 0 0 0 100 0 0 0 1</real_value>
          </constant>
        </anisotropic_symmetric>
      </tensor_field>
      <tensor_field name="MaximumEdgeLengths">
        <anisotropic_symmetric>
          <constant>
            <real_value symmetric="true" rank="2" dim1="dim" dim2="dim" shape="3 3">100 0 0 0 100 0 0 0 50</real_value>
          </constant>
        </anisotropic_symmetric>
      </tensor_field>
      <vertically_structured_adaptivity>
        <inhomogenous_vertical_resolution>
          <adapt_in_vertical_only/>
        </inhomogenous_vertical_resolution>
        <vertically_align_metric/>
      </vertically_structured_adaptivity>
    </hr_adaptivity>
  </mesh_adaptivity>
  <ocean_biology>
    <pznd>
      <source_and_sink_algorithm>
        <string_value type="code" language="python" lines="20">import fluidity.ocean_biology as biology

day=1./(3600*24)

p={}
p["alpha"]=0.015*day
p["beta"]=0.75
p["gamma"]=0.5
p["g"]=1*day
p["k_N"]=0.5
p["k"]=0.5
p["mu_P"]=0.1*day
#p["mu_P"]=0.0
p["mu_Z"]=0.2*day
p["mu_D"]=0.05*day
p["p_P"]=0.75
p["v"]=1.5*day

biology.pznd(state, p)</string_value>
      </source_and_sink_algorithm>
      <scalar_field rank="0" name="PhotosyntheticRadiation">
        <prognostic>
          <mesh name="VelocityMesh"/>
          <equation name="PhotosyntheticRadiation"/>
          <spatial_discretisation>
            <discontinuous_galerkin/>
          </spatial_discretisation>
          <solver>
            <iterative_method name="gmres">
              <restart>
                <integer_value rank="0">30</integer_value>
              </restart>
            </iterative_method>
            <preconditioner name="none"/>
            <relative_error>
              <real_value rank="0">1.0e-5</real_value>
            </relative_error>
            <max_iterations>
              <integer_value rank="0">3000</integer_value>
            </max_iterations>
            <never_ignore_solver_failures/>
            <diagnostics>
              <monitors/>
            </diagnostics>
          </solver>
          <exclude_from_checkpointing/>
          <absorption_coefficients>
            <water>
              <real_value rank="0">0.04</real_value>
              <comment>0.04</comment>
            </water>
            <phytoplankton>
              <real_value rank="0">0.03</real_value>
              <comment>0.03</comment>
            </phytoplankton>
          </absorption_coefficients>
          <boundary_conditions name="SurfaceLight">
            <surface_ids>
              <integer_value rank="1" shape="1">111</integer_value>
            </surface_ids>
            <type name="dirichlet">
              <apply_weakly/>
              <python>
                <string_value type="code" language="python" lines="20">def val(X,t):
	from math import cos, pi
	day=3600*24.
	year=365.*day
	
	light=100*(1-cos(2*pi*t/year))+10
	return light</string_value>
              </python>
            </type>
          </boundary_conditions>
          <output/>
          <stat/>
          <convergence>
            <include_in_convergence/>
          </convergence>
          <detectors>
            <include_in_detectors/>
          </detectors>
          <steady_state>
            <include_in_steady_state/>
          </steady_state>
        </prognostic>
      </scalar_field>
    </pznd>
  </ocean_biology>
</fluidity_options>
