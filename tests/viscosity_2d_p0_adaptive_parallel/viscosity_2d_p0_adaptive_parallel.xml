<?xml version='1.0' encoding='UTF-8'?>
<testproblem>
  <name>heat_2d_dg</name>
  <owner userid="cwilson"/>
  <tags>flml zoltan</tags>
  <problem_definition length="long" nprocs="2">
    <command_line>mpiexec flredecomp -i 1 -o 2 -v -l heat heat_flredecomp &amp;&amp;
mpiexec fluidity -v2 -l heat_flredecomp.flml </command_line>
    <!-- Two dimensional diffusion only problem. -->
  </problem_definition>
  <variables>
    <variable name="finish_time" language="python">
from fluidity_tools import stat_parser
s = stat_parser("heat.stat")
finish_time = s["ElapsedTime"]["value"][-1]
    </variable>
    <variable name="no_nodes" language="python">
from fluidity_tools import stat_parser
s = stat_parser("heat.stat")
no_nodes = s["CoordinateMesh"]["nodes"]
    </variable>
    <variable name="tracer1_integral" language="python">
from fluidity_tools import stat_parser
s = stat_parser("heat.stat")
tracer1_integral = s["Water"]["Velocity%1"]["integral"]
    </variable>
    <variable name="tracer1_error" language="python">
from fluidity_tools import stat_parser
s = stat_parser("heat.stat")
tracer1_error = s["Water"]["VectorAbsoluteDifference%1"]["max"]
    </variable>
    <variable name="tracer2_integral" language="python">
from fluidity_tools import stat_parser
s = stat_parser("heat.stat")
tracer2_integral = s["Water"]["Velocity%1"]["integral"]
    </variable>
    <variable name="tracer2_error" language="python">
from fluidity_tools import stat_parser
s = stat_parser("heat.stat")
tracer2_error = s["Water"]["VectorAbsoluteDifference%2"]["max"]
    </variable>
  </variables>
  <pass_tests>
    <test name="finish time is 10000" language="python">
assert abs(finish_time - 10000) &lt; 1e-9
    </test>
    <test name="no. nodes is initially 220" language="python">
assert abs(no_nodes[0] - 220) &lt; 1e-9
    </test>
    <test name="no. nodes is constant" language="python">
import numpy
assert(numpy.all(abs(no_nodes[1:] - no_nodes[0]) &lt; 1e-9))
    </test>
    <test name="tracer1 integral is initially 1.0" language="python">
assert abs(tracer1_integral[0] - 1.0) &lt; 1e-9
    </test>
    <test name="tracer1 integral is constant" language="python">
import numpy
assert(numpy.all(abs(tracer1_integral[1:] - tracer1_integral[0]) &lt; 1e-9))
    </test>
    <test name="tracer1 error is initially less than 0.01" language="python">
assert tracer1_error[0] &lt; 0.01 
    </test>
    <test name="tracer1 error less than 0.01" language="python">
import numpy
assert(numpy.all(abs(tracer1_error[1:]-tracer1_error[0]) &lt; 1.e-9)) 
    </test>
    <test name="tracer2 integral is initially 1.0" language="python">
assert abs(tracer2_integral[0] - 1.0) &lt; 1e-9
    </test>
    <test name="tracer2 integral is constant" language="python">
import numpy
assert(numpy.all(abs(tracer2_integral[1:] - tracer2_integral[0]) &lt; 1e-9))
    </test>
    <test name="tracer2 error is initially less than 0.01" language="python">
assert tracer2_error[0] &lt; 0.01 
    </test>
    <test name="tracer2 error less than 0.01" language="python">
import numpy
assert(numpy.all(abs(tracer2_error[1:]-tracer2_error[0]) &lt; 1.e-9)) 
    </test>
  </pass_tests>
  <warn_tests>
  </warn_tests>
</testproblem>
