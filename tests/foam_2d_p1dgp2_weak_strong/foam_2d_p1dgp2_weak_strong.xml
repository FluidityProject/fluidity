<?xml version='1.0' encoding='UTF-8'?>
<testproblem>
  <name>2d square unstructured mesh p1dgp2 foam drainage test with weak bcs for velocity and strong for pressure</name>
  <owner userid="pbritopa"/>
  <tags>flml</tags>
  <problem_definition length="medium" nprocs="1">
    <command_line>fluidity drainage_a.flml -l -v1 &gt; drainage_a.log</command_line>
  </problem_definition>
  <variables>
    <variable name="solvers_converged" language="python">
import os
files = os.listdir("./")
solvers_converged = not "matrixdump" in files and not "matrixdump.info" in files
    </variable>
    <variable name="a_error_rho" language="python">
from fluidity_tools import stat_parser as stat
from math import log

a_error_rho = stat("drainage_a.stat")["foam"]["ScalarAbsoluteDifference"]["l2norm"][-1]

a_error_inf_rho = stat("drainage_a.stat")["foam"]["ScalarAbsoluteDifference"]["max"][-1]

print(a_error_rho)
print(a_error_inf_rho)
</variable>
    <variable name="a_error_vel" language="python">
from fluidity_tools import stat_parser as stat
from math import log

a_error_x = stat("drainage_a.stat")["foam"]["VectorAbsoluteDifference%1"]["l2norm"][-1]
a_error_y = stat("drainage_a.stat")["foam"]["VectorAbsoluteDifference%2"]["l2norm"][-1]

a_error_inf_x = stat("drainage_a.stat")["foam"]["VectorAbsoluteDifference%1"]["max"][-1]
a_error_inf_y = stat("drainage_a.stat")["foam"]["VectorAbsoluteDifference%2"]["max"][-1]

print(a_error_x)
print(a_error_y)

print(a_error_inf_x)
print(a_error_inf_y)

a_error_vel = [[a_error_x, a_error_inf_x], [a_error_y, a_error_inf_y]]
</variable>
    <variable name="a_finish_time" language="python">
from fluidity_tools import stat_parser as stat
a_finish_time = stat("drainage_a.stat")["ElapsedTime"]["value"][-1]

print(a_finish_time)
</variable>
    <variable name="a_final_change_rho" language="python">
import vtktools
from fluidity_tools import stat_parser as stat
vtu = vtktools.vtu("drainage_a_1.vtu")
dt = stat("drainage_a.stat")["dt"]["value"][-1]
a_final_change_rho = max(abs(vtu.GetScalarField("Density")-vtu.GetScalarField("OldDensity"))/dt)

print(a_final_change_rho)
</variable>
    <variable name="a_final_change_vel" language="python">
import vtktools
from fluidity_tools import stat_parser as stat
vtu = vtktools.vtu("drainage_a_1.vtu")
dt = stat("drainage_a.stat")["dt"]["value"][-1]
a_final_change_vel = max(max(abs(vtu.GetVectorField("Velocity")[:,0]-vtu.GetVectorField("OldVelocity")[:,0])/dt), max(abs(vtu.GetVectorField("Velocity")[:,1]-vtu.GetVectorField("OldVelocity")[:,1])/dt), max(abs(vtu.GetVectorField("Velocity")[:,2]-vtu.GetVectorField("OldVelocity")[:,2])/dt))
print(a_final_change_vel)
</variable>
  </variables>
  <pass_tests>
    <test name="Solvers converged" language="python">
      assert(solvers_converged)
    </test>
    <test name="ss_reached_in_a_rho" language="python">assert(a_final_change_rho &lt; 1.E-8)
    </test>
    <test name="ss_reached_in_a_vel" language="python">assert(a_final_change_vel &lt; 1.E-09)
    </test>
     <test name="a_error_rho: L2 of absolute difference between numerical and analytical between 4.0E-05 and 4.5E-05" language="python">assert(abs(a_error_rho-4.25E-05) &lt; 2.5E-6)
    </test>
    <test name="a_error_vel_y: L2 order between 9.5E-07 and 1.5E-06" language="python">assert(abs(a_error_vel[1][0]-1.0E-6) &lt; 1.0E-07)
    </test>
  </pass_tests>
  <warn_tests/>
</testproblem>
