<?xml version='1.0' encoding='UTF-8'?>
<testproblem>
  <name>p1 burgers equation spatial convergence test</name>
  <owner userid="cwilson" />
  <tags>flml</tags>
  <problem_definition length="long" nprocs="1">
    <command_line>mpiexec fluidity  MMS_A.flml &gt; MMS_A.log; mpiexec fluidity  MMS_A2.flml &gt; MMS_A2.log; mpiexec fluidity  MMS_B.flml &gt; MMS_B.log; mpiexec fluidity  MMS_C.flml &gt; MMS_C.log; mpiexec fluidity  MMS_D.flml &gt; MMS_D.log</command_line>
  </problem_definition>
  <variables>
    <variable name="ab_convergence_gal_stat" language="python">
from fluidity_tools import stat_parser as stat
from math import log

a_error_x = stat("MMS_A.stat")["Burgers"]["AbsoluteDifference%1"]["l2norm"][-1]
b_error_x = stat("MMS_B.stat")["Burgers"]["AbsoluteDifference%1"]["l2norm"][-1]
a_error_y = stat("MMS_A.stat")["Burgers"]["AbsoluteDifference%2"]["l2norm"][-1]
b_error_y = stat("MMS_B.stat")["Burgers"]["AbsoluteDifference%2"]["l2norm"][-1]

a_error_inf_x = stat("MMS_A.stat")["Burgers"]["AbsoluteDifference%1"]["max"][-1]
b_error_inf_x = stat("MMS_B.stat")["Burgers"]["AbsoluteDifference%1"]["max"][-1]
a_error_inf_y = stat("MMS_A.stat")["Burgers"]["AbsoluteDifference%2"]["max"][-1]
b_error_inf_y = stat("MMS_B.stat")["Burgers"]["AbsoluteDifference%2"]["max"][-1]

print(a_error_x)
print(b_error_x)
print(a_error_y)
print(b_error_y)

print(a_error_inf_x)
print(b_error_inf_x)
print(a_error_inf_y)
print(b_error_inf_y)

ab_ratio_x = a_error_x / b_error_x
ab_ratio_y = a_error_y / b_error_y
ab_ratio_inf_x = a_error_inf_x / b_error_inf_x
ab_ratio_inf_y = a_error_inf_y / b_error_inf_y
ab_convergence_gal_stat = [[log(ab_ratio_x, 2), log(ab_ratio_inf_x, 2)], [log(ab_ratio_y, 2), log(ab_ratio_inf_y, 2)]]
    </variable>
    <variable name="aa2_convergence_gal_stat" language="python">
from fluidity_tools import stat_parser as stat
from math import log

a_error_x = stat("MMS_A.stat")["Burgers"]["AbsoluteDifference%1"]["l2norm"][-1]
a2_error_x = stat("MMS_A2.stat")["Burgers"]["AbsoluteDifference%1"]["l2norm"][-1]
a_error_y = stat("MMS_A.stat")["Burgers"]["AbsoluteDifference%2"]["l2norm"][-1]
a2_error_y = stat("MMS_A2.stat")["Burgers"]["AbsoluteDifference%2"]["l2norm"][-1]

a_error_inf_x = stat("MMS_A.stat")["Burgers"]["AbsoluteDifference%1"]["max"][-1]
a2_error_inf_x = stat("MMS_A2.stat")["Burgers"]["AbsoluteDifference%1"]["max"][-1]
a_error_inf_y = stat("MMS_A.stat")["Burgers"]["AbsoluteDifference%2"]["max"][-1]
a2_error_inf_y = stat("MMS_A2.stat")["Burgers"]["AbsoluteDifference%2"]["max"][-1]

print(a_error_x)
print(a2_error_x)
print(a_error_y)
print(a2_error_y)

print(a_error_inf_x)
print(a2_error_inf_x)
print(a_error_inf_y)
print(a2_error_inf_y)

aa2_ratio_x = a_error_x / a2_error_x
aa2_ratio_y = a_error_y / a2_error_y
aa2_ratio_inf_x = a_error_inf_x / a2_error_inf_x
aa2_ratio_inf_y = a_error_inf_y / a2_error_inf_y
aa2_convergence_gal_stat = [[log(aa2_ratio_x, 2), log(aa2_ratio_inf_x, 2)], [log(aa2_ratio_y, 2), log(aa2_ratio_inf_y, 2)]]
    </variable>
    <variable name="bc_convergence_gal_stat" language="python">
from fluidity_tools import stat_parser as stat
from math import log

b_error_x = stat("MMS_B.stat")["Burgers"]["AbsoluteDifference%1"]["l2norm"][-1]
c_error_x = stat("MMS_C.stat")["Burgers"]["AbsoluteDifference%1"]["l2norm"][-1]
b_error_y = stat("MMS_B.stat")["Burgers"]["AbsoluteDifference%2"]["l2norm"][-1]
c_error_y = stat("MMS_C.stat")["Burgers"]["AbsoluteDifference%2"]["l2norm"][-1]

b_error_inf_x = stat("MMS_B.stat")["Burgers"]["AbsoluteDifference%1"]["max"][-1]
c_error_inf_x = stat("MMS_C.stat")["Burgers"]["AbsoluteDifference%1"]["max"][-1]
b_error_inf_y = stat("MMS_B.stat")["Burgers"]["AbsoluteDifference%2"]["max"][-1]
c_error_inf_y = stat("MMS_C.stat")["Burgers"]["AbsoluteDifference%2"]["max"][-1]

print(b_error_x)
print(c_error_x)
print(b_error_y)
print(c_error_y)

print(b_error_inf_x)
print(c_error_inf_x)
print(b_error_inf_y)
print(c_error_inf_y)

bc_ratio_x = b_error_x / c_error_x
bc_ratio_y = b_error_y / c_error_y
bc_ratio_inf_x = b_error_inf_x / c_error_inf_x
bc_ratio_inf_y = b_error_inf_y / c_error_inf_y
bc_convergence_gal_stat = [[log(bc_ratio_x, 2), log(bc_ratio_inf_x, 2)], [log(bc_ratio_y, 2), log(bc_ratio_inf_y, 2)]]
    </variable>
    <variable name="cd_convergence_gal_stat" language="python">
from fluidity_tools import stat_parser as stat
from math import log

c_error_x = stat("MMS_C.stat")["Burgers"]["AbsoluteDifference%1"]["l2norm"][-1]
d_error_x = stat("MMS_D.stat")["Burgers"]["AbsoluteDifference%1"]["l2norm"][-1]
c_error_y = stat("MMS_C.stat")["Burgers"]["AbsoluteDifference%2"]["l2norm"][-1]
d_error_y = stat("MMS_D.stat")["Burgers"]["AbsoluteDifference%2"]["l2norm"][-1]

c_error_inf_x = stat("MMS_C.stat")["Burgers"]["AbsoluteDifference%1"]["max"][-1]
d_error_inf_x = stat("MMS_D.stat")["Burgers"]["AbsoluteDifference%1"]["max"][-1]
c_error_inf_y = stat("MMS_C.stat")["Burgers"]["AbsoluteDifference%2"]["max"][-1]
d_error_inf_y = stat("MMS_D.stat")["Burgers"]["AbsoluteDifference%2"]["max"][-1]

print(c_error_x)
print(d_error_x)
print(c_error_y)
print(d_error_y)

print(c_error_inf_x)
print(d_error_inf_x)
print(c_error_inf_y)
print(d_error_inf_y)

cd_ratio_x = c_error_x / d_error_x
cd_ratio_y = c_error_y / d_error_y
cd_ratio_inf_x = c_error_inf_x / d_error_inf_x
cd_ratio_inf_y = c_error_inf_y / d_error_inf_y
cd_convergence_gal_stat = [[log(cd_ratio_x, 2), log(cd_ratio_inf_x, 2)], [log(cd_ratio_y, 2), log(cd_ratio_inf_y, 2)]]
    </variable>

   <variable name="a_finish_time" language="python">
from fluidity_tools import stat_parser as stat
a_finish_time = stat("MMS_A.stat")["ElapsedTime"]["value"][-1]
    </variable>
   <variable name="a2_finish_time" language="python">
from fluidity_tools import stat_parser as stat
a2_finish_time = stat("MMS_A2.stat")["ElapsedTime"]["value"][-1]
    </variable>
    <variable name="b_finish_time" language="python">
from fluidity_tools import stat_parser as stat
b_finish_time = stat("MMS_B.stat")["ElapsedTime"]["value"][-1]
    </variable>
    <variable name="c_finish_time" language="python">
from fluidity_tools import stat_parser as stat
c_finish_time = stat("MMS_C.stat")["ElapsedTime"]["value"][-1]
    </variable>
    <variable name="d_finish_time" language="python">
from fluidity_tools import stat_parser as stat
d_finish_time = stat("MMS_D.stat")["ElapsedTime"]["value"][-1]
    </variable>

    <variable name="a_final_change" language="python">
import vtktools
from fluidity_tools import stat_parser as stat
vtu = vtktools.vtu("MMS_A_1.vtu")
dt = stat("MMS_A.stat")["dt"]["value"][-1]
a_final_change = max(max(abs(vtu.GetVectorField("Velocity")[:,0]-vtu.GetVectorField("OldVelocity")[:,0])/dt), max(abs(vtu.GetVectorField("Velocity")[:,1]-vtu.GetVectorField("OldVelocity")[:,1])/dt))
    </variable>
    <variable name="a2_final_change" language="python">
import vtktools
from fluidity_tools import stat_parser as stat
vtu = vtktools.vtu("MMS_A2_1.vtu")
dt = stat("MMS_A2.stat")["dt"]["value"][-1]
a2_final_change = max(max(abs(vtu.GetVectorField("Velocity")[:,0]-vtu.GetVectorField("OldVelocity")[:,0])/dt), max(abs(vtu.GetVectorField("Velocity")[:,1]-vtu.GetVectorField("OldVelocity")[:,1])/dt))
    </variable>
    <variable name="b_final_change" language="python">
import vtktools
from fluidity_tools import stat_parser as stat
vtu = vtktools.vtu("MMS_B_1.vtu")
dt = stat("MMS_B.stat")["dt"]["value"][-1]
b_final_change = max(max(abs(vtu.GetVectorField("Velocity")[:,0]-vtu.GetVectorField("OldVelocity")[:,0])/dt), max(abs(vtu.GetVectorField("Velocity")[:,1]-vtu.GetVectorField("OldVelocity")[:,1])/dt))
    </variable>
    <variable name="c_final_change" language="python">
import vtktools
from fluidity_tools import stat_parser as stat
vtu = vtktools.vtu("MMS_C_1.vtu")
dt = stat("MMS_C.stat")["dt"]["value"][-1]
c_final_change = max(max(abs(vtu.GetVectorField("Velocity")[:,0]-vtu.GetVectorField("OldVelocity")[:,0])/dt), max(abs(vtu.GetVectorField("Velocity")[:,1]-vtu.GetVectorField("OldVelocity")[:,1])/dt))
    </variable>
    <variable name="d_final_change" language="python">
import vtktools
from fluidity_tools import stat_parser as stat
vtu = vtktools.vtu("MMS_D_1.vtu")
dt = stat("MMS_D.stat")["dt"]["value"][-1]
d_final_change = max(max(abs(vtu.GetVectorField("Velocity")[:,0]-vtu.GetVectorField("OldVelocity")[:,0])/dt), max(abs(vtu.GetVectorField("Velocity")[:,1]-vtu.GetVectorField("OldVelocity")[:,1])/dt))
    </variable>

  </variables>
  <pass_tests>
    <test name="ab_convergence_x: L2 order in [1.7,2.3]" language="python">
assert(abs(ab_convergence_gal_stat[0][0]-2.0) &lt; 0.3)
    </test>
    <test name="ab_convergence_y: L2 order in [1.7,2.3]" language="python">
assert(abs(ab_convergence_gal_stat[1][0]-2.0) &lt; 0.3)
    </test>
    <test name="aa2_convergence_x: L2 order &gt; 1.95" language="python">
assert(aa2_convergence_gal_stat[0][0] &gt; 1.95)
    </test>
    <test name="aa2_convergence_y: L2 order &gt; 1.95" language="python">
assert(aa2_convergence_gal_stat[1][0] &gt; 1.95)
    </test>
    <test name="bc_convergence_x: L2 order in [1.8,2.2]" language="python">
assert(abs(bc_convergence_gal_stat[0][0]-2.0) &lt; 0.2)
    </test>
    <test name="bc_convergence_y: L2 order in [1.8,2.2]" language="python">
assert(abs(bc_convergence_gal_stat[1][0]-2.0) &lt; 0.2)
    </test>
    <test name="cd_convergence_x: L2 order in [1.8,2.2]" language="python">
assert(abs(cd_convergence_gal_stat[0][0]-2.0) &lt; 0.2)
    </test>
    <test name="cd_convergence_y: L2 order in [1.8,2.2]" language="python">
assert(abs(cd_convergence_gal_stat[1][0]-2.0) &lt; 0.2)
    </test>

    <test name="checking A finished in less than 2.0" language="python">
assert(a_finish_time-2.0 &lt; 1.E-10)
    </test>
    <test name="checking A2 finished in less than 2.0" language="python">
assert(a2_finish_time-2.0 &lt; 1.E-10)
    </test>
    <test name="checking B finished in less than 2.0" language="python">
assert(b_finish_time-2.0 &lt; 1.E-10)
    </test>
    <test name="checking C finished in less than 2.0" language="python">
assert(c_finish_time-2.0 &lt; 1.E-10)
    </test>
    <test name="checking D finished in less than 2.0" language="python">
assert(d_finish_time-2.0 &lt; 1.E-10)
    </test>

    <test name="checking steady state was reached in A" language="python">
assert(a_final_change &lt; 1.E-3)
    </test>
    <test name="checking steady state was reached in A2" language="python">
assert(a2_final_change &lt; 1.E-3)
    </test>
    <test name="checking steady state was reached in B" language="python">
assert(b_final_change &lt; 1.E-3)
    </test>
    <test name="checking steady state was reached in C" language="python">
assert(c_final_change &lt; 1.E-3)
    </test>
    <test name="checking steady state was reached in D" language="python">
assert(d_final_change &lt; 1.E-3)
    </test>

  </pass_tests>
  <warn_tests>
    <test name="aa2_convergence_x: L2 order &gt; 5.0" language="python">
assert(aa2_convergence_gal_stat[0][0] &gt; 5.0)
    </test>
    <test name="aa2_convergence_y: L2 order &gt; 5.0" language="python">
assert(aa2_convergence_gal_stat[1][0] &gt; 5.0)
    </test>
  </warn_tests>
</testproblem>