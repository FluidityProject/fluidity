<?xml version='1.0' encoding='utf-8'?>
<fluidity_options>
  <simulation_name>
    <string_value lines="1">MMS_B</string_value>
  </simulation_name>
  <problem_type>
    <string_value lines="1">fluids</string_value>
  </problem_type>
  <geometry>
    <dimension>
      <integer_value rank="0">2</integer_value>
    </dimension>
    <mesh name="CoordinateMesh">
      <from_file file_name="MMS_B">
        <format name="gmsh"/>
        <stat>
          <include_in_stat/>
        </stat>
      </from_file>
    </mesh>
    <mesh name="VelocityMesh">
      <from_mesh>
        <mesh name="CoordinateMesh"/>
        <stat>
          <exclude_from_stat/>
        </stat>
      </from_mesh>
    </mesh>
    <mesh name="PressureMesh">
      <from_mesh>
        <mesh name="CoordinateMesh"/>
        <stat>
          <exclude_from_stat/>
        </stat>
      </from_mesh>
    </mesh>
    <quadrature>
      <degree>
        <integer_value rank="0">5</integer_value>
      </degree>
      <controlvolume_surface_degree>
        <integer_value rank="0">5</integer_value>
      </controlvolume_surface_degree>
    </quadrature>
  </geometry>
  <io>
    <dump_format>
      <string_value>vtk</string_value>
    </dump_format>
    <dump_period>
      <constant>
        <real_value rank="0">5.0</real_value>
      </constant>
    </dump_period>
    <output_mesh name="VelocityMesh"/>
    <stat/>
  </io>
  <timestepping>
    <current_time>
      <real_value rank="0">0.0</real_value>
    </current_time>
    <timestep>
      <real_value rank="0">0.00092781416026700095</real_value>
      <comment>gives a max cv cfl number of 0.1</comment>
    </timestep>
    <finish_time>
      <real_value rank="0">3.0</real_value>
    </finish_time>
    <steady_state>
      <tolerance>
        <real_value rank="0">1.E-6</real_value>
        <infinity_norm/>
      </tolerance>
      <acceleration_form/>
    </steady_state>
  </timestepping>
  <physical_parameters/>
  <material_phase name="Burgers">
    <equation_of_state>
      <fluids>
        <linear>
          <reference_density>
            <real_value rank="0">1.0</real_value>
          </reference_density>
        </linear>
      </fluids>
    </equation_of_state>
    <scalar_field name="Density" rank="0">
      <diagnostic>
        <algorithm name="Internal" material_phase_support="multiple"/>
        <mesh name="VelocityMesh"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <vector_field name="Velocity" rank="1">
      <prognostic>
        <mesh name="VelocityMesh"/>
        <equation name="LinearMomentum"/>
        <spatial_discretisation>
          <continuous_galerkin>
            <stabilisation>
              <no_stabilisation/>
            </stabilisation>
            <mass_terms/>
            <advection_terms/>
            <stress_terms>
              <tensor_form/>
            </stress_terms>
          </continuous_galerkin>
          <conservative_advection>
            <real_value rank="0">1.0</real_value>
          </conservative_advection>
        </spatial_discretisation>
        <temporal_discretisation>
          <theta>
            <real_value rank="0">0.5</real_value>
          </theta>
          <relaxation>
            <real_value rank="0">0.5</real_value>
          </relaxation>
        </temporal_discretisation>
        <solver>
          <iterative_method name="gmres">
            <restart>
              <integer_value rank="0">30</integer_value>
            </restart>
          </iterative_method>
          <preconditioner name="eisenstat"/>
          <relative_error>
            <real_value rank="0">1.E-10</real_value>
          </relative_error>
          <max_iterations>
            <integer_value rank="0">350</integer_value>
          </max_iterations>
          <never_ignore_solver_failures/>
          <diagnostics>
            <monitors/>
          </diagnostics>
        </solver>
        <initial_condition name="WholeMesh">
          <constant>
            <real_value shape="2" dim1="dim" rank="1">0.0 0.0</real_value>
          </constant>
        </initial_condition>
        <boundary_conditions name="all_sides">
          <surface_ids>
            <integer_value shape="4" rank="1">7 8 9 10</integer_value>
          </surface_ids>
          <type name="dirichlet">
            <align_bc_with_cartesian>
              <x_component>
                <python>
                  <string_value lines="20" type="code" language="python">def val(XX, t):
   from math import sin,cos
   omega = 0;
   epsilon = 0.001;
   u0 = 1.0;
   x = XX[0];
   y = XX[1];
   x2 = x*x;
   y2 = y*y;
   u = u0*(sin(x2+y2+omega*t)+epsilon);
   return u</string_value>
                </python>
              </x_component>
              <y_component>
                <python>
                  <string_value lines="20" type="code" language="python">def val(XX, t):
   from math import sin,cos
   omega = 0;
   epsilon = 0.001;
   v0 = 1.0;
   x = XX[0];
   y = XX[1];
   x2 = x*x;
   y2 = y*y;
   v = v0*(cos(x2+y2+omega*t)+epsilon)
   return v</string_value>
                </python>
              </y_component>
            </align_bc_with_cartesian>
          </type>
        </boundary_conditions>
        <tensor_field name="Viscosity" rank="2">
          <prescribed>
            <value name="WholeMesh">
              <isotropic>
                <constant>
                  <real_value rank="0">0.7</real_value>
                </constant>
              </isotropic>
            </value>
            <output/>
          </prescribed>
        </tensor_field>
        <vector_field name="Source" rank="1">
          <prescribed>
            <value name="WholeMesh">
              <python>
                <string_value lines="20" type="code" language="python">def val(XX, t):
   from math import sin,cos
   omega = 0;
   epsilon = 0.001;
   nu = 0.7;
   adv = 1.0;
   beta = 1.0;
   mass = 1.0;
   u0 = 1.0;
   v0 = 1.0;
   u02 = u0*u0;
   v02 = v0*v0;
   x = XX[0];
   y = XX[1];
   x2 = x*x;
   y2 = y*y;
   Su = adv*(beta*(2*u02*x*cos(y2 + x2 + omega*t)*(sin(y2 + x2 + omega*t) + epsilon) - 2*u0*v0*y*sin(y2 + x2 + omega*t)*(sin(y2 + x2 + omega*t) + epsilon)) + 2*u02*x*cos(y2 + x2 + omega*t)*(sin(y2 + x2 + omega*t) + epsilon) + 2*u0*v0*y*cos(y2 + x2 + omega*t)*(cos(y2 + x2 + omega*t) + epsilon)) - nu*(2*u0*cos(y2 + x2 + omega*t) - 4*u0*y2*sin(y2 + x2 + omega*t)) - nu*(2*u0*cos(y2 + x2 + omega*t) - 4*u0*x2*sin(y2 + x2 + omega*t)) + mass*omega*u0*cos(y2 + x2 + omega*t);
   Sv = adv*(beta*(2*u0*v0*x*cos(y2 + x2 + omega*t)*(cos(y2 + x2 + omega*t) + epsilon) - 2*v02*y*(cos(y2 + x2 + omega*t) + epsilon)*sin(y2 + x2 + omega*t)) - 2*u0*v0*x*sin(y2 + x2 + omega*t)*(sin(y2 + x2 + omega*t) + epsilon) - 2*v02*y*(cos(y2 + x2 + omega*t) + epsilon)*sin(y2 + x2 + omega*t)) - nu*(-2*v0*sin(y2 + x2 + omega*t) - 4*v0*y2*cos(y2 + x2 + omega*t)) - nu*(-2*v0*sin(y2 + x2 + omega*t) - 4*v0*x2*cos(y2 + x2 + omega*t)) - mass*omega*v0*sin(y2 + x2 + omega*t);
   return (Su, Sv)</string_value>
                <comment>u(x,y,t,u0,omega,epsilon,nu,adv,mass,beta) = u0*(sin(x^2+y^2+omega*t)+epsilon)
v(x,y,t,v0,omega,epsilon,nu,adv,mass,beta) = v0*(cos(x^2+y^2+omega*t)+epsilon)
u_t = diff(u,t)
v_t = diff(v,t)
u2 = u^2
v2 = v^2
u2_x = diff(u2,x)
v2_y = diff(v2,y)
uv = u*v
uv_x = diff(uv,x)
uv_y = diff(uv,y)
u_x = diff(u,x)
u_y = diff(u,y)
v_x = diff(v,x)
v_y = diff(v,y)
u_xx = diff(u_x,x)
u_yy = diff(u_y,y)
v_xx = diff(v_x,x)
v_yy = diff(v_y,y)
mass*u_t + adv*(u*u_x+v*u_y + beta*(u*u_x + u*v_y)) - nu*u_xx - nu*u_yy
mass*v_t + adv*(u*v_x+v*v_y + beta*(v*u_x + v*v_y)) - nu*v_xx - nu*v_yy</comment>
              </python>
            </value>
            <output/>
            <stat>
              <include_in_stat/>
            </stat>
            <detectors>
              <exclude_from_detectors/>
            </detectors>
          </prescribed>
        </vector_field>
        <output>
          <include_previous_time_step/>
        </output>
        <stat>
          <include_in_stat/>
          <previous_time_step>
            <exclude_from_stat/>
          </previous_time_step>
          <nonlinear_field>
            <exclude_from_stat/>
          </nonlinear_field>
        </stat>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
        <consistent_interpolation/>
      </prognostic>
    </vector_field>
    <scalar_field name="ControlVolumeCFLNumber" rank="0">
      <diagnostic>
        <algorithm name="Internal" material_phase_support="multiple"/>
        <mesh name="VelocityMesh"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <scalar_field name="CFLNumber" rank="0">
      <diagnostic>
        <algorithm name="Internal" material_phase_support="multiple"/>
        <mesh name="VelocityMesh"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <vector_field name="VelocityAnalytical" rank="1">
      <prescribed>
        <mesh name="VelocityMesh"/>
        <value name="WholeMesh">
          <python>
            <string_value lines="20" type="code" language="python">def val(XX, t):
   from math import sin,cos
   omega = 0;
   epsilon = 0.001;
   u0 = 1.0;
   v0 = 1.0;
   x = XX[0];
   y = XX[1];
   x2 = x*x;
   y2 = y*y;
   u = u0*(sin(x2+y2+omega*t)+epsilon);
   v = v0*(cos(x2+y2+omega*t)+epsilon);
   return (u, v)</string_value>
          </python>
        </value>
        <output/>
        <stat>
          <include_in_stat/>
        </stat>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
      </prescribed>
    </vector_field>
    <vector_field name="AbsoluteDifference" rank="1">
      <diagnostic field_name_b="Velocity" field_name_a="VelocityAnalytical">
        <algorithm name="Internal" material_phase_support="multiple"/>
        <mesh name="VelocityMesh"/>
        <output/>
        <stat>
          <include_in_stat/>
        </stat>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </vector_field>
  </material_phase>
</fluidity_options>
