<?xml version='1.0' encoding='utf-8'?>
<fluidity_options>
  <simulation_name>
    <string_value lines="1">laplacian_smoothing_1d</string_value>
  </simulation_name>
  <problem_type>
    <string_value lines="1">fluids</string_value>
  </problem_type>
  <geometry>
    <dimension>
      <integer_value rank="0">1</integer_value>
    </dimension>
    <mesh name="CoordinateMesh">
      <from_file file_name="src/line">
        <format name="gmsh"/>
        <stat>
          <include_in_stat/>
        </stat>
      </from_file>
    </mesh>
    <quadrature>
      <degree>
        <integer_value rank="0">4</integer_value>
      </degree>
    </quadrature>
  </geometry>
  <io>
    <dump_format>
      <string_value>vtk</string_value>
    </dump_format>
    <dump_period>
      <constant>
        <real_value rank="0">0</real_value>
      </constant>
    </dump_period>
    <output_mesh name="CoordinateMesh"/>
    <stat/>
  </io>
  <timestepping>
    <current_time>
      <real_value rank="0">0.0</real_value>
    </current_time>
    <timestep>
      <real_value rank="0">1.0</real_value>
    </timestep>
    <finish_time>
      <real_value rank="0">1.0</real_value>
    </finish_time>
  </timestepping>
  <material_phase name="Fluid">
    <vector_field name="Velocity" rank="1">
      <prescribed>
        <mesh name="CoordinateMesh"/>
        <value name="WholeMesh">
          <constant>
            <real_value shape="1" dim1="dim" rank="1">0.0</real_value>
          </constant>
        </value>
        <output/>
        <stat>
          <include_in_stat/>
        </stat>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
      </prescribed>
    </vector_field>
  </material_phase>
  <mesh_adaptivity>
    <mesh_movement>
      <laplacian_smoothing/>
      <vector_field name="GridVelocity" rank="1">
        <prescribed>
          <mesh name="CoordinateMesh"/>
          <value name="WholeMesh">
            <python>
              <string_value lines="20" type="code" language="python">import numpy
def val(X,t):

  if X[0]&gt;=1.0:
  #Note that this represents a vector field and uses vecor addition.  For example if X[0]=1.0 is to be mapped to X[0]=2.0, the following needs to be returned: return(X[0]*2.0 - 1.0), otherwise, X[0]=1.0 will be mapped to 3.0.
    #return (0.0,0.1-0.4*(X[0]-0.5)**2)
    return (X[0]*2.0 -X[0],)
  else:
    return (0.0,)</string_value>
            </python>
          </value>
          <output/>
          <stat>
            <include_in_stat/>
          </stat>
          <detectors>
            <exclude_from_detectors/>
          </detectors>
        </prescribed>
      </vector_field>
    </mesh_movement>
  </mesh_adaptivity>
</fluidity_options>
