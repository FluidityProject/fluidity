spatial_discretisation_options =
   element spatial_discretisation {
      (
         continuous_galerkin_options|
         discontinuous_galerkin_options|
         pure_cv_options|
         coupled_cv_options|
         finite_volume_options
      ),
      conservative_advection_option
   }

finite_volume_options =
   (
      ## **DO NOT USE!**
      ## UNDER DEVELOPMENT
      element finite_volume {
         ## Discretisation options for the mass terms.
         element mass_terms {
            ## Remove the mass terms from the equation. This requires an
            ## implicitness factor theta = 1.0 (under
            ## temporal_discretisation).
            element exclude_mass_terms {
               empty
            }?
         },
         ## Discretisation options for the advection terms.
         element advection_terms {
            ## Remove the advection terms from the equation.
            ## This overrides any other advection term options (including
            ## conservative_advection below).
            element exclude_advection_terms {
               comment
            }
         },
         comment
      }
   )

conservative_advection_option =
   (
      ## Conservative discretisation of field advection equation
      ##  TBETA=1. -- conservative (divergence form)
      ##  TBETA=0. -- non-conservative
      ##  0. < TBETA < 1.
      element conservative_advection {
         real
      }
   )

continuous_galerkin_options =
   (
      ## Continuous Galerkin formulation
      element continuous_galerkin {
         advection_stabilisation_options,
         cg_advection_terms,
         cg_mass_terms,
         comment
      }
   )

cg_advection_terms =
   (
      ## Discretisation options for the advection terms.
      element advection_terms {
         ## Integrate the advection terms of the advection equation by
         ## parts.
         element integrate_advection_by_parts {
            comment
         }?,
         ## Remove the advection terms from the equation.
         ## This overrides any other advection term options (including
         ## conservative_advection below).
         element exclude_advection_terms {
            comment
         }?,
         ## Disable advection, but still permit a sinking velocity.
         ## Useful for pseudo-1D simulations involving biology
         element only_sinking_velocity {
               empty
         }?
      }
   )

cg_mass_terms =
   (
      ## Discretisation options for the mass terms.
      element mass_terms {
         ## Lump the mass matrix
         element lump_mass_matrix {
            empty
         }?,
         ## Remove the mass terms from the equation. This requires an
         ## implicitness factor theta = 1.0 (under
         ## temporal_discretisation).
         element exclude_mass_terms {
            empty
         }?
      }
   )

discontinuous_galerkin_options =
   (
      ## Discontinuous galerkin formulation. You can also use this
      ## formulation with a continuous field in which case a simple
      ## galerkin formulation will result.
      element discontinuous_galerkin {
         dg_advection_scheme,
         dg_diffusion_scheme,
         dg_upwind_stabilisation,
         dg_mass_terms
      }
   )

dg_advection_scheme =
   (
      element advection_scheme {
         (
            ## Straightforward upwinding of the nonlinear velocity.
            ## This uses SU stabilisation with optimal choice for the
            ## stabilisation parameter, and stabilisation parameter
            ## scale factor 0.5.
            element upwind {
               empty
            }|
            ## Modified Lax-Friedrichs flux.
            element lax_friedrichs {
               empty
            }|
            ## Disable advection
            element none {
               empty
            }
         ),
         ## Project the advecting velocity to continuous
         ## space. This is useful for obtaining bounded
         ## advection schemes.
         element project_velocity_to_continuous {
            ## The mesh to which the projection should occur.
            element mesh {
               attribute name { "CoordinateMesh" }
            }|
            element mesh {
               attribute name { xsd:string }
            }
         }?,
         ## Integrate the advection terms of the
         ## advection-diffusion equation by parts.
         ## Integrating the advection term by parts is
         ## necessary for a discontinuous
         ## galerkin discretisation however it is possible to
         ## select how many times the
         ## integration by parts is performed.
         ## Twice is the norm.
         element integrate_advection_by_parts {
           (
             ## If activated the element advection matrix takes the form:
             ##    /                                 /
             ##    | N_A (nu dot grad N_B) dV + beta | N_A ( div nu ) N_B dV
             ##    /                                 /
             ##      /                                         /
             ##  + I | N_A_i (nu dot n) N_B_o ds + [(1-I) - 1] | N_A_i (nu dot n) N_B_i ds
             ##      /                                         /
             ## where beta is set in conservative_advection,
             ## N is a shape function (uppercase
             ## subscripts indicate nodes A or B while
             ## lowercase subscripts indicate inner or outer
             ## faces i and o respectively), nu is the
             ## nonlinear velocity and n is the outward
             ## pointing normal from the element.
             element twice {
               empty
             }|
             ## If activated the element advection matrix takes the form:
             ##    /                                        /
             ##  - | (grad N_A dot nu) N_B dV - (1. - beta) | N_A ( div nu ) N_B dV
             ##    /                                        /
             ##      /                                   /
             ##  + I | N_A_i (nu dot n) N_B_o ds + (1-I) | N_A_i (nu dot n) N_B_i ds
             ##      /                                   /
             ## where beta is set in conservative_advection,
             ## N is a shape function (uppercase
             ## subscripts indicate nodes A or B while
             ## lowercase subscripts indicate inner or outer
             ## faces i and o respectively), nu is the
             ## nonlinear velocity and n is the outward
             ## pointing normal from the element.
             element once {
               empty
             }
           )
         },
         ## If activated the conservation term:
         ##  /
         ##  | N_A ( div nu ) N_B dV
         ##  /
         ## is integrated_by_parts such that the element
         ## advection matrix becomes:
         ##         /                                        /
         ##  - beta | (grad N_A dot nu) N_B dV + (1. - beta) | N_A (nu dot grad N_B) dV
         ##         /                                        /
         ##      /                                                /
         ##  + I | N_A_i (nu dot n) N_B_o ds + [(1-I) - (1-beta)] | N_A_i (nu dot n) N_B_i ds
         ##      /                                                /
         ## where beta is set in conservative_advection, N is
         ## a shape function (uppercase
         ## subscripts indicate nodes A or B while lowercase
         ## subscripts indicate inner or outer
         ## faces i and o respectively), nu is the nonlinear
         ## velocity and n is the outward pointing normal
         ## from the element.
         ## This is invariant regardless of whether the main
         ## advection term is integrated by parts once or
         ## twice.
         element integrate_conservation_term_by_parts {
           empty
         }?
      }
   )

dg_diffusion_scheme =
   (
      element diffusion_scheme {
         (
            ## Compact discontinuous Galerkin scheme.
            ## (Peraire and Persson SIAM J. Sci. Comput. 30, p1806)
            element compact_discontinuous_galerkin {
               ## Penalty_parameter
               ## Add penalty term Int [u][v] dS on element boundaries
               ## scaled by C_0
               element penalty_parameter {
                  real
               }?
            }|
            ## Classical scheme from Bassi and Rebay
            ## (JCP 131 267-179 1997)
            element bassi_rebay {
               empty
            }|
            ## Classical interior penalty scheme
            ## see, e.g., SIAM Journal on Numerical Analysis
            ## Vol. 39, No. 5 (2002), pp. 1749-1779
            element interior_penalty {
               ## Penalty_parameter
               ## The penalty term Int [u][v] dS on element boundaries
               ## is scaled by C = C_0 h**p
               ## This option specifies the C_0
               ## There is a theoretical lower bound for
               ## stability and hence convergence
               element penalty_parameter {
                  real
               },
               ## Penalty_parameter
               ## The penalty term Int [u][v] dS on element boundaries
               ## is scaled by C = C_0 h**p
               ## This option specifies p
               ## Theoretically p=-1 is required for linear elements
               element edge_length_power {
                  real
               },
               ## Option for how to compute the edge length h
               element edge_length_option {
                  ## Use face integral (take sqrt in 3D)
                  element use_face_integral {
                     empty
                  }|
                  ## Use difference between element centre
                  ## and neighbour centre
                  ## Use 2x distance to face centre on boundaries
                  element use_element_centres {
                     empty
                  }
               }
            }|
            ## EXPERIMENTAL, DO NOT USE!!!
            ## Only works for P0 in 2d.
            element masslumped_rt0 {
               ## Use the masslumping based on T. Arbogast and Z. Chen, Math. of Comp.
               ## vol.64 nr. 211, 1995. This assumes a homeomorphism between the triangular
               ## mesh and an equilateral mesh (true for structured 2d meshes in which all
               ## across edges that split up the quads are oriented in the same way). Gives
               ## accurate results for such meshes, gives very inaccurate results for other meshes.
               element arbogast {
                  empty
               }|
               ## Use the distance between circumcentres of the triangles. This comes down to a finite
               ## volume scheme where the diffusive fluxes are computed taking the difference in
               ## adjacent circumcentres, divided by the difference in these centres. Smaller stencil
               ## and works better for non-structured triangular meshes, but the accuracy still depends
               ## on the mesh quality (obtuse triangles reduce the accuracy).
               element circumcentred {
                  empty
              }
            }
         )
      }
   )

dg_upwind_stabilisation =
   (
      ## This introduces a simple upwind diffusion based on eqn 2.52 in
      ## Donea and Huerta (2003) "Finite elements for flow problems".
      element upwind_stabilisation {
         empty
      }?,
      (
         ## Vertex-based slope limiter from D. Kuzmin, "A
         ## vertex-based hierarchical slope limiter for
         ## p-adaptive discontinuous Galerkin methods",
         ## J. Comp Appl. Math. 233/12 (2010)
         ## DOI: 10.1016/j.cam.2009.05.028
         element slope_limiter {
            attribute name { "Vertex_Based" }
         }|
         element slope_limiter {
            attribute name { "Cockburn_Shu" },
            ## TVB tolerance parameter, below this value (scaled by
            ## dx**2) no limiting is done.
            ## Reduce to do more limiting, increase to do less
            ## Minimum value 0.0
            ## Suggested value 5.0
            element TVB_factor {
               real
            },
            ## Tolerate negative weights in the reconstruction
            ## Algorithm finds the "least bad" coordinates to use.
            ## May lead to overshoots on funky meshes.
            element tolerate_negative_weights {
               empty
            }?,
            ## Limit factor
            ## This value is used to scale the reconstructed slope
            ## Minimum value 1.0
            ## Suggested value 1.1
            element limit_factor {
               real
            }
         }|
         ## Hermite-WENO limiter
         element slope_limiter {
            attribute name { "Hermite_Weno" },
            ##Power coefficient in weights.
            ##This must be a positive number, possibly
            ##an integer. Larger power coefficient leads
            ##to greater penalisation of oscillations, on
            ##the other hand causes numerical problems if it
            ##gets too big.
            ##Suggested value = 4.
            element power_coefficient {
               real
            },
            ##Relative/absolute tolerance threshold for
            ##oscillation indicator. Values below this emphasise
            ##absolute rather than relative magnitudes of
            ##tracer gradients.
            ##Suggested value = 0.001*T
            ##where T is a typical value of the tracer which
            ##you might use in a scaling analysis.
            element tolerance_threshold_oscillations {
               real
            },
            ##Relative/absolute tolerance threshold for
            ##weights. Values below this emphasise
            ##absolute rather than relative magnitudes of
            ##oscillations indicator.
            ##Suggested value = 1.0e-3
            element tolerance_threshold_weights {
               real
            },
            ##Tolerance for discontinuity detector.
            ##Uses method of
            ##http://www.gce.ucl.ac.be/~remacle/pdf/detect.pdf
            ##Detector values greater than this indicate
            ##discontinuities at the inflow boundary
            ##Suggested value = L^(-p-1)/2)
            ##where L is the horizontal lengthscale
            ##and p is the polynomial order
            element discontinuity_tolerance {
               real
            },
            ##Tolerance for limiter
            ##Doesn't apply limiter if max abs value of tracer
            ##over the element is below this tolerance
            ##Recommended value is something very small
            ##but not zero
            element limit_tolerance {
               real
            },
            (
               ##At boundaries there are less polynomials to
               ##construct. With this option, the missing
               ##polynomials are simply ignored.
               element boundary_treatment {
                  attribute name { "ignore_missing_polys" }
               }|
               ##At boundaries there are less polynomials to
               ##construct. With this option, the missing
               ##polynomials are replaced with the polynomial
               ##in the current element.
               element boundary_treatment {
                  attribute name { "replace_missing_polys" }
               }|
               ##At boundaries there are less polynomials to
               ##construct. With this option, the reconstruction
               ##is applied at one order down.
               ##Since HWENO currently only works for P1,
               ##this amounts to L_2 projection to P0.
               element boundary_treatment {
                  attribute name { "lower_order" }
               }
            ),
            ##Switch to chuck out lots of debugging output.
            ##Not for production runs.
            element debugging {
               empty
            }?,
            ##Don't include Hermite polynomials.
            element leave_out_hermite_polynomials {
               empty
            }?
         }|
         element slope_limiter {
            attribute name { "minimal" }
         }|
         ## The experimental Farrell-Piggott-Nelson limiter
         element slope_limiter {
            attribute name { "FPN" },
            ## Option allowing the user to include the neighbouring
            ## elements "mid-point" in the calculation.
#            element limit_from_previous_time_step {
#               empty
#            }?,
#            element exclude_current_node {
#               empty
#            }?,
#            element max_upper_bound {
#               real
#            }?,
#            element min_lower_bound {
#               real
#            }?,
#            element monotomic {
#               empty
#            }?,
            element mid-point_scheme {
                ## beta=0.5 -> include mid-point value in the bounds.
                ## beta=1.0 -> include opposite node value in the bounds.
                element beta {
                   real
                },
                ## Create additional values to include in the calculation
                ## of the bounds by extrapolating along the direction of the
                ## faces of the element in question.
                element extrapolate {
                   empty
                }?
            }?,
            ## Re-distribute mass prior to the diffusion if nodal
            ## values within an element are both above and below the
            ## provided bounds.
            element pre_distribute_mass {
               empty
            }?
         }
      )?
   )

dg_mass_terms =
   (
      ## Discretisation options for the mass terms.
      element mass_terms {
         ## Remove the mass terms from the equation.
         element exclude_mass_terms {
            empty
         }?
      }?
   )

pure_cv_options =
   (
      ## Use a pure control volume discretisations.
      ## Follows a new control volume code path.
      element control_volumes {
         ## Options dealing with the mass terms in the equation.
         element mass_terms {
           ## Exclude the mass terms from the advection-diffusion type equation.
           element exclude_mass_terms {
              empty
           }?
         }?,
         spatial_control_volume_options,
         (
            ## Use the gradient of the field constructed using the
            ## basis functions of the parent finite element mesh to
            ## form the divergence.
            ##
            ## DOES NOT CURRENTLY WORK WITH WEAK DIRICHLET BOUNDARY CONDITIONS!
            ##
            ## Based on schemes in Handbook of Numerical Analysis,
            ## P.G. Ciarlet, J.L. Lions eds, vol 7, pp 713-1020
            element diffusion_scheme {
              attribute name{"ElementGradient"}
            }|
            ## Use an auxiliary gradient equation to find the gradient of the field.
            ##
            ## DOES NOT CURRENTLY WORK WITH ROBIN BOUNDARY CONDITIONS!
            ##
            ## Based on scheme proposed in Bassi, F. & Rebay, S., A
            ## high-order accurate discontinuous finite element method
            ## for the numerical solution of the compressible
            ## Navier-Stokes equations, Journal Of Computational
            ## Physics, 1997, 131, 267-279
            element diffusion_scheme {
              attribute name{"BassiRebay"}
            }
         )
      }
   )

coupled_cv_options =
   (
      ## Use a pure control volume discretisations with face value
      ## restrictions between different fields in different material_phases.
      ##
      ## THIS DOES NOT WORK WITH DIFFUSION!
      ##
      ## Follows a new control volume code path.
      element coupled_cv {
         coupled_spatial_control_volume_options,
         ## Set the maximum and minimum bounds for the sum up to and including this field.
         ## This defines the limiter used to enforce boundedness on this field.
         element parent_sum {
            element target_maximum {
              real
            },
            element target_minimum {
              real
            }
         }
      }
   )

spatial_control_volume_options_excluding_none = compressive_control_volume_options
spatial_control_volume_options_excluding_none |= standard_control_volume_options

spatial_control_volume_options = no_advection_control_volume_options
spatial_control_volume_options |= compressive_control_volume_options
spatial_control_volume_options |= standard_control_volume_options

standard_control_volume_options =
   (
      ## First Order Upwind face value discretisation
      ##  face_value = donor_value,
      ## where
      ##  donor_value = income*val_1 + (1.-income)*val_2,
      ## where val_i is the value on the ith node neighbouring the face and
      ## income = [0, 1] depending on whether the flow is coming from node 1 or 2
      ## First order upwinding is monotonic so no limiting is ever required
      element face_value {
        attribute name { "FirstOrderUpwind" },
        empty
      }|
      ## Trapezoidal face value discretisation
      ##  face_value = 0.5*(val_1 + val_2),
      ## where
      ##  val_i is the value on the ith node neighbouring the face
      ##
      ## Trapezoidal discretisation is unbounded so limiting is compulsory
      element face_value {
        attribute name { "Trapezoidal" },
        limiter_options
      }|
      ## Finite Element face value discretisation
      ##  face_value = finite element interpolation from surrounding nodes
      ##
      ## Finite element discretisation may become unbounded so limiting is often necessary.
      element face_value {
        attribute name { "FiniteElement" },
        ## Disable advection, but still permit a sinking velocity.
        ## Useful for pseudo-1D simulations involving biology
        element only_sinking_velocity {
            empty
         }?,
        limiter_options
      }|
      ## First Order Downwind face value discretisation
      ##  face_value = downwind_value,
      ## where
      ##  donor_value = (1.-income)*val_1 + income*val_2,
      ## where val_i is the value on the ith node neighbouring the face and
      ## income = [0, 1] depending on whether the flow is coming from node 1 or 2
      ## First order downwinding is unconditionally unstable
      element face_value {
        attribute name { "FirstOrderDownwind" },
        empty
      }
   )

no_advection_control_volume_options =
   (
      ## No face value - i.e. no advection!
      element face_value {
        attribute name { "None" },
        empty
      }
   )

coupled_spatial_control_volume_options = coupled_control_volume_options
coupled_spatial_control_volume_options |= compressive_control_volume_options

# coupled control volume options are the same as the standard ones (annoyingly copied and pasted)
# except that firstorderupwind gets limiter options
coupled_control_volume_options =
   (
      ## First Order Upwind face value discretisation
      ##  face_value = donor_value,
      ## where
      ##  donor_value = income*val_1 + (1.-income)*val_2,
      ## where val_i is the value on the ith node neighbouring the face and
      ## income = [0, 1] depending on whether the flow is coming from node 1 or 2
      ## First order upwinding is monotonic so no limiting is ever required
      element face_value {
        attribute name { "FirstOrderUpwind" },
        limiter_options
      }|
      ## Trapezoidal face value discretisation
      ##  face_value = 0.5*(val_1 + val_2),
      ## where
      ##  val_i is the value on the ith node neighbouring the face
      ##
      ## Trapezoidal discretisation is unbounded so limiting is compulsory
      element face_value {
        attribute name { "Trapezoidal" },
        limiter_options
      }|
      ## Finite Element face value discretisation
      ##  face_value = finite element interpolation from surrounding nodes
      ##
      ## Finite element discretisation may become unbounded so limiting is often necessary.
      element face_value {
        attribute name { "FiniteElement" },
        limiter_options
      }
   )

compressive_control_volume_options =
   (
      ## HyperC face value discretisation
      ##
      ## face_value calculated from upper bound of explicit TVD zone of NVD diagram
      ## Normally used for MaterialVolumeFraction fields
      element face_value {
        attribute name { "HyperC" },
        upwind_value_options?,
        cv_face_cfl_number_options
      }|
      ## UltraC face value discretisation
      ##
      ## face_value calculated from extended upper bound of
      ## explicit TVD zone of NVD diagram assuming
      ## values bounded by target_maximum and target_minimum.
      element face_value {
        attribute name { "UltraC" },
        ## Specifiy the upper bound which UltraC will use to
        ## calculate the maximum flux.
        element target_maximum {
            real
        },
        ## Specifiy the lower bound which UltraC will use to
        ## calculate the minimum flux.
        element target_minimum {
            real
        },
        upwind_value_options?,
        cv_face_cfl_number_options
      }|
      ## **UNDER TESTING**
      ##
      ## PotentialUltraC face value discretisation
      ##
      ## face_value calculated from extended upper bound of
      ## explicit TVD zone of NVD diagram if potential
      ## value of field is sufficient (as specified by
      ## target_maximum) to ensure the correct front advection
      ## velocity.
      ##
      ## If not then either switch to HyperC or use a modified flux
      ## based on the potential function.
      element face_value {
        attribute name { "PotentialUltraC" },
        ## Specifiy the upper bound which PotentialUltraC will use
        ## to calculate the maximum flux if the potential function
        ## value is sufficient to maintain the correct front
        ## advection velocity.
        element target_maximum {
            real
        },
        ## Specifiy the lower bound which PotentialUltraC will use to calculate the minimum flux.
        element target_minimum {
            real
        },
        (
            ## Select what PotentialUltraC should do if the
            ## potential function value does not reach the required
            ## value specified by the target_maximum.
            ##
            ## Switch to using HyperC face values.  This ensures
            ## that the advection velocity is correct however may
            ## create isolated regions beneath the target_maximum.
            element switch_to_hyperc {
              empty
            }|
            ## Select what PotentialUltraC should do if the
            ## potential function value does not reach the required
            ## value specified by the target_maximum.
            ##
            ## Modify the maximum nodal values (both downwind and
            ## upwind) so that the fluxes are at their maximum
            ## possible without affecting the front advection
            ## velocity.
            element use_potential_flux {
              empty
            }
        ),
        upwind_value_options?,
        cv_face_cfl_number_options
      }
   )

# standard control volume face value options that
# have NO reliance on any CFL field.
standard_control_volume_options_excluding_cfl =
   (
      ## First Order Upwind face value discretisation
      ##  face_value = donor_value,
      ## where
      ##  donor_value = income*val_1 + (1.-income)*val_2,
      ## where val_i is the value on the ith node neighbouring the face and
      ## income = [0, 1] depending on whether the flow is coming from node 1 or 2
      ## First order upwinding is monotonic so no limiting is ever required
      element face_value {
        attribute name { "FirstOrderUpwind" },
        empty
      }|
      ## Trapezoidal face value discretisation
      ##  face_value = 0.5*(val_1 + val_2),
      ## where
      ##  val_i is the value on the ith node neighbouring the face
      ##
      ## Trapezoidal discretisation is unbounded so limiting is compulsory
      element face_value {
        attribute name { "Trapezoidal" },
        limiter_options_excluding_cfl
      }|
      ## Finite Element face value discretisation
      ##  face_value = finite element interpolation from surrounding nodes
      ##
      ## Finite element discretisation may become unbounded so limiting is often necessary.
      element face_value {
        attribute name { "FiniteElement" },
        ## Disable advection, but still permit a sinking velocity.
        ## Useful for pseudo-1D simulations involving biology
        element only_sinking_velocity {
            empty
         }?,
        limiter_options_excluding_cfl
      }|
      ## First Order Downwind face value discretisation
      ##  face_value = downwind_value,
      ## where
      ##  donor_value = (1.-income)*val_1 + income*val_2,
      ## where val_i is the value on the ith node neighbouring the face and
      ## income = [0, 1] depending on whether the flow is coming from node 1 or 2
      ## First order downwinding is unconditionally unstable
      element face_value {
        attribute name { "FirstOrderDownwind" },
        empty
      }
   )
