<?xml version="1.0" encoding="UTF-8"?>
<grammar xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0" xmlns="http://relaxng.org/ns/structure/1.0">
  <define name="physical_parameter_options">
    <element name="physical_parameters">
      <optional>
        <ref name="gravity_options"/>
      </optional>
      <optional>
        <ref name="coriolis_options"/>
      </optional>
    </element>
  </define>
  <define name="gravity_options">
    <element name="gravity">
      <a:documentation>Set a gravity to be included in the buoyancy term.</a:documentation>
      <element name="magnitude">
        <a:documentation>Acceleration due to gravity. 9.8 m/s^2 on earth.</a:documentation>
        <ref name="real"/>
      </element>
      <element name="vector_field">
        <a:documentation>The direction of the gravity vector.</a:documentation>
        <attribute name="name">
          <value>GravityDirection</value>
        </attribute>
        <attribute name="rank">
          <value>1</value>
        </attribute>
        <element name="prescribed">
          <ref name="coordinate_mesh_choice"/>
          <ref name="prescribed_vector_field_no_adapt"/>
        </element>
      </element>
    </element>
  </define>
  <define name="coriolis_options">
    <element name="coriolis">
      <a:documentation>Options relating to Coriolis force. The rotation vector is
assumed to be in the z-direction:

  F_C = 2 \Omega \hat{k} \times u = f \hat{k} \times u</a:documentation>
      <choice>
        <ref name="f_plane_options"/>
        <ref name="beta_plane_options"/>
        <element name="sine_of_latitude">
          <a:documentation>Full Coriolis parameter:
  f = 2 omega sin (latitude)
where latitude=y/R_earth+latitude_0

Specify omega and R_earth and latitude_0</a:documentation>
          <element name="omega">
            <a:documentation>Full Coriolis parameter:
  f = 2 omega sin (latitude)
where latitude=y/R_earth+latitude_0</a:documentation>
            <ref name="real"/>
          </element>
          <element name="R_earth">
            <a:documentation>Full Coriolis parameter:
  f = 2 omega sin (latitude)
where latitude=y/R_earth+latitude_0

Suggested value for R_earth: 6.371e6</a:documentation>
            <ref name="real"/>
          </element>
          <element name="latitude_0">
            <a:documentation>Full Coriolis parameter:
  f = 2 omega sin (latitude)
where
  latitude=y/R_earth+latitude_0
latitude_0 is the latitude of y=0</a:documentation>
            <ref name="real"/>
          </element>
        </element>
        <element name="on_sphere">
          <a:documentation>Full representation on sphere</a:documentation>
          <element name="omega">
            <a:documentation>Earth rotation rate

Suggested value: 2 pi / 86400 = 7.27220522e-5</a:documentation>
            <ref name="real"/>
          </element>
        </element>
        <element name="python_f_plane">
          <a:documentation>As f_plane, but with the value for f set using a python
function. Allows for time varying rotation rate.

Functions should be of the form:

 def val(t):
    # Function code
    return # Return value

where the return value is a float.</a:documentation>
          <ref name="python_code"/>
        </element>
      </choice>
    </element>
  </define>
  <define name="f_plane_options">
    <element name="f_plane">
      <a:documentation>f-plane approximation
This means the Coriolis force looks like:
  f k x u
where k is the z unit vector
   and u the velocity vector
   and f is constant</a:documentation>
      <element name="f">
        <a:documentation>f-plane approximation
This means the Coriolis force looks like:
  f k x u
where k is the z unit vector
   and u the velocity vector
   and f is constant</a:documentation>
        <ref name="real"/>
      </element>
    </element>
  </define>
  <define name="beta_plane_options">
    <element name="beta_plane">
      <a:documentation>Beta-plane approximation
This means the Coriolis force looks like:
  f k x u
where k is the z unit vector
   and u the velocity vector
   and f=f_0+beta . (x,y,z)</a:documentation>
      <element name="f_0">
        <a:documentation>Beta-plane approximation
This means the Coriolis force looks like:
  f k x u
where k is the z unit vector
   and u the velocity vector
   and f=f_0+beta . (x,y,z)</a:documentation>
        <ref name="real"/>
      </element>
      <element name="beta">
        <a:documentation>Beta-plane approximation
This means the Coriolis force looks like:
  f k x u
where k is the z unit vector
   and u the velocity vector
   and f=f_0+beta . (x,y,z)
usually only the y-component of beta is non-zero</a:documentation>
        <ref name="real_dim_vector"/>
      </element>
    </element>
  </define>
</grammar>
