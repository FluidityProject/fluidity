# Flredecomp options

flredecomp = 
   (
      ## Options for the flredecomp program
      element flredecomp {
        comment, 
        ## Select which partitioner to use when flredecomping.
        ## Graph partitioners available are ParMETIS, PT-Scotch
        ## and Zoltan PHG. The Zoltan PHG hypergraph partitoner
        ## is also available.
        ## Default is ParMETIS graph partitioner.
        element final_partitioner {
            ## Use the ParMETIS graph partitioner. ParMETIS setup to match as
            ## closely as possible the setup used previously by Sam.
            element metis {
                empty
            }|
            ## Use the PT-Scotch graph partitioner.
            element scotch {
                empty
            }|
            ## Use the Zoltan PHG partitioner.
            element zoltan {
                ## Select the partitioning method you would like used by Zoltan PHG.
                ## Currently hypergraph partitioning is the simplest implementation
                ## and can produce non-contiguous partitions for certain problems.
                element method {
		  element string_value {
		     # Lines is a hint to the gui about the size of the text box.
		     # It is not an enforced limit on string length.
                     attribute lines { "1" },
                     ( "graph" | "hypergraph" )
                  },
                comment
                }
            }
        }?,
        element field_weighted_partitions {
        ## Field weighted partitions: turning on this option allows one to 
        ## weight mesh partitions, based upon a prescribed scalar field.
        ## Note that the field should have a minimum value of 0 and a maximum
        ## value of 1 (no normalisation is done within the code).
	    element scalar_field {
               attribute rank { "0" },
               attribute name { "FieldWeightedPartitionValues" },
               element prescribed {
                  coordinate_mesh_choice,
                  prescribed_scalar_field
               }
            }
        }?,
        ## Zoltan Debugging
        ## 
        ## Turn on more verbose output for use when debugging Zoltan.
        element zoltan_debug {
           ## Turn on graph checking.
           ## When using ParMETIS or PT-Scotch options for turning on
           ## graph checking are provided by Zoltan.
           ## 1 - on process checking,
           ## 2 - full checking (very slow)
           element graph_checking {
               "1"|"2"
           }?,
           ## Print out a dump file of the edge counts.
           ## Edge counts for each owned node are calculated in zoltan_cb_get_num_edges.
           ## This option dumps the edge count for each owned node.
           ## Dump is to the current directory, in a file called edge_counts_*.dat
           ## One dump file is created for each rank.
           element dump_edge_counts {
              empty
           }?,
           ## Print out a dump file of node sizes.
           ## Zoltan needs to be told how much data is associated with each node when
           ## doing phase one migration.
           ## Here we dump the size calculated by zoltan_cb_pack_node_sizes for each
           ## owned node.
           ## Dump is to the current directory, in a file called node_sizes_*.dat
           ## One dump file is created for each rank.
           element dump_node_sizes {
              empty
           }?,
           ## Print out a dump file of halo node sizes.
           ## Zoltan needs to be told how much data is associated with each halo node when
           ## doing phase two migration.
           ## Here we dump the size calculated by zoltan_cb_pack_halo_node_sizes for each
           ## owned node.
           ## Dump is to the current directory, in a file called halo_node_sizes_*.dat
           ## One dump file is created for each rank.
           element dump_halo_node_sizes {
              empty
           }?,
           ## Print out a dump file of field sizes.
           ## Zoltan needs to be told how much data is associated with the fields for each 
           ## element when we're transfering fields.
           ## Here we dump the size calculated by zoltan_cb_pack_field_sizes for each
           ## owned node.
           ## Dump is to the current directory, in a file called field_sizes_*.dat
           ## One dump file is created for each rank.
           element dump_field_sizes {
              empty
            }?
         }?
      }
   )
