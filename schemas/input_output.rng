<?xml version="1.0" encoding="UTF-8"?>
<grammar xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0" xmlns="http://relaxng.org/ns/structure/1.0" datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes">
  <!-- Choice of input method, e.g. for boundary conditions -->
  <define name="input_choice_real">
    <ref name="input_choice_real_contents"/>
  </define>
  <define name="input_choice_real_plus_boundary_forcing">
    <choice>
      <ref name="input_choice_real_plus_field"/>
      <element name="from_file">
        <oneOrMore>
          <element name="tidal">
            <attribute name="file_name">
              <data type="string" datatypeLibrary=""/>
            </attribute>
            <attribute name="variable_name_amplitude">
              <data type="string" datatypeLibrary=""/>
            </attribute>
            <attribute name="variable_name_phase">
              <data type="string" datatypeLibrary=""/>
            </attribute>
            <attribute name="name">
              <a:documentation>See E.W. Schwiderski - Rev. Geophys. Space
Phys. Vol. 18 No. 1 pp. 243--268, 1980
for details of these constituent.</a:documentation>
              <choice>
                <value>M2</value>
                <value>S2</value>
                <value>N2</value>
                <value>K2</value>
                <value>K1</value>
                <value>O1</value>
                <value>P1</value>
                <value>Q1</value>
                <value>Mf</value>
                <value>Mm</value>
                <value>Ssa</value>
              </choice>
            </attribute>
          </element>
        </oneOrMore>
      </element>
      <element name="NEMO_data">
        <a:documentation>Set the boundary free-surface height from NEMO data.
A prescribed NEMO pressure scalar field must be set to use this option.
Set the name of the prescribed NEMO pressure scalar field below.</a:documentation>
        <attribute name="field_name">
          <data type="string" datatypeLibrary=""/>
        </attribute>
      </element>
    </choice>
  </define>
  <define name="input_choice_real_plus_file">
    <choice>
      <ref name="input_choice_real_contents"/>
      <element name="from_file">
        <a:documentation>Initialise the field from an existing file (indended primarily for picking up prescribed fields from previously run prognostic simulations). The file mesh must match the mesh of this field (except for piecewise constant fields which will be remapped back from the discontinuous nodal values).

THIS WILL NOT WORK FOR PRESCRIBED FIELDS NOT DIRECTLY UNDERNEATH /material_phase</a:documentation>
        <attribute name="file_name">
          <data type="string"/>
        </attribute>
        <ref name="vtu_input_format"/>
        <ref name="comment"/>
      </element>
      <element name="NEMO_data">
        <a:documentation>Initialize the field from NEMO data. Note that a file path
under '/ocean_forcing/external_data_boundary_conditions' must
be set to use this option.</a:documentation>
        <element name="format">
          <element name="string_value">
            <choice>
              <value>Temperature</value>
              <value>Salinity</value>
              <value>Free-surface height</value>
            </choice>
          </element>
        </element>
      </element>
    </choice>
  </define>
  <define name="input_choice_real_plus_map">
    <choice>
      <ref name="input_choice_real_contents"/>
      <element name="from_map">
        <a:documentation>Set the depth from a bathymetry map</a:documentation>
        <attribute name="file_name">
          <data type="string"/>
        </attribute>
        <optional>
          <element name="min_depth">
            <a:documentation>Restricts the minimum height of the domain to the
specified value.
Note that in planar case, this minimum depth corresponds
to the minimum depth below a top layer at z=0, it does
not necessarily correspond to the data in a given file.</a:documentation>
            <ref name="real"/>
          </element>
        </optional>
        <optional>
          <element name="surface_height">
            <a:documentation>If you are reading data from a file whose top layer height
is not equal to zero, set the height of that top layer here.
Note however that the height of the top layer in the the 
extruded mesh will still be equal to zero (if planar) or 
the radius of the shell mesh (if spherical), the given domain
will in effect have been shifted down.</a:documentation>
            <ref name="real"/>
          </element>
        </optional>
      </element>
    </choice>
  </define>
  <define name="input_choice_real_plus_list">
    <choice>
      <ref name="input_choice_real_contents"/>
      <element name="list">
        <a:documentation>Manually enter the spacing between each layer</a:documentation>
        <ref name="real_vector"/>
      </element>
      <element name="sigma_layers">
        <element name="standard">
          <a:documentation>Standard Sigma layers: Layers are set such that
there is a constant number of layers throughout
the domain. Please input the number of layers you
wish below.</a:documentation>
          <ref name="integer"/>
        </element>
      </element>
    </choice>
  </define>
  <define name="input_choice_real_plus_field">
    <choice>
      <ref name="input_choice_real_contents"/>
      <element name="from_field">
        <a:documentation>The parent field contains the boundary values that you want to apply as a boundary condition to this field.

Note 1: Only works with a parent field in the same material_phase.

Note 2: If the parent field is time-dependent, then the boundary values being used will be 1 timestep out since the parent field is only re-computed after BCs are set at the beginning of each timestep.

Note 3: The parent field must be remappable to this field (e.g. remapping from a discontinuous to a continuous field, or from a higher order to a lower order field, is not allowed).

Note 4: The j-th component of a vector field BC can be set from either a scalar parent field or a vector parent field. In the latter case, the BC data will be obtained from j-th component of the parent field. A scalar field BC can only be set from a scalar parent field.</a:documentation>
        <attribute name="parent_field_name">
          <data type="string"/>
        </attribute>
      </element>
    </choice>
  </define>
  <define name="input_choice_real_contents">
    <choice>
      <element name="constant">
        <a:documentation>Constant value</a:documentation>
        <ref name="real"/>
      </element>
      <element name="python">
        <a:documentation>Python function prescribing real input. Functions should be of the form:

 def val(X, t):
    # Function code
    return # Return value

where X is a tuple of length geometry dimension.</a:documentation>
        <ref name="python_code"/>
      </element>
    </choice>
  </define>
  <define name="bc_smoothing">
    <optional>
      <element name="smoothing">
        <a:documentation>Smoothing on mesh. This uses the lumped mass approach. When the mesh is not
linear and continuous, the boundary values are evaluated on a continuous
linear mesh first, then smoothed and then interpolated onto the actual mesh.</a:documentation>
        <element name="iterations">
          <a:documentation>Number of smoothing iterations. More iterations means more smoothing</a:documentation>
          <ref name="integer"/>
        </element>
      </element>
    </optional>
  </define>
  <define name="initial_condition_scalar">
    <choice>
      <element name="initial_condition">
        <a:documentation>Initial condition for WholeMesh

Only specify one condition if not using mesh regions.
Otherwise select other initial_condition option, specify region_ids
and distinct names.  Then add extra intial conditions for other regions.</a:documentation>
        <attribute name="name">
          <value>WholeMesh</value>
        </attribute>
        <ref name="input_choice_initial_condition_real"/>
      </element>
      <element name="initial_condition">
        <a:documentation>Multiple initial_conditions are allowed if specifying
different values in different
regions of the mesh (defined by region_ids).  In this case
each initial_condition
requires a distinct name for the options dictionary.</a:documentation>
        <attribute name="name">
          <data type="string" datatypeLibrary=""/>
        </attribute>
        <ref name="region_ids"/>
        <ref name="input_choice_initial_condition_real"/>
      </element>
    </choice>
  </define>
  <!--
    Choice of input method for initial conditions
    Note: combine = "choice" should be used here to combine with input_choice_real, but Diamond doesn't support it
  -->
  <define name="input_choice_initial_condition_real">
    <choice>
      <element name="constant">
        <a:documentation>Constant value</a:documentation>
        <ref name="real"/>
      </element>
      <element name="python">
        <a:documentation>Python function prescribing real input. Functions should be of the form:

 def val(X, t):
    # Function code
    return # Return value

where X is a tuple of length geometry dimension.</a:documentation>
        <ref name="python_code"/>
      </element>
      <element name="from_file">
        <a:documentation>Initialise the field from an existing file (indended
primarily for use in checkpointing). The file mesh must match
the mesh of this field  (except for piecewise constant fields 
which will be remapped back from the discontinuous nodal values). 
In parallel the process number is
appended to the filename, e.g. if the file_name attribute is
set to "input.vtu", process 0 reads from "input-0.vtu".</a:documentation>
        <attribute name="file_name">
          <data type="string"/>
        </attribute>
        <choice>
          <ref name="vtu_input_format"/>
          <ref name="netcdf_input_format"/>
        </choice>
        <ref name="comment"/>
      </element>
      <element name="NEMO_data">
        <a:documentation>Initialize the field from NEMO data. Note that a file path
under '/ocean_forcing/external_data_boundary_conditions' must
be set to use this option.</a:documentation>
        <element name="format">
          <element name="string_value">
            <choice>
              <value>Temperature</value>
              <value>Salinity</value>
              <value>Free-surface height</value>
            </choice>
          </element>
        </element>
      </element>
      <element name="from_netcdf">
        <a:documentation>Initialize a single field from data contained within a NetCDF file.
Data should be in the form x, y, z(y,x) where x and y are the coordinates
(either cartesian or longitude-latitude) and z is the value of the initial
condition to be imposed (or in the GEBCO, COARDS or CF-1.0 formats). 
Note: This option currently only supports 'single layer' data sets.

Current format options are: raw
Simulations using the format 'other' should be updated to use 'raw'.</a:documentation>
        <attribute name="file_name">
          <data type="string"/>
        </attribute>
        <element name="format">
          <element name="string_value">
            <value>raw</value>
          </element>
        </element>
      </element>
    </choice>
  </define>
  <define name="input_choice_initial_condition_pressure">
    <choice>
      <element name="constant">
        <a:documentation>Constant value</a:documentation>
        <ref name="real"/>
      </element>
      <element name="python">
        <a:documentation>Python function prescribing real input. Functions should be of the form:

 def val(X, t):
    # Function code
    return # Return value

where X is a tuple of length geometry dimension.</a:documentation>
        <ref name="python_code"/>
      </element>
      <element name="from_file">
        <a:documentation>Initialise the field from an existing file (indended
primarily for use in checkpointing). The file mesh must match
the mesh of this field  (except for piecewise constant fields 
which will be remapped back from the discontinuous nodal values). 
In parallel the process number is
appended to the filename, e.g. if the file_name attribute is
set to "input.vtu", process 0 reads from "input-0.vtu".</a:documentation>
        <attribute name="file_name">
          <data type="string"/>
        </attribute>
        <choice>
          <ref name="vtu_input_format"/>
          <ref name="netcdf_input_format"/>
        </choice>
        <ref name="comment"/>
      </element>
      <element name="free_surface">
        <a:documentation>Specify an initial free-surface height perturbation.
Note this is a perturbation to the initial supplied mesh along the boundary defined as a free-surface in this material phase.
Can be used with both a moving or static mesh.
Note this should be specified not only on the surface, but throughout the domain,
i.e. the same surface value should be applied to all nodes below, with the surface values projected across the mesh in the direction of the gravitational force.</a:documentation>
        <ref name="input_choice_initial_condition_real"/>
      </element>
      <element name="NEMO_data">
        <a:documentation>Initialize the field from NEMO data. Note that a file path
under '/ocean_forcing/external_data_boundary_conditions' must
be set to use this option.</a:documentation>
        <element name="format">
          <element name="string_value">
            <choice>
              <value>Temperature</value>
              <value>Salinity</value>
              <value>Free-surface height</value>
            </choice>
          </element>
        </element>
      </element>
      <element name="from_netcdf">
        <a:documentation>Initialize a single field from data contained within a NetCDF file.
Data should be in the form x, y, z(y,x) where x and y are the coordinates
(either cartesian or longitude-latitude) and z is the value of the initial
condition to be imposed (or in the GEBCO, COARDS or CF-1.0 formats). 
Note: This option currently only supports 'single layer' data sets.

Current format options are: raw
Simulations using the format 'other' should be updated to use 'raw'.</a:documentation>
        <attribute name="file_name">
          <data type="string"/>
        </attribute>
        <element name="format">
          <element name="string_value">
            <value>raw</value>
          </element>
        </element>
      </element>
    </choice>
  </define>
  <!-- Choice of input method, e.g. for boundary conditions -->
  <define name="input_choice_real_dim_vector">
    <ref name="input_choice_real_dim_vector_contents"/>
  </define>
  <!-- Choice of input method, e.g. for prescribed fields -->
  <define name="input_choice_real_dim_vector_plus_file">
    <choice>
      <ref name="input_choice_real_dim_vector_contents"/>
      <element name="from_file">
        <a:documentation>Initialise the field from an existing file (indended primarily for picking up prescribed fields from previously run prognostic simulations). The file mesh must match the mesh of this field (except for piecewise constant fields which will be remapped back from the discontinuous nodal values).

THIS WILL NOT WORK FOR PRESCRIBED FIELDS NOT DIRECTLY UNDERNEATH /material_phase</a:documentation>
        <attribute name="file_name">
          <data type="string"/>
        </attribute>
        <ref name="vtu_input_format"/>
        <ref name="comment"/>
      </element>
      <element name="NEMO_data">
        <a:documentation>Initialize the field from NEMO data. Note that a file path
under '/ocean_forcing/external_data_boundary_conditions' must
be set to use this option.</a:documentation>
        <element name="format">
          <a:documentation>Currently, only the velocity vector field may be initialised in this manner.</a:documentation>
          <element name="string_value">
            <value>Velocity</value>
          </element>
        </element>
      </element>
    </choice>
  </define>
  <define name="input_choice_real_dim_vector_contents">
    <choice>
      <element name="constant">
        <a:documentation>Constant value</a:documentation>
        <ref name="real_dim_vector"/>
      </element>
      <element name="python">
        <a:documentation>Python function prescribing dimensional vector input. Functions should be of the form:

 def val(X, t):
    # Function code
    return # Return value

where X and the return value are tuples of length geometry dimension.</a:documentation>
        <ref name="python_code"/>
      </element>
    </choice>
  </define>
  <!--
    Choice of input method, e.g. for boundary conditions
    this one specifies a vector field of dim minus one
  -->
  <define name="input_choice_real_dim_minus_one_vector">
    <choice>
      <element name="constant">
        <a:documentation>Constant value</a:documentation>
        <ref name="real_dim_minus_one_vector"/>
      </element>
      <element name="python">
        <a:documentation>Python function prescribing dimensional vector input. Functions should be of the form:

 def val(X, t):
    # Function code
    return # Return value

where X and the return value are tuples of length geometry dimension.</a:documentation>
        <ref name="python_code"/>
      </element>
    </choice>
  </define>
  <define name="input_choice_netcdf">
    <a:documentation>Import data from NetCDF CF-1.x file.</a:documentation>
    <element name="from_file">
      <attribute name="file_name">
        <a:documentation>The format of this file should conform to NetCDF CF 1.x
(http://cf-pcmdi.llnl.gov/)</a:documentation>
        <data type="string"/>
      </attribute>
      <ref name="comment"/>
    </element>
  </define>
  <!--
    Choice of input method for initial conditions
    Note: combine = "choice" should be used here to combine with input_choice_real, but Diamond doesn't support it
  -->
  <define name="input_choice_initial_condition_vector">
    <choice>
      <element name="constant">
        <a:documentation>Constant value</a:documentation>
        <ref name="real_dim_vector"/>
      </element>
      <element name="python">
        <a:documentation>Python function prescribing dimensional vector input. Functions should be of the form:

 def val(X, t):
    # Function code
    return # Return value

where X and the return value are tuples of length geometry dimension.</a:documentation>
        <ref name="python_code"/>
      </element>
      <element name="from_file">
        <a:documentation>Initialise the field from an existing file (indended primarily for use in checkpointing). The file mesh must match the mesh of this field (except for piecewise constant fields which will be remapped back from the discontinuous nodal values).</a:documentation>
        <attribute name="file_name">
          <data type="string"/>
        </attribute>
        <ref name="vtu_input_format"/>
        <ref name="comment"/>
      </element>
      <element name="NEMO_data">
        <a:documentation>Initialize the field from NEMO data. Note that a file path
under '/ocean_forcing/external_data_boundary_conditions' must
be set to use this option.</a:documentation>
        <element name="format">
          <a:documentation>Currently, only the velocity vector field may be initialised in this manner.</a:documentation>
          <element name="string_value">
            <value>Velocity</value>
          </element>
        </element>
      </element>
    </choice>
  </define>
  <!--
    Choice of input method for initial/boundary conditions
    version for real symmetric tensor
  -->
  <define name="input_choice_real_dim_symmetric_tensor">
    <choice>
      <element name="constant">
        <a:documentation>Constant symmetric tensor</a:documentation>
        <ref name="real_dim_symmetric_tensor"/>
      </element>
      <element name="python">
        <a:documentation>Python command prescribing symmetric tensor input.

Note that it is for the python function to determine 
that the results it produces are, in fact, symmetric.

An example that returns the three-dimensional identity:

 def val(X, t):
   return [[1, 0, 0],
               [0, 1, 0],
               [0, 0, 1]]</a:documentation>
        <ref name="python_code"/>
      </element>
    </choice>
  </define>
  <!--
    Choice of input method for initial/boundary conditions
    version for real tensor
  -->
  <define name="input_choice_real_dim_tensor">
    <choice>
      <element name="constant">
        <a:documentation>Constant tensor</a:documentation>
        <ref name="real_dim_tensor"/>
      </element>
      <element name="python">
        <a:documentation>Python command prescribing tensor input.

An example that returns the three-dimensional identity:

 def val(X, t):
   return [[1, 0, 0],
               [0, 1, 0],
               [0, 0, 1]]</a:documentation>
        <ref name="python_code"/>
      </element>
    </choice>
  </define>
  <define name="input_choice_tensor_field">
    <choice>
      <element name="isotropic">
        <a:documentation>An isotropic tensor, i.e.
one with no directional variation.
Can be represented as a scalar real.</a:documentation>
        <ref name="input_choice_real"/>
      </element>
      <element name="diagonal">
        <a:documentation>A diagonal tensor, i.e.
one with only diagonal nonzero entries.
Can be represented as a vector real.</a:documentation>
        <ref name="input_choice_real_dim_vector"/>
      </element>
      <element name="anisotropic_symmetric">
        <a:documentation>A symmetric tensor, i.e.
A^T = A</a:documentation>
        <ref name="input_choice_real_dim_symmetric_tensor"/>
      </element>
      <element name="anisotropic_asymmetric">
        <a:documentation>A general asymmetric tensor.</a:documentation>
        <ref name="input_choice_real_dim_tensor"/>
      </element>
    </choice>
  </define>
  <define name="input_choice_dim_minus_one_tensor_field">
    <choice>
      <element name="isotropic">
        <ref name="input_choice_real"/>
      </element>
      <element name="anisotropic_symmetric">
        <ref name="input_choice_real_dim_minus_one_symmetric_tensor"/>
      </element>
      <element name="anisotropic_asymmetric">
        <ref name="input_choice_real_dim_minus_one_tensor"/>
      </element>
    </choice>
  </define>
  <!--
    Choice of input method for initial/boundary conditions
    version for real symmetric tensor
  -->
  <define name="input_choice_real_dim_minus_one_symmetric_tensor">
    <element name="constant">
      <a:documentation>Constant symmetric tensor</a:documentation>
      <ref name="real_dim_minus_one_symmetric_tensor"/>
    </element>
  </define>
  <!--
    Choice of input method for initial/boundary conditions
    version for real tensor
  -->
  <define name="input_choice_real_dim_minus_one_tensor">
    <element name="constant">
      <a:documentation>Constant tensor</a:documentation>
      <ref name="real_dim_minus_one_tensor"/>
    </element>
  </define>
  <define name="region_ids">
    <element name="region_ids">
      <a:documentation>Optional region ids to associate different values
to different regions of the mesh.
Leave unselected if you`re not using multiple regions or
region_ids.
Currently only works with triangle files created by gmsh2triangle.</a:documentation>
      <ref name="integer_vector"/>
    </element>
  </define>
  <define name="input_choice_real_bc_component">
    <choice>
      <ref name="input_choice_real_plus_field"/>
      <element name="synthetic_eddy_method">
        <element name="number_of_eddies">
          <a:documentation>use a large number to ensure Gaussian 
behaviour of the fluctuating component</a:documentation>
          <ref name="integer"/>
        </element>
        <element name="turbulence_lengthscale">
          <ref name="input_choice_real"/>
        </element>
        <element name="mean_profile">
          <a:documentation>mean profile

usually a function of height,
for ABL simulations use a log profile</a:documentation>
          <ref name="input_choice_real"/>
        </element>
        <element name="Re_stresses_profile">
          <a:documentation>Reynolds stresses profile

usually a function of height,
assumes that the remaining stresses are negligible </a:documentation>
          <ref name="input_choice_real"/>
        </element>
      </element>
      <element name="foam_flow">
        <optional>
          <element name="factor">
            <a:documentation>use the normal component of the remapped foam velocity </a:documentation>
            <ref name="integer"/>
          </element>
        </optional>
      </element>
    </choice>
  </define>
  <define name="vtu_input_format">
    <element name="format">
      <a:documentation>vtu input file format.</a:documentation>
      <attribute name="name">
        <value>vtu</value>
      </attribute>
      <optional>
        <element name="field_name">
          <a:documentation>The field to read from the vtu file. If not supplied, the name of
the initialised field is used.</a:documentation>
          <ref name="anystring"/>
          <ref name="comment"/>
        </element>
      </optional>
      <ref name="comment"/>
    </element>
  </define>
  <define name="netcdf_input_format">
    <element name="format">
      <a:documentation>NetCDF CF 1.4 (http://cf-pcmdi.llnl.gov/)</a:documentation>
      <attribute name="name">
        <value>NetCDF - CF 1.x</value>
      </attribute>
      <ref name="comment"/>
    </element>
  </define>
</grammar>
