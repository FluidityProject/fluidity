<?xml version="1.0" encoding="UTF-8"?>
<grammar xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0" xmlns="http://relaxng.org/ns/structure/1.0" datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes">
  <define name="spatial_discretisation_options">
    <element name="spatial_discretisation">
      <choice>
        <ref name="continuous_galerkin_options"/>
        <ref name="discontinuous_galerkin_options"/>
        <ref name="pure_cv_options"/>
        <ref name="coupled_cv_options"/>
        <ref name="finite_volume_options"/>
      </choice>
      <ref name="conservative_advection_option"/>
    </element>
  </define>
  <define name="finite_volume_options">
    <element name="finite_volume">
      <a:documentation>**DO NOT USE!**
UNDER DEVELOPMENT</a:documentation>
      <element name="mass_terms">
        <a:documentation>Discretisation options for the mass terms.</a:documentation>
        <optional>
          <element name="exclude_mass_terms">
            <a:documentation>Remove the mass terms from the equation. This requires an
implicitness factor theta = 1.0 (under
temporal_discretisation).</a:documentation>
            <empty/>
          </element>
        </optional>
      </element>
      <element name="advection_terms">
        <a:documentation>Discretisation options for the advection terms.</a:documentation>
        <element name="exclude_advection_terms">
          <a:documentation>Remove the advection terms from the equation.
This overrides any other advection term options (including
conservative_advection below).</a:documentation>
          <ref name="comment"/>
        </element>
      </element>
      <ref name="comment"/>
    </element>
  </define>
  <define name="conservative_advection_option">
    <element name="conservative_advection">
      <a:documentation>Conservative discretisation of field advection equation
 TBETA=1. -- conservative (divergence form)
 TBETA=0. -- non-conservative
 0. &lt; TBETA &lt; 1.</a:documentation>
      <ref name="real"/>
    </element>
  </define>
  <define name="continuous_galerkin_options">
    <element name="continuous_galerkin">
      <a:documentation>Continuous Galerkin formulation</a:documentation>
      <ref name="advection_stabilisation_options"/>
      <ref name="cg_advection_terms"/>
      <ref name="cg_mass_terms"/>
      <ref name="comment"/>
    </element>
  </define>
  <define name="cg_advection_terms">
    <element name="advection_terms">
      <a:documentation>Discretisation options for the advection terms.</a:documentation>
      <optional>
        <element name="integrate_advection_by_parts">
          <a:documentation>Integrate the advection terms of the advection equation by
parts.</a:documentation>
          <ref name="comment"/>
        </element>
      </optional>
      <optional>
        <element name="exclude_advection_terms">
          <a:documentation>Remove the advection terms from the equation.
This overrides any other advection term options (including
conservative_advection below).</a:documentation>
          <ref name="comment"/>
        </element>
      </optional>
      <optional>
        <element name="only_sinking_velocity">
          <a:documentation>Disable advection, but still permit a sinking velocity.
Useful for pseudo-1D simulations involving biology</a:documentation>
          <empty/>
        </element>
      </optional>
    </element>
  </define>
  <define name="cg_mass_terms">
    <element name="mass_terms">
      <a:documentation>Discretisation options for the mass terms.</a:documentation>
      <optional>
        <element name="lump_mass_matrix">
          <a:documentation>Lump the mass matrix</a:documentation>
          <empty/>
        </element>
      </optional>
      <optional>
        <element name="exclude_mass_terms">
          <a:documentation>Remove the mass terms from the equation. This requires an
implicitness factor theta = 1.0 (under
temporal_discretisation).</a:documentation>
          <empty/>
        </element>
      </optional>
    </element>
  </define>
  <define name="discontinuous_galerkin_options">
    <element name="discontinuous_galerkin">
      <a:documentation>Discontinuous galerkin formulation. You can also use this
formulation with a continuous field in which case a simple
galerkin formulation will result.</a:documentation>
      <ref name="dg_advection_scheme"/>
      <ref name="dg_diffusion_scheme"/>
      <ref name="dg_upwind_stabilisation"/>
      <ref name="dg_mass_terms"/>
    </element>
  </define>
  <define name="dg_advection_scheme">
    <element name="advection_scheme">
      <choice>
        <element name="upwind">
          <a:documentation>Straightforward upwinding of the nonlinear velocity.
This uses SU stabilisation with optimal choice for the
stabilisation parameter, and stabilisation parameter
scale factor 0.5.</a:documentation>
          <empty/>
        </element>
        <element name="lax_friedrichs">
          <a:documentation>Modified Lax-Friedrichs flux.</a:documentation>
          <empty/>
        </element>
        <element name="none">
          <a:documentation>Disable advection</a:documentation>
          <empty/>
        </element>
      </choice>
      <optional>
        <element name="project_velocity_to_continuous">
          <a:documentation>Project the advecting velocity to continuous
space. This is useful for obtaining bounded
advection schemes.</a:documentation>
          <choice>
            <element name="mesh">
              <a:documentation>The mesh to which the projection should occur.</a:documentation>
              <attribute name="name">
                <value>CoordinateMesh</value>
              </attribute>
            </element>
            <element name="mesh">
              <attribute name="name">
                <data type="string"/>
              </attribute>
            </element>
          </choice>
        </element>
      </optional>
      <element name="integrate_advection_by_parts">
        <a:documentation>Integrate the advection terms of the
advection-diffusion equation by parts.
Integrating the advection term by parts is
necessary for a discontinuous
galerkin discretisation however it is possible to
select how many times the
integration by parts is performed.
Twice is the norm.</a:documentation>
        <choice>
          <element name="twice">
            <a:documentation>If activated the element advection matrix takes the form:
   /                                 /
   | N_A (nu dot grad N_B) dV + beta | N_A ( div nu ) N_B dV
   /                                 /
     /                                         /
 + I | N_A_i (nu dot n) N_B_o ds + [(1-I) - 1] | N_A_i (nu dot n) N_B_i ds
     /                                         /
where beta is set in conservative_advection,
N is a shape function (uppercase
subscripts indicate nodes A or B while
lowercase subscripts indicate inner or outer
faces i and o respectively), nu is the
nonlinear velocity and n is the outward
pointing normal from the element.</a:documentation>
            <empty/>
          </element>
          <element name="once">
            <a:documentation>If activated the element advection matrix takes the form:
   /                                        /
 - | (grad N_A dot nu) N_B dV - (1. - beta) | N_A ( div nu ) N_B dV
   /                                        /
     /                                   /
 + I | N_A_i (nu dot n) N_B_o ds + (1-I) | N_A_i (nu dot n) N_B_i ds
     /                                   /
where beta is set in conservative_advection,
N is a shape function (uppercase
subscripts indicate nodes A or B while
lowercase subscripts indicate inner or outer
faces i and o respectively), nu is the
nonlinear velocity and n is the outward
pointing normal from the element.</a:documentation>
            <empty/>
          </element>
        </choice>
      </element>
      <optional>
        <element name="integrate_conservation_term_by_parts">
          <a:documentation>If activated the conservation term:
 /
 | N_A ( div nu ) N_B dV
 /
is integrated_by_parts such that the element
advection matrix becomes:
        /                                        /
 - beta | (grad N_A dot nu) N_B dV + (1. - beta) | N_A (nu dot grad N_B) dV
        /                                        /
     /                                                /
 + I | N_A_i (nu dot n) N_B_o ds + [(1-I) - (1-beta)] | N_A_i (nu dot n) N_B_i ds
     /                                                /
where beta is set in conservative_advection, N is
a shape function (uppercase
subscripts indicate nodes A or B while lowercase
subscripts indicate inner or outer
faces i and o respectively), nu is the nonlinear
velocity and n is the outward pointing normal
from the element.
This is invariant regardless of whether the main
advection term is integrated by parts once or
twice.</a:documentation>
          <empty/>
        </element>
      </optional>
    </element>
  </define>
  <define name="dg_diffusion_scheme">
    <element name="diffusion_scheme">
      <choice>
        <element name="compact_discontinuous_galerkin">
          <a:documentation>Compact discontinuous Galerkin scheme.
(Peraire and Persson SIAM J. Sci. Comput. 30, p1806)</a:documentation>
          <optional>
            <element name="penalty_parameter">
              <a:documentation>Penalty_parameter
Add penalty term Int [u][v] dS on element boundaries
scaled by C_0</a:documentation>
              <ref name="real"/>
            </element>
          </optional>
        </element>
        <element name="bassi_rebay">
          <a:documentation>Classical scheme from Bassi and Rebay
(JCP 131 267-179 1997)</a:documentation>
          <empty/>
        </element>
        <element name="interior_penalty">
          <a:documentation>Classical interior penalty scheme
see, e.g., SIAM Journal on Numerical Analysis
Vol. 39, No. 5 (2002), pp. 1749-1779</a:documentation>
          <element name="penalty_parameter">
            <a:documentation>Penalty_parameter
The penalty term Int [u][v] dS on element boundaries
is scaled by C = C_0 h**p
This option specifies the C_0
There is a theoretical lower bound for
stability and hence convergence</a:documentation>
            <ref name="real"/>
          </element>
          <element name="edge_length_power">
            <a:documentation>Penalty_parameter
The penalty term Int [u][v] dS on element boundaries
is scaled by C = C_0 h**p
This option specifies p
Theoretically p=-1 is required for linear elements</a:documentation>
            <ref name="real"/>
          </element>
          <element name="edge_length_option">
            <a:documentation>Option for how to compute the edge length h</a:documentation>
            <choice>
              <element name="use_face_integral">
                <a:documentation>Use face integral (take sqrt in 3D)</a:documentation>
                <empty/>
              </element>
              <element name="use_element_centres">
                <a:documentation>Use difference between element centre
and neighbour centre
Use 2x distance to face centre on boundaries</a:documentation>
                <empty/>
              </element>
            </choice>
          </element>
        </element>
        <element name="masslumped_rt0">
          <a:documentation>EXPERIMENTAL, DO NOT USE!!!
Only works for P0 in 2d.</a:documentation>
          <choice>
            <element name="arbogast">
              <a:documentation>Use the masslumping based on T. Arbogast and Z. Chen, Math. of Comp.
vol.64 nr. 211, 1995. This assumes a homeomorphism between the triangular
mesh and an equilateral mesh (true for structured 2d meshes in which all
across edges that split up the quads are oriented in the same way). Gives
accurate results for such meshes, gives very inaccurate results for other meshes.</a:documentation>
              <empty/>
            </element>
            <element name="circumcentred">
              <a:documentation>Use the distance between circumcentres of the triangles. This comes down to a finite
volume scheme where the diffusive fluxes are computed taking the difference in
adjacent circumcentres, divided by the difference in these centres. Smaller stencil
and works better for non-structured triangular meshes, but the accuracy still depends
on the mesh quality (obtuse triangles reduce the accuracy).</a:documentation>
              <empty/>
            </element>
          </choice>
        </element>
      </choice>
    </element>
  </define>
  <define name="dg_upwind_stabilisation">
    <optional>
      <element name="upwind_stabilisation">
        <a:documentation>This introduces a simple upwind diffusion based on eqn 2.52 in
Donea and Huerta (2003) "Finite elements for flow problems".</a:documentation>
        <empty/>
      </element>
    </optional>
    <optional>
      <choice>
        <element name="slope_limiter">
          <a:documentation>Vertex-based slope limiter from D. Kuzmin, "A
vertex-based hierarchical slope limiter for
p-adaptive discontinuous Galerkin methods",
J. Comp Appl. Math. 233/12 (2010)
DOI: 10.1016/j.cam.2009.05.028</a:documentation>
          <attribute name="name">
            <value>Vertex_Based</value>
          </attribute>
        </element>
        <element name="slope_limiter">
          <attribute name="name">
            <value>Cockburn_Shu</value>
          </attribute>
          <element name="TVB_factor">
            <a:documentation>TVB tolerance parameter, below this value (scaled by
dx**2) no limiting is done.
Reduce to do more limiting, increase to do less
Minimum value 0.0
Suggested value 5.0</a:documentation>
            <ref name="real"/>
          </element>
          <optional>
            <element name="tolerate_negative_weights">
              <a:documentation>Tolerate negative weights in the reconstruction
Algorithm finds the "least bad" coordinates to use.
May lead to overshoots on funky meshes.</a:documentation>
              <empty/>
            </element>
          </optional>
          <element name="limit_factor">
            <a:documentation>Limit factor
This value is used to scale the reconstructed slope
Minimum value 1.0
Suggested value 1.1</a:documentation>
            <ref name="real"/>
          </element>
        </element>
        <element name="slope_limiter">
          <a:documentation>Hermite-WENO limiter</a:documentation>
          <attribute name="name">
            <value>Hermite_Weno</value>
          </attribute>
          <element name="power_coefficient">
            <a:documentation>Power coefficient in weights.
This must be a positive number, possibly
an integer. Larger power coefficient leads
to greater penalisation of oscillations, on
the other hand causes numerical problems if it
gets too big.
Suggested value = 4.</a:documentation>
            <ref name="real"/>
          </element>
          <element name="tolerance_threshold_oscillations">
            <a:documentation>Relative/absolute tolerance threshold for
oscillation indicator. Values below this emphasise
absolute rather than relative magnitudes of
tracer gradients.
Suggested value = 0.001*T
where T is a typical value of the tracer which
you might use in a scaling analysis.</a:documentation>
            <ref name="real"/>
          </element>
          <element name="tolerance_threshold_weights">
            <a:documentation>Relative/absolute tolerance threshold for
weights. Values below this emphasise
absolute rather than relative magnitudes of
oscillations indicator.
Suggested value = 1.0e-3</a:documentation>
            <ref name="real"/>
          </element>
          <element name="discontinuity_tolerance">
            <a:documentation>Tolerance for discontinuity detector.
Uses method of
http://www.gce.ucl.ac.be/~remacle/pdf/detect.pdf
Detector values greater than this indicate
discontinuities at the inflow boundary
Suggested value = L^(-p-1)/2)
where L is the horizontal lengthscale
and p is the polynomial order</a:documentation>
            <ref name="real"/>
          </element>
          <element name="limit_tolerance">
            <a:documentation>Tolerance for limiter
Doesn't apply limiter if max abs value of tracer
over the element is below this tolerance
Recommended value is something very small
but not zero</a:documentation>
            <ref name="real"/>
          </element>
          <choice>
            <element name="boundary_treatment">
              <a:documentation>At boundaries there are less polynomials to
construct. With this option, the missing
polynomials are simply ignored.</a:documentation>
              <attribute name="name">
                <value>ignore_missing_polys</value>
              </attribute>
            </element>
            <element name="boundary_treatment">
              <a:documentation>At boundaries there are less polynomials to
construct. With this option, the missing
polynomials are replaced with the polynomial
in the current element.</a:documentation>
              <attribute name="name">
                <value>replace_missing_polys</value>
              </attribute>
            </element>
            <element name="boundary_treatment">
              <a:documentation>At boundaries there are less polynomials to
construct. With this option, the reconstruction
is applied at one order down.
Since HWENO currently only works for P1,
this amounts to L_2 projection to P0.</a:documentation>
              <attribute name="name">
                <value>lower_order</value>
              </attribute>
            </element>
          </choice>
          <optional>
            <element name="debugging">
              <a:documentation>Switch to chuck out lots of debugging output.
Not for production runs.</a:documentation>
              <empty/>
            </element>
          </optional>
          <optional>
            <element name="leave_out_hermite_polynomials">
              <a:documentation>Don't include Hermite polynomials.</a:documentation>
              <empty/>
            </element>
          </optional>
        </element>
        <element name="slope_limiter">
          <attribute name="name">
            <value>minimal</value>
          </attribute>
        </element>
        <element name="slope_limiter">
          <a:documentation>The experimental Farrell-Piggott-Nelson limiter</a:documentation>
          <attribute name="name">
            <value>FPN</value>
          </attribute>
          <optional>
            <!--
                         element limit_from_previous_time_step {
                            empty
                         }?,
                         element exclude_current_node {
                            empty
                         }?,
                         element max_upper_bound {
                            real
                         }?,
                         element min_lower_bound {
                            real
                         }?,
                         element monotomic {
                            empty
                         }?,
            -->
            <element name="mid-point_scheme">
              <a:documentation>Option allowing the user to include the neighbouring
elements "mid-point" in the calculation.</a:documentation>
              <element name="beta">
                <a:documentation>beta=0.5 -&gt; include mid-point value in the bounds.
beta=1.0 -&gt; include opposite node value in the bounds.</a:documentation>
                <ref name="real"/>
              </element>
              <optional>
                <element name="extrapolate">
                  <a:documentation>Create additional values to include in the calculation
of the bounds by extrapolating along the direction of the
faces of the element in question.</a:documentation>
                  <empty/>
                </element>
              </optional>
            </element>
          </optional>
          <optional>
            <element name="pre_distribute_mass">
              <a:documentation>Re-distribute mass prior to the diffusion if nodal
values within an element are both above and below the
provided bounds.</a:documentation>
              <empty/>
            </element>
          </optional>
        </element>
      </choice>
    </optional>
  </define>
  <define name="dg_mass_terms">
    <optional>
      <element name="mass_terms">
        <a:documentation>Discretisation options for the mass terms.</a:documentation>
        <optional>
          <element name="exclude_mass_terms">
            <a:documentation>Remove the mass terms from the equation.</a:documentation>
            <empty/>
          </element>
        </optional>
      </element>
    </optional>
  </define>
  <define name="pure_cv_options">
    <element name="control_volumes">
      <a:documentation>Use a pure control volume discretisations.
Follows a new control volume code path.</a:documentation>
      <optional>
        <element name="mass_terms">
          <a:documentation>Options dealing with the mass terms in the equation.</a:documentation>
          <optional>
            <element name="exclude_mass_terms">
              <a:documentation>Exclude the mass terms from the advection-diffusion type equation.</a:documentation>
              <empty/>
            </element>
          </optional>
        </element>
      </optional>
      <ref name="spatial_control_volume_options"/>
      <choice>
        <element name="diffusion_scheme">
          <a:documentation>Use the gradient of the field constructed using the
basis functions of the parent finite element mesh to
form the divergence.

DOES NOT CURRENTLY WORK WITH WEAK DIRICHLET BOUNDARY CONDITIONS!

Based on schemes in Handbook of Numerical Analysis,
P.G. Ciarlet, J.L. Lions eds, vol 7, pp 713-1020</a:documentation>
          <attribute name="name">
            <value>ElementGradient</value>
          </attribute>
        </element>
        <element name="diffusion_scheme">
          <a:documentation>Use an auxiliary gradient equation to find the gradient of the field.

DOES NOT CURRENTLY WORK WITH ROBIN BOUNDARY CONDITIONS!

Based on scheme proposed in Bassi, F. &amp; Rebay, S., A
high-order accurate discontinuous finite element method
for the numerical solution of the compressible
Navier-Stokes equations, Journal Of Computational
Physics, 1997, 131, 267-279</a:documentation>
          <attribute name="name">
            <value>BassiRebay</value>
          </attribute>
        </element>
      </choice>
    </element>
  </define>
  <define name="coupled_cv_options">
    <element name="coupled_cv">
      <a:documentation>Use a pure control volume discretisations with face value
restrictions between different fields in different material_phases.

THIS DOES NOT WORK WITH DIFFUSION!

Follows a new control volume code path.</a:documentation>
      <ref name="coupled_spatial_control_volume_options"/>
      <element name="parent_sum">
        <a:documentation>Set the maximum and minimum bounds for the sum up to and including this field.
This defines the limiter used to enforce boundedness on this field.</a:documentation>
        <element name="target_maximum">
          <ref name="real"/>
        </element>
        <element name="target_minimum">
          <ref name="real"/>
        </element>
      </element>
    </element>
  </define>
  <define name="spatial_control_volume_options_excluding_none">
    <ref name="compressive_control_volume_options"/>
  </define>
  <define name="spatial_control_volume_options_excluding_none" combine="choice">
    <ref name="standard_control_volume_options"/>
  </define>
  <define name="spatial_control_volume_options">
    <ref name="no_advection_control_volume_options"/>
  </define>
  <define name="spatial_control_volume_options" combine="choice">
    <ref name="compressive_control_volume_options"/>
  </define>
  <define name="spatial_control_volume_options" combine="choice">
    <ref name="standard_control_volume_options"/>
  </define>
  <define name="standard_control_volume_options">
    <choice>
      <element name="face_value">
        <a:documentation>First Order Upwind face value discretisation
 face_value = donor_value,
where
 donor_value = income*val_1 + (1.-income)*val_2,
where val_i is the value on the ith node neighbouring the face and
income = [0, 1] depending on whether the flow is coming from node 1 or 2
First order upwinding is monotonic so no limiting is ever required</a:documentation>
        <attribute name="name">
          <value>FirstOrderUpwind</value>
        </attribute>
        <empty/>
      </element>
      <element name="face_value">
        <a:documentation>Trapezoidal face value discretisation
 face_value = 0.5*(val_1 + val_2),
where
 val_i is the value on the ith node neighbouring the face

Trapezoidal discretisation is unbounded so limiting is compulsory</a:documentation>
        <attribute name="name">
          <value>Trapezoidal</value>
        </attribute>
        <ref name="limiter_options"/>
      </element>
      <element name="face_value">
        <a:documentation>Finite Element face value discretisation
 face_value = finite element interpolation from surrounding nodes

Finite element discretisation may become unbounded so limiting is often necessary.</a:documentation>
        <attribute name="name">
          <value>FiniteElement</value>
        </attribute>
        <optional>
          <element name="only_sinking_velocity">
            <a:documentation>Disable advection, but still permit a sinking velocity.
Useful for pseudo-1D simulations involving biology</a:documentation>
            <empty/>
          </element>
        </optional>
        <ref name="limiter_options"/>
      </element>
      <element name="face_value">
        <a:documentation>First Order Downwind face value discretisation
 face_value = downwind_value,
where
 donor_value = (1.-income)*val_1 + income*val_2,
where val_i is the value on the ith node neighbouring the face and
income = [0, 1] depending on whether the flow is coming from node 1 or 2
First order downwinding is unconditionally unstable</a:documentation>
        <attribute name="name">
          <value>FirstOrderDownwind</value>
        </attribute>
        <empty/>
      </element>
    </choice>
  </define>
  <define name="no_advection_control_volume_options">
    <element name="face_value">
      <a:documentation>No face value - i.e. no advection!</a:documentation>
      <attribute name="name">
        <value>None</value>
      </attribute>
      <empty/>
    </element>
  </define>
  <define name="coupled_spatial_control_volume_options">
    <ref name="coupled_control_volume_options"/>
  </define>
  <define name="coupled_spatial_control_volume_options" combine="choice">
    <ref name="compressive_control_volume_options"/>
  </define>
  <!--
    coupled control volume options are the same as the standard ones (annoyingly copied and pasted)
    except that firstorderupwind gets limiter options
  -->
  <define name="coupled_control_volume_options">
    <choice>
      <element name="face_value">
        <a:documentation>First Order Upwind face value discretisation
 face_value = donor_value,
where
 donor_value = income*val_1 + (1.-income)*val_2,
where val_i is the value on the ith node neighbouring the face and
income = [0, 1] depending on whether the flow is coming from node 1 or 2
First order upwinding is monotonic so no limiting is ever required</a:documentation>
        <attribute name="name">
          <value>FirstOrderUpwind</value>
        </attribute>
        <ref name="limiter_options"/>
      </element>
      <element name="face_value">
        <a:documentation>Trapezoidal face value discretisation
 face_value = 0.5*(val_1 + val_2),
where
 val_i is the value on the ith node neighbouring the face

Trapezoidal discretisation is unbounded so limiting is compulsory</a:documentation>
        <attribute name="name">
          <value>Trapezoidal</value>
        </attribute>
        <ref name="limiter_options"/>
      </element>
      <element name="face_value">
        <a:documentation>Finite Element face value discretisation
 face_value = finite element interpolation from surrounding nodes

Finite element discretisation may become unbounded so limiting is often necessary.</a:documentation>
        <attribute name="name">
          <value>FiniteElement</value>
        </attribute>
        <ref name="limiter_options"/>
      </element>
    </choice>
  </define>
  <define name="compressive_control_volume_options">
    <choice>
      <element name="face_value">
        <a:documentation>HyperC face value discretisation

face_value calculated from upper bound of explicit TVD zone of NVD diagram
Normally used for MaterialVolumeFraction fields</a:documentation>
        <attribute name="name">
          <value>HyperC</value>
        </attribute>
        <optional>
          <ref name="upwind_value_options"/>
        </optional>
        <ref name="cv_face_cfl_number_options"/>
      </element>
      <element name="face_value">
        <a:documentation>UltraC face value discretisation

face_value calculated from extended upper bound of
explicit TVD zone of NVD diagram assuming
values bounded by target_maximum and target_minimum.</a:documentation>
        <attribute name="name">
          <value>UltraC</value>
        </attribute>
        <element name="target_maximum">
          <a:documentation>Specifiy the upper bound which UltraC will use to
calculate the maximum flux.</a:documentation>
          <ref name="real"/>
        </element>
        <element name="target_minimum">
          <a:documentation>Specifiy the lower bound which UltraC will use to
calculate the minimum flux.</a:documentation>
          <ref name="real"/>
        </element>
        <optional>
          <ref name="upwind_value_options"/>
        </optional>
        <ref name="cv_face_cfl_number_options"/>
      </element>
      <element name="face_value">
        <a:documentation>**UNDER TESTING**

PotentialUltraC face value discretisation

face_value calculated from extended upper bound of
explicit TVD zone of NVD diagram if potential
value of field is sufficient (as specified by
target_maximum) to ensure the correct front advection
velocity.

If not then either switch to HyperC or use a modified flux
based on the potential function.</a:documentation>
        <attribute name="name">
          <value>PotentialUltraC</value>
        </attribute>
        <element name="target_maximum">
          <a:documentation>Specifiy the upper bound which PotentialUltraC will use
to calculate the maximum flux if the potential function
value is sufficient to maintain the correct front
advection velocity.</a:documentation>
          <ref name="real"/>
        </element>
        <element name="target_minimum">
          <a:documentation>Specifiy the lower bound which PotentialUltraC will use to calculate the minimum flux.</a:documentation>
          <ref name="real"/>
        </element>
        <choice>
          <element name="switch_to_hyperc">
            <a:documentation>Select what PotentialUltraC should do if the
potential function value does not reach the required
value specified by the target_maximum.

Switch to using HyperC face values.  This ensures
that the advection velocity is correct however may
create isolated regions beneath the target_maximum.</a:documentation>
            <empty/>
          </element>
          <element name="use_potential_flux">
            <a:documentation>Select what PotentialUltraC should do if the
potential function value does not reach the required
value specified by the target_maximum.

Modify the maximum nodal values (both downwind and
upwind) so that the fluxes are at their maximum
possible without affecting the front advection
velocity.</a:documentation>
            <empty/>
          </element>
        </choice>
        <optional>
          <ref name="upwind_value_options"/>
        </optional>
        <ref name="cv_face_cfl_number_options"/>
      </element>
    </choice>
  </define>
  <!--
    standard control volume face value options that
    have NO reliance on any CFL field.
  -->
  <define name="standard_control_volume_options_excluding_cfl">
    <choice>
      <element name="face_value">
        <a:documentation>First Order Upwind face value discretisation
 face_value = donor_value,
where
 donor_value = income*val_1 + (1.-income)*val_2,
where val_i is the value on the ith node neighbouring the face and
income = [0, 1] depending on whether the flow is coming from node 1 or 2
First order upwinding is monotonic so no limiting is ever required</a:documentation>
        <attribute name="name">
          <value>FirstOrderUpwind</value>
        </attribute>
        <empty/>
      </element>
      <element name="face_value">
        <a:documentation>Trapezoidal face value discretisation
 face_value = 0.5*(val_1 + val_2),
where
 val_i is the value on the ith node neighbouring the face

Trapezoidal discretisation is unbounded so limiting is compulsory</a:documentation>
        <attribute name="name">
          <value>Trapezoidal</value>
        </attribute>
        <ref name="limiter_options_excluding_cfl"/>
      </element>
      <element name="face_value">
        <a:documentation>Finite Element face value discretisation
 face_value = finite element interpolation from surrounding nodes

Finite element discretisation may become unbounded so limiting is often necessary.</a:documentation>
        <attribute name="name">
          <value>FiniteElement</value>
        </attribute>
        <optional>
          <element name="only_sinking_velocity">
            <a:documentation>Disable advection, but still permit a sinking velocity.
Useful for pseudo-1D simulations involving biology</a:documentation>
            <empty/>
          </element>
        </optional>
        <ref name="limiter_options_excluding_cfl"/>
      </element>
      <element name="face_value">
        <a:documentation>First Order Downwind face value discretisation
 face_value = downwind_value,
where
 donor_value = (1.-income)*val_1 + income*val_2,
where val_i is the value on the ith node neighbouring the face and
income = [0, 1] depending on whether the flow is coming from node 1 or 2
First order downwinding is unconditionally unstable</a:documentation>
        <attribute name="name">
          <value>FirstOrderDownwind</value>
        </attribute>
        <empty/>
      </element>
    </choice>
  </define>
</grammar>
