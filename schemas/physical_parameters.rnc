physical_parameter_options =
   element physical_parameters {
      gravity_options?,
      coriolis_options?
      }

gravity_options =
   ## Set a gravity to be included in the buoyancy term.
   element gravity {
      ## Acceleration due to gravity. 9.8 m/s^2 on earth.
      element magnitude {
         real
      },
      ## The direction of the gravity vector.
      element vector_field {
         attribute name { "GravityDirection" },
         attribute rank { "1" },
         element prescribed {
            coordinate_mesh_choice,
            prescribed_vector_field_no_adapt
         }
      }
   }

coriolis_options =
   ## Options relating to Coriolis force. The rotation vector is
   ## assumed to be in the z-direction:
   ##
   ##   F_C = 2 \Omega \hat{k} \times u = f \hat{k} \times u
   element coriolis {
      (
         f_plane_options|
         beta_plane_options|
         ## Full Coriolis parameter:
         ##   f = 2 omega sin (latitude)
         ## where latitude=y/R_earth+latitude_0
         ##
         ## Specify omega and R_earth and latitude_0
         element sine_of_latitude {
            ## Full Coriolis parameter:
            ##   f = 2 omega sin (latitude)
            ## where latitude=y/R_earth+latitude_0
            element omega {
               real
            },
            ## Full Coriolis parameter:
            ##   f = 2 omega sin (latitude)
            ## where latitude=y/R_earth+latitude_0
            ##
            ## Suggested value for R_earth: 6.371e6
            element R_earth {
               real
            },
            ## Full Coriolis parameter:
            ##   f = 2 omega sin (latitude)
            ## where
            ##   latitude=y/R_earth+latitude_0
            ## latitude_0 is the latitude of y=0
            element latitude_0 {
               real
            }
         }|
         ## Full representation on sphere
         element on_sphere {
            ## Earth rotation rate
            ##
            ## Suggested value: 2 pi / 86400 = 7.27220522e-5
            element omega {
               real
            }
         }|
         ## As f_plane, but with the value for f set using a python
         ## function. Allows for time varying rotation rate.
         ##
         ## Functions should be of the form:
         ##
         ##  def val(t):
         ##     # Function code
         ##     return # Return value
         ##
         ## where the return value is a float.
         element python_f_plane {
            python_code
         }
      )
   }

f_plane_options =
   ## f-plane approximation
   ## This means the Coriolis force looks like:
   ##   f k x u
   ## where k is the z unit vector
   ##    and u the velocity vector
   ##    and f is constant
   element f_plane {
         ## f-plane approximation
         ## This means the Coriolis force looks like:
         ##   f k x u
         ## where k is the z unit vector
         ##    and u the velocity vector
         ##    and f is constant
         element f {
            real
         }
      }

beta_plane_options =
   ## Beta-plane approximation
   ## This means the Coriolis force looks like:
   ##   f k x u
   ## where k is the z unit vector
   ##    and u the velocity vector
   ##    and f=f_0+beta . (x,y,z)
   element beta_plane {
      ## Beta-plane approximation
      ## This means the Coriolis force looks like:
      ##   f k x u
      ## where k is the z unit vector
      ##    and u the velocity vector
      ##    and f=f_0+beta . (x,y,z)
      element f_0 {
         real
      },
      ## Beta-plane approximation
      ## This means the Coriolis force looks like:
      ##   f k x u
      ## where k is the z unit vector
      ##    and u the velocity vector
      ##    and f=f_0+beta . (x,y,z)
      ## usually only the y-component of beta is non-zero
      element beta {
         real_dim_vector
      }
   }
