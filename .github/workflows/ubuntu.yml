name: Build and test

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:

  build:
    name: Build - ${{ matrix.distribution }}
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        distribution: [bionic, focal]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          file: docker/actions/Dockerfile.actions.${{ matrix.distribution }}
          push: true
          tags: fluidity/actions:${{ matrix.distribution }}-${{ github.sha }}

  unit-test:
    name: Unit Tests - ${{ matrix.distribution }}
    runs-on: ubuntu-latest
    needs: build

    strategy:
      fail-fast: false
      matrix:
        distribution: [bionic, focal]
        output: [unit-tests.xml]

    steps:
      - name: Run tests
        run: |
          chmod 777 .
          docker pull fluidity/actions:${{ matrix.distribution }}-${{ github.sha }}
          docker run -v $PWD:/host fluidity/actions:${{ matrix.distribution }}-${{ github.sha }} \
          /bin/bash -c "make unittest &&
          cp -v tests/${{ matrix.output }} /host/${{ matrix.distribution }}-${{ matrix.output }}"

      - name: Upload test report
        uses: actions/upload-artifact@v2
        with:
          path: ${{ matrix.distribution }}-${{ matrix.output }}
          name: xml_outputs

      - name: Publish test report
        uses: mikepenz/action-junit-report@v2
        if: always()
        with:
          report_paths: ${{ matrix.distribution }}-${{ matrix.output }}
          token: ${{ secrets.GITHUB_TOKEN }}
          check_name: JUnit Test Report - Unit Tests - ${{ matrix.distribution }}
          fail_on_failure: true

  short-test:
    name: Short Tests - ${{ matrix.distribution }}
    runs-on: ubuntu-latest
    needs: build

    strategy:
      fail-fast: false
      matrix:
        distribution: [bionic, focal]
        output: [short-tests.xml]

    steps:
      - name: Run tests
        run: |
          chmod 777 .
          docker pull fluidity/actions:${{ matrix.distribution }}-${{ github.sha }}
          docker run -v $PWD:/host fluidity/actions:${{ matrix.distribution }}-${{ github.sha }} \
          /bin/bash -c "make THREADS=2 test &&
          cp -v tests/${{ matrix.output }} /host/${{ matrix.distribution }}-${{ matrix.output }}"

      - name: Upload test report
        uses: actions/upload-artifact@v2
        with:
          path: ${{ matrix.distribution }}-${{ matrix.output }}
          name: xml_outputs

      - name: Publish test report
        uses: mikepenz/action-junit-report@v2
        if: always()
        with:
          report_paths: ${{ matrix.distribution }}-${{ matrix.output }}
          token: ${{ secrets.GITHUB_TOKEN }}
          check_name: JUnit Test Report - Short Tests - ${{ matrix.distribution }}
          fail_on_failure: true

  medium-test:
    name: Medium Tests - ${{ matrix.distribution }}
    runs-on: ubuntu-latest
    needs: build

    strategy:
      fail-fast: false
      matrix:
        distribution: [bionic, focal]
        output: [medium-tests.xml]

    steps:
      - name: Run tests
        run: |
          chmod 777 .
          docker pull fluidity/actions:${{ matrix.distribution }}-${{ github.sha }}
          docker run -v $PWD:/host fluidity/actions:${{ matrix.distribution }}-${{ github.sha }} \
          /bin/bash -c "make THREADS=2 mediumtest &&
          cp -v tests/${{ matrix.output }} /host/${{ matrix.distribution }}-${{ matrix.output }}"

      - name: Upload test report
        uses: actions/upload-artifact@v2
        with:
          path: ${{ matrix.distribution }}-${{ matrix.output }}
          name: xml_outputs

      - name: Publish test report
        uses: mikepenz/action-junit-report@v2
        if: always()
        with:
          report_paths: ${{ matrix.distribution }}-${{ matrix.output }}
          token: ${{ secrets.GITHUB_TOKEN }}
          check_name: JUnit Test Report - Medium Tests - ${{ matrix.distribution }}
          fail_on_failure: true

  long-test:
    name: Long Tests - ${{ matrix.test }}
    runs-on: ubuntu-latest
    needs: build

    strategy:
      fail-fast: false
      matrix:
        test: [mphase_tephra_settling_2d_adaptive,
               gyre_parallel,
               Stokes_square_convection_1e4_vv_p1p1,
               Stokes_square_convection_1e4_p1p1_Ra_Test,
               Stokes_square_convection_1e4_vv_gauss_p2p1,
               viscous_fs_drunkensailor,
               cylinder-3d-drag,
               viscosity_2d_p0_adaptive_parallel,
               circle-2d-drag,
               mphase_tephra_settling_3d,
               tidal_diagnostics,
               mms_burgers_dg_steady,
               mms_ns_p1bp1_steady,
               mms_ns_dg_steady_parallel,
               mms_burgers_cg_steady,
               mms_burgers_cg_structured_steady,
               mms_ns_cg_steady_full,
               foam_2d_p1dgp2_convergence,
               circular_duct_from_rest,
               mms_tracer_P1dg_cdg_diff_steady,
               mms_tracer_cg_supg_advdiff_steady,
               para_eddy,
               mms_ns_p1p1stabilised_steady,
               lock_exchange_3d,
               mms_tracer_p0_adv_steady_conservative,
               mms_tracer_cg_advdiff_steady,
               gls-MixedLayer,
               sphere-3D-drag-Re100,
               mms_ns_cg_steady,
               mms_tracer_P1dg_br_diff_steady,
               mphase_mms_p1dgp2_br,
               mphase_mms_p2p1_compressible_ie_heat_transfer,
               mphase_mms_p2p1_compressible_ie,
               mms_ns_p0p1_steady_periodic,
               mms_tracer_cv_advdiff_eg_steady,
               mms_ns_p1p1stabilised_supg_steady,
               sphere-3D-drag-Re1,
               mms_tracer_cv_diff_eg_steady,
               mms_tracer_cv_diff_steady_structured,
               mms_ns_p1lp1cv_steady_compressible,
               mphase_mms_p1dgp2_cdg,
               mms_tracer_cv_diff_steady,
               mms_tracer_p0_adv_steady,
               mms_ns_p0p1cv_steady_periodic,
               mphase_mms_p2p1_no_interactions,
               mms_ns_dg_steady,
               mphase_mms_p1dgp2_fpdrag,
               mms_tracer_cv_advdiff_steady,
               sphere-3D-drag-Re10,
               wetting_and_drying_thacker_dg_parallel,
               flow_past_sphere_Re1,
               flow_past_sphere_Re10,
               flow_past_sphere_Re100,
               particle_rayleigh_taylor_mu10,
               rotating_channel,
               tephra_settling,
               top_hat,
               water_collapse,
               stagnant_conical_island,
               lituya_bay_pseudo2dadapt,
               pseudo2dadapt_parallel_galerkinproj,
               mms_rans_p2p1_keps_linearmomentum_cv,
               mms_rans_p2p1_keps_lowRe,
               mphase_mms_p2p1_compressible_ie_p1cv_heat_transfer,
               mms_ns_p2lp1_steady_compressible,
               mphase_mms_p2p1_vfrac,
               lock_exchange_3d_dg,
               mms_rans_p1dgp2_upw_keps,
               mphase_mms_p2p1_compressible_ie_p1cv,
               mms_rans_p1dgp2_keps,
               open_ocean_deep_convection-parallel,
               mms_rans_p2p1_keps_linearmomentum,
               Stommel_tracer_advection,
               particle_stratified_stable_layer,
               spherical_benchmark_free_slip,
               spherical_benchmark_free_slip_p2bp1dg,
               spherical_benchmark_no_slip,
               spherical_benchmark_no_slip_p2bp1dg,
               spherical_benchmark_smooth_free_slip,
               spherical_benchmark_smooth_no_slip,
               backward_facing_step_2d,
               explicit-hyperc-shear,
               explicit-hyperc-shear-adapt,
               explicit-hyperc-superman,
               coarse-corner,
               gls-StationPapa,
               medp1dgp2,
               Stokes_mms_p1dg_p2,
               Stokes_subduction_zone_vanKeken2008_OneA,
               Stokes_subduction_zone_vanKeken2008_TwoB,
               lagrangian_detectors_3d_2e5,
               lock_exchange_2d_Lagrangian_paths,
               square-convection-1e6,
               wetting_and_drying_balzano1_dg_parallel]
               # Tests still failing and in need of fixing
               # lock_exchange
               # lock_exchange_3d_parallel
               # saltfinger2d_adaptive
               # driven_cavity

    steps:
      - name: Run test
        run: |
         chmod 777 .
         docker pull fluidity/actions:focal-${{ github.sha }}
         docker run -v $PWD:/host fluidity/actions:focal-${{ github.sha }} \
         /bin/bash -c "git clone https://github.com/fluidityproject/longtests &&
         bin/testharness -x focal-${{ matrix.test }}.xml -f ${{ matrix.test }}.xml &&
         cp -v focal-${{ matrix.test }}.xml /host"

      - name: Upload test report
        uses: actions/upload-artifact@v2
        with:
          path: focal-${{ matrix.test }}.xml
          name: xml_outputs

      - name: Publish test report
        uses: mikepenz/action-junit-report@v2
        if: always()
        with:
          report_paths: focal-${{ matrix.test }}.xml
          token: ${{ secrets.GITHUB_TOKEN }}
          check_name: JUnit Test Report - ${{ matrix.test }} - focal
          fail_on_failure: true
