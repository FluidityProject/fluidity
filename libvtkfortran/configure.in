#    Copyright (C) 2006 Imperial College London and others.
#
#    Please see the AUTHORS file in the main source directory for a full list
#    of copyright holders.
#
#    Gerard Gorman
#    Applied Modelling and Computation Group
#    Department of Earth Science and Engineering
#    Imperial College London
#
#    amcgsoftware@imperial.ac.uk
#
#    This library is free software; you can redistribute it and/or
#    modify it under the terms of the GNU Lesser General Public
#    License as published by the Free Software Foundation,
#    version 2.1 of the License.
#
#    This library is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#    Lesser General Public License for more details.
#
#    You should have received a copy of the GNU Lesser General Public
#    License along with this library; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307
#    USA

dnl Process this file with autoconf to produce a configure script.
AC_INIT(vtkfortran.cpp)
AC_CONFIG_HEADERS(config.h)

echo "Hostname: `hostname`"

# Store enviroment variables
AC_ARG_ENABLE(debugging,
    [AC_HELP_STRING([--enable-debugging],
	    [turns on debugging flags])])

# Check system type
AC_CANONICAL_HOST

# Set fortran compiler
AC_PROG_FC(ifort ifc efc sunf95 gfortran pgf95 pathf95 g95 f90,,f90,$PATH)
AC_FC_LIBRARY_LDFLAGS
fccompiler=`basename $FC`

AC_PROG_CXX(icpc icc ecc sunCC pgCC g++ CC)
AC_PROG_CPP
LINKER=$CXX

AC_LONG_64_BITS

AC_FC_LIBRARY_LDFLAGS
LIBS="$LIBS $FCLIBS"

AC_F77_WRAPPERS

# Check for standard libraries
AC_LANG_PUSH([C])
AC_CHECK_LIB(stdc++,main,,)
AC_CHECK_LIB(m,main,,)
AC_CHECK_LIB(pthread,main,,)

AC_ARG_ENABLE(shared,
[AC_HELP_STRING([--enable-shared],
[Compile objects with -fPIC to enable the 'make shared' target.])])
if test "$enable_shared" = "yes" ; then
  PIC_FLAG="-fPIC"
  CXXFLAGS="$CXXFLAGS $PIC_FLAG"
  FCFLAGS="$FCFLAGS $PIC_FLAG"
else
  PIC_FLAG=""
fi

##
## What fortran compiler options work
##
if test "$FC" = "g95"; then
    FCFLAGS="-ffast-math -fno-second-underscore $FCFLAGS"
fi

if test "$FC" == "gfortran" || test "$FC" == "gfortran-4.4"; then
  USING_GFORTRAN="yes"
else
  USING_GFORTRAN="no"
fi

if test "$USING_GFORTRAN" = "yes"; then
    if test "$enable_debugging" = "yes" ; then
	FCFLAGS="-frecord-marker=4 $FCFLAGS"
    else
	FCFLAGS="-ffast-math -frecord-marker=4 $FCFLAGS"
    fi
    cat >> confdefs.h << EOF
#define USING_GFORTRAN 1
EOF
fi

AC_PROG_INSTALL
AC_CHECK_PROG(MAKE, gmake, gmake, make, $PATH)

# Set default for ARFLAGS, since autoconf does not have a macro for
# it. This allows people to set it when running configure or make.
AC_CHECK_PROG(AR, ar, ar, ,$PATH)
test -n "$ARFLAGS" || ARFLAGS="cr"
AC_PROG_RANLIB

AC_ARG_ENABLE(verbose,
[AC_HELP_STRING([--enable-verbose],
[turns on super verbosity])])

if test "$enable_verbose" = "yes" ; then
cat >> confdefs.h << EOF
#define VERBOSE_MESSAGES 1
EOF
fi

if test "$enable_debugging" = "yes" ; then
  CXXFLAGS="-g -O0 `echo $CXXFLAGS | sed 's/-O2//g'`"
  FCFLAGS="-g -O0 `echo $FCFLAGS | sed 's/-O2//g'`"
cat >> confdefs.h << EOF
#define DDEBUG 1
EOF
fi

# Double precision.
AC_MSG_CHECKING(what voodoo is required to get 64 bit reals....)

AC_LANG_PUSH([Fortran])
old_fcflags="$FCFLAGS"
if test -z "$FORTRAN_REAL_8" ; then
   # gfortran
    FORTRAN_REAL_8="-fdefault-real-8"
    FCFLAGS="$FCFLAGS $FORTRAN_REAL_8"
    AC_RUN_IFELSE([AC_LANG_PROGRAM([], [
       implicit none
       real::a
       real*8::b

       if(kind(a).ne.kind(b)) then
          call exit(-1)
       end if
])],
        [AC_MSG_RESULT($FORTRAN_REAL_8)],
        [FCFLAGS="$old_fc_flags" ; FORTRAN_REAL_8=""])
    FCFLAGS="$old_fcflags"
fi
if test -z "$FORTRAN_REAL_8" ; then
   # Intel compiler suite
    FORTRAN_REAL_8="-r8"
    FCFLAGS="$FCFLAGS $FORTRAN_REAL_8"
    AC_RUN_IFELSE([AC_LANG_PROGRAM([], [
       implicit none
       real::a
       real*8::b

       if(kind(a).ne.kind(b)) then
          call exit(-1)
       end if
])],
        [AC_MSG_RESULT($FORTRAN_REAL_8)],
        [FCFLAGS="$old_fc_flags" ; FORTRAN_REAL_8=""])
    FCFLAGS="$old_fcflags"
fi
if test -z "$FORTRAN_REAL_8" ; then
   # SUN compiler suite
    FORTRAN_REAL_8="-xtypemap=real:64,double:64"
    FCFLAGS="$FCFLAGS $FORTRAN_REAL_8"
    AC_RUN_IFELSE([AC_LANG_PROGRAM([], [
       implicit none
       real::a
       real*8::b

       if(kind(a).ne.kind(b)) then
          call exit(-1)
       end if
])],
        [AC_MSG_RESULT($FORTRAN_REAL_8)],
        [FCFLAGS="$old_fc_flags" ; FORTRAN_REAL_8=""])
    FCFLAGS="$old_fcflags"
fi
if test -z "$FORTRAN_REAL_8" ; then
   # PGI compiler suite
    old_fcflags="$FCFLAGS"

    FORTRAN_REAL_8="-Mr8"
    FCFLAGS="$FCFLAGS $FORTRAN_REAL_8"
    AC_RUN_IFELSE([AC_LANG_PROGRAM([], [
       implicit none
       real::a
       real*8::b

       if(kind(a).ne.kind(b)) then
          call exit(-1)
       end if
])],
        [AC_MSG_RESULT($FORTRAN_REAL_8)],
        [FCFLAGS="$old_fc_flags" ; FORTRAN_REAL_8=""])
fi
if test -z "$FORTRAN_REAL_8" ; then
   AC_MSG_ERROR(none found)
fi

AC_LANG_POP([Fortran])

AC_ARG_ENABLE(real-8,
              [AC_HELP_STRING([--enable-real-8],
                              [Compile for 8 byte reals.])])
if test "x$enable_real_8" = "yes" ; then
  cat >> confdefs.h << EOF
#define DOUBLEP 1
EOF
fi
if test "x$enable_real_8" = "xno"
  then
  FORTRAN_REAL_8=""
  AC_MSG_NOTICE([Selecting 4 byte floating point numbers])
else
  AC_MSG_NOTICE([Turning on double 8 byte floating point numbers])
  if test -n "$enable_real_8" ; then
    if test "$enable_real_8" != "yes" ; then
      FORTRAN_REAL_8="$enable_real_8"
    fi
  fi
  enable_real_8="yes"

cat >> confdefs.h << EOF
#define DOUBLEP 1
EOF
  FFLAGS="$FFLAGS $FORTRAN_REAL_8"
  FCFLAGS="$FCFLAGS $FORTRAN_REAL_8"
fi

##########################################
# MPI
##########################################
check_for_mpich=""
check_for_lmpi=""

AC_LANG(C)
AC_ARG_ENABLE(mpi,
[AC_HELP_STRING([--enable-mpi],
[turns on MPI support])])

# various synonyms accepted to disable MPI
if test "$with_mpi" = no ; then enable_mpi=no; fi
if test "$with_MPI" = no ; then enable_mpi=no; fi
if test "$enable_MPI" = no ; then enable_mpi=no; fi
if test "$enable_mpi" != "no" ; then
  AC_CHECK_PROGS(MPIF90, mpif90 mpf90, $FC, $PATH)
  AC_CHECK_PROGS(MPICXX, mpicxx mpiCC mpCC, $CXX, $PATH)

  CXX=$MPICXX
  FC=$MPIF90

  AC_MSG_CHECKING([if we can compile and link without using -lmpi])
  LIBS_bck="$LIBS"
  LIBS=""
  AC_TRY_LINK([
  #include <mpi.h>
  ],[
  int flag;
  MPI_Initialized(&flag);
  ],[
  AC_MSG_RESULT([yes])
  LIBS="$LIBS_bck"
  mpi="yes"
  ],[
  AC_MSG_RESULT([no])
  LIBS="$LIBS_bck"
  check_for_lmpi="yes"
  ])
else
  AC_MSG_WARN([mpi disabled])
  MPICXX=$CXX
fi

if test "$check_for_lmpi" = "yes" ; then
  AC_MSG_CHECKING([if we can compile and link using -lmpi])
  LIBS_bck="$LIBS"
  LIBS="-lmpi"
  AC_TRY_LINK([
  #include <mpi.h>
  ],[
  int flag;
  MPI_Initialized(&flag);
  ],[
  AC_MSG_RESULT([yes])
  LIBS="$LIBS $LIBS_bck"
  mpi="yes"
  ],[
  AC_MSG_RESULT([no])
  LIBS="$LIBS_bck"
  check_for_mpich="yes"
  ])
fi

if test "$check_for_mpich" = "yes" ; then
  AC_MSG_CHECKING([if we can compile and link using mpich libs])
  LIBS_bck="$LIBS"
  LIBS="$MPICH_LIBS"

  CPPFLAGS_bck="$CPPFLAGS"
  CPPFLAGS="$CPPFLAGS $MPICH_INCLUDES"

  AC_TRY_LINK([
  #include <mpi.h>
  ],[
  int flag;
  MPI_Initialized(&flag);
  ],[
  AC_MSG_RESULT([yes])
  LIBS="$LIBS $LIBS_bck"
  mpi="yes"
  ],[
  AC_MSG_RESULT([no])
  LIBS="$LIBS_bck"
  CPPFLAGS="$CPPFLAGS_bck"
  ])
fi

if test "$mpi" = "yes" ; then
cat >> confdefs.h << EOF
#define HAVE_MPI 1
#define HAVE_MPI_CXX 1
#define _MPI_CPP_BINDINGS 1
EOF
  enable_mpi="yes"
else
  AC_MSG_WARN([no mpi support found on system])
  enable_mpi="no"
fi

AC_SUBST(LINKER)

dnl Specific -D options
AC_SUBST(DEFINE_MPI)

CXX=$MPICXX
LINKER=$CXX

# VTK
vtk_header_relative_path=""
AC_ARG_ENABLE(vtk,[AC_HELP_STRING([--enable-vtk], [Only use to disable vtk])])
# various synonyms accepted for disabling VTK
if test "$with_vtk" = no ; then enable_vtk=no; fi
if test "$with_VTK" = no ; then enable_vtk=no; fi
if test "$enable_VTK" = no ; then enable_vtk=no; fi
if test "$enable_vtk" != "no" ; then
    AC_MSG_NOTICE([Checking for VTK automagic.])
    AC_LANG_PUSH([C++])
    AC_LINK_IFELSE(
	[AC_LANG_PROGRAM([[
#include <vtkVersion.h>
#include <vtkUnstructuredGrid.h>
                        ]],
		[[
                        vtkVersion::GetVTKMajorVersion();
                        vtkUnstructuredGrid *ug=vtkUnstructuredGrid::New();
                        ]])
            ],
	[
            AC_MSG_NOTICE([VTK automagic works.])
	    CPPFLAGS="$CPPFLAGS -DHAVE_VTK"
            VTK=yes
            search_for_vtk=no
            ],
	[
            AC_MSG_NOTICE([No VTK automagic])
	    search_for_vtk=yes	    
	])
    
    if test "x$search_for_vtk" == "xyes" ; then
        # Usually the location of the libraries is not a mystery. The
        # header files are another matter.
        AC_CHECK_LIB(dl, main)
        AC_CHECK_LIB(vtksys, main)
        AC_CHECK_LIB(vtkCommon, main, [], 
            [if test "x$VTK_LIBS" != "x" ; then
                LIBS="$LIBS -L$VTK_LIBS"
                unset ac_cv_lib_vtkCommon_main
                AC_CHECK_LIB(vtkCommon, main, [], 
                   [
                      AC_MSG_ERROR([Cannot find vtk installation.])
                      exit -1
                   ])
             else
                AC_MSG_ERROR([Cannot find vtk installation.])
                exit -1
             fi
            ])
        AC_CHECK_LIB(vtkzlib, main)
        AC_CHECK_LIB(vtkexpat, main)
        AC_CHECK_LIB(vtkFiltering, main)
        AC_CHECK_LIB(vtkGraphics, main)
        AC_CHECK_LIB(vtkIO, main)
        
        # check at the usual places:
        for i in $(ls -d /usr/include/vtk*) $VTK_INCLUDE; do
            if test -r $i/vtkCellData.h; then
                CPPFLAGS="-I$i $CPPFLAGS"
            fi
        done
        AC_CHECK_HEADER(vtkCellData.h,
            [CPPFLAGS="$CPPFLAGS -DHAVE_VTK=1"
                VTK=yes
                ],
            [AC_CHECK_HEADER(vtk-5.0/vtkCellData.h,
                    [CPPFLAGS="$CPPFLAGS -DHAVE_VTK=1"
                        VTK=yes
                        vtk_header_relative_path="vtk-5.0/"
                        ],
                    [       
                        AC_MSG_ERROR([Cannot find vtk installation.])
                        exit -1
                    ])
          ])
    fi
fi
cat > include/vtk.h <<EOF
#ifndef VTK_H
#define VTK_H

#ifdef HAVE_VTK
#include <${vtk_header_relative_path}vtkBMPWriter.h>
#include <${vtk_header_relative_path}vtkCellData.h>
#include <${vtk_header_relative_path}vtkCellDataToPointData.h>
#include <${vtk_header_relative_path}vtkCellDerivatives.h>
#include <${vtk_header_relative_path}vtkCell.h>
#include <${vtk_header_relative_path}vtkCellType.h>
#include <${vtk_header_relative_path}vtkClipDataSet.h>
#include <${vtk_header_relative_path}vtkContourGrid.h>
#include <${vtk_header_relative_path}vtkDataArray.h>
#include <${vtk_header_relative_path}vtkDataObject.h>
#include <${vtk_header_relative_path}vtkDataSet.h>
#include <${vtk_header_relative_path}vtkDataSetReader.h>
#include <${vtk_header_relative_path}vtkDoubleArray.h>
#include <${vtk_header_relative_path}vtkFloatArray.h>
#include <${vtk_header_relative_path}vtkGenericCell.h>
#include <${vtk_header_relative_path}vtkHexahedron.h>
#include <${vtk_header_relative_path}vtkIdList.h>
#include <${vtk_header_relative_path}vtkImageData.h>
#include <${vtk_header_relative_path}vtkIntArray.h>
#include <${vtk_header_relative_path}vtkPointData.h>
#include <${vtk_header_relative_path}vtkPointLocator.h>
#include <${vtk_header_relative_path}vtkPolyData.h>
#include <${vtk_header_relative_path}vtkShortArray.h>
#include <${vtk_header_relative_path}vtkStructuredGrid.h>
#include <${vtk_header_relative_path}vtkTetra.h>
#include <${vtk_header_relative_path}vtkUnsignedCharArray.h>
#include <${vtk_header_relative_path}vtkUnsignedIntArray.h>
#include <${vtk_header_relative_path}vtkUnstructuredGrid.h>
#include <${vtk_header_relative_path}vtkUnstructuredGridReader.h>
#include <${vtk_header_relative_path}vtkXMLImageDataWriter.h>
#include <${vtk_header_relative_path}vtkXMLPolyDataWriter.h>
#include <${vtk_header_relative_path}vtkXMLPUnstructuredGridReader.h>
#include <${vtk_header_relative_path}vtkXMLPUnstructuredGridWriter.h>
#include <${vtk_header_relative_path}vtkXMLStructuredGridWriter.h>
#include <${vtk_header_relative_path}vtkXMLUnstructuredGridReader.h>
#include <${vtk_header_relative_path}vtkXMLUnstructuredGridWriter.h>
#include <${vtk_header_relative_path}vtkZLibDataCompressor.h>

#if VTK_MAJOR_VERSION>6 || (VTK_MAJOR_VERSION ==6 && VTK_MINOR_VERSION >2)
#include <${vtk_header_relative_path}vtkMPIController.h>
#include <${vtk_header_relative_path}vtkMPICommunicator.h>
#endif

#ifndef vtkFloatingPointType
#define vtkFloatingPointType vtkFloatingPointType
typedef float vtkFloatingPointType;
#endif

#endif
#endif
EOF
AC_SUBST(ARFLAGS)

AC_SUBST(MODINC_FLAG)

# It appears this is not good practice but...go sue me
#cat confdefs.h | grep -v std > include/confdefs.h    <-- see below...
cat confdefs.h | grep DOUBLEP > include/confdefs.h
cat confdefs.h | grep F77_FUNC >> include/confdefs.h
cat confdefs.h | grep VTK >> include/confdefs.h
cat confdefs.h | grep MPI >> include/confdefs.h
cat confdefs.h | grep "^#[dua][enl][fdl][ieo][nfw]" >> include/confdefs.h

AC_OUTPUT(Makefile)

