#    Copyright (C) 2009 Imperial College London and others.
#
#    Please see the AUTHORS file in the main source directory for a full list
#    of copyright holders.
#
#    Gerard Gorman
#    Applied Modelling and Computation Group
#    Department of Earth Science and Engineering
#    Imperial College London
#
#    g.gorman@imperial.ac.uk
#
#    This library is free software; you can redistribute it and/or
#    modify it under the terms of the GNU Lesser General Public
#    License as published by the Free Software Foundation,
#    version 2.1 of the License.
#
#    This library is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#    Lesser General Public License for more details.
#
#    You should have received a copy of the GNU Lesser General Public
#    License along with this library; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307
#    USA

dnl Process this file with autoconf to produce a configure script.
AC_INIT(adapt3d/Makefile.in)
AC_CONFIG_HEADERS(include/config.h)

echo "Hostname: `hostname`"

# Set the default compile flags.
if test "no$FFLAGS" = "no"; then
    FFLAGS=""
fi

if test "no$FCFLAGS" = "no"; then
    FCFLAGS=""
fi

if test "no$CFLAGS" = "no"; then
    CFLAGS=""
fi

if test "no$CXXFLAGS" = "no"; then
    CXXFLAGS=""
fi

#
# Name fluidity
#
AC_ARG_ENABLE(debugging,
[AC_HELP_STRING([--enable-debugging],
[turns on debugging flags])])

# Check system type
AC_CANONICAL_HOST

# Find compilers
AC_MSG_NOTICE([*** Fishing for legacy fortran compiler.])
AC_PROG_F77(ifort ifc efc sunf95 gfortran pgf95 pathf95 g95 f90,,f90,$PATH)
AC_F77_LIBRARY_LDFLAGS
fcompiler=`basename $F77`

AC_MSG_NOTICE([*** Fishing for modern Fortran compiler])
AC_PROG_FC(ifort ifc efc sunf95 gfortran pgf95 pathf95 g95 f90,,f90,$PATH)
AC_FC_LIBRARY_LDFLAGS
fccompiler=`basename $FC`

if test "$fcompiler" = "sunf95" ; then
    MODINC_FLAG="-M"
    FFLAGS="-M../include $FFLAGS"
    FCFLAGS="-M../include $FCFLAGS"
else
    MODINC_FLAG="-I"
fi

if test "$F77" = "$FC" ; then
    smart_fortran="yes"
    AC_MSG_NOTICE([*** Assuming that $FC can process both free and fixed form fortran files.])
else
    AC_MSG_NOTICE([*** Assuming that $FC cannot process both free and fixed form fortran files (silly fortran).])
    smart_fortran="no"
fi

AC_PROG_CC(icc ecc suncc pgcc gcc cc)
AC_PROG_CXX(icpc icc ecc sunCC pgCC g++ CC)
AC_PROG_CPP
LINKER=$CXX

AC_LONG_64_BITS

# Find fortran libraries required when linking with C++ main.

AC_F77_LIBRARY_LDFLAGS
AC_FC_LIBRARY_LDFLAGS

AC_F77_WRAPPERS

# Find a library which will give us blas and lapack routines
AC_LANG_PUSH([C++])
found_blas="no"
if test -z "$with_lapack" -a -z "$with_blas" && \
   test \( "$fcompiler" = "ifc" \) -o \( "$fcompiler" = "ifort" \) -o \( "$fcompiler" = "efc" \)
    then
    AC_MSG_NOTICE([Appear to be using Intel compiler suite. Check if MKL is also available.])
    for i in `echo $LD_LIBRARY_PATH | sed -e 's/:/ /g'`
      do
      echo "looking in $i"
      if test \( -f $i/libmkl.a \) -o \( -f $i/libmkl.so \)
      then
          AC_MSG_NOTICE([Will look in $i for MKL.])
      LIBS="$LIBS -L$i"
      LAPACK_LIBS="-L$i $LAPACK_LIBS"
      fi
    done
    ACX_BLAS([found_blas="yes"],[found_blas="no"])
elif  test "$fcompiler" = "pgf90"
    then
    AC_MSG_NOTICE([Appear to be using Portland Group compiler suite. Check if ACML is also available.])
    AC_CHECK_LIB(acml, dgesv, [found_blas=yes], [found_blas=no])

elif test "$fcompiler" = "sunf95"
    then
    LIBS="$LIBS -lfui -lfai -lfsu -lmtsk -lpthread -lm"
    AC_MSG_NOTICE([Appear to be using Sun Studio compiler suite. Check if Sun Performance Library is also available.])
    AC_CHECK_LIB(sunperf, dgesv, [found_blas=yes ; acx_blas_ok=yes], [found_blas=no])
fi

if test "$found_blas" = "no"
    then
    AC_LANG_PUSH([Fortran 77])
    AC_MSG_NOTICE([checking the position of the stars to help find a versions of BLAS])
    ACX_BLAS([],[AC_MSG_ERROR("Cannot identify BLAS. Check that it is installed.")])
fi
AC_LANG_PUSH([Fortran 77])
ACX_LAPACK([],[AC_MSG_ERROR("Cannot identify LAPACK. Check that it is installed.")])

FLIBS=`echo $FLIBS | sed 's/)//g'` 

# Check for standard libraries
AC_LANG_PUSH(C++)
AC_CHECK_LIB(stdc++,main,,)
AC_CHECK_LIB(m,main,,)
AC_CHECK_LIB(pthread,main,,)

# Check for standard headers
AC_CHECK_HEADER(iostream)

# Check for VTK
AC_LANG_PUSH([C++])
AC_ARG_ENABLE(vtk,[AC_HELP_STRING([--enable-vtk],
            [Enable VTK support to build and run test cases (default: no).])])
if test "x$enable_vtk" != "xno" ; then
    AC_MSG_NOTICE([Checking for VTK automagic.])
    AC_LINK_IFELSE(
	[AC_LANG_PROGRAM([[
#include <vtkVersion.h>
#include <vtkUnstructuredGrid.h>
                        ]],
		[[
                        vtkVersion::GetVTKMajorVersion();
                        vtkUnstructuredGrid *ug=vtkUnstructuredGrid::New();
                        ]])
            ],
	[
            AC_MSG_NOTICE([VTK automagic works.])
	    CPPFLAGS="$CPPFLAGS -DHAVE_VTK"
            VTK=yes
            search_for_vtk=no
            ],
	[
            AC_MSG_NOTICE([No VTK automagic])
	    search_for_vtk=yes	    
	])
    
    if test "x$search_for_vtk" == "xyes" ; then
        # Usually the location of the libraries is not a mystery. The
        # header files are another matter.
        AC_CHECK_LIB(dl, main)
        AC_CHECK_LIB(vtkCommon, main, [], 
            [if test "x$VTK_LIBS" != "x" ; then
                LIBS="$LIBS -L$VTK_LIBS"
                unset ac_cv_lib_vtkCommon_main
                AC_CHECK_LIB(vtkCommon, main, [], 
                   [
                      AC_MSG_ERROR([Cannot find vtk installation.])
                      exit -1
                   ])
             else
                AC_MSG_ERROR([Cannot find vtk installation.])
                exit -1
             fi
            ])
        AC_CHECK_LIB(vtkzlib, main)
        AC_CHECK_LIB(vtkexpat, main)
        AC_CHECK_LIB(vtkFiltering, main)
        AC_CHECK_LIB(vtkGraphics, main)
        AC_CHECK_LIB(vtkIO, main)
        
        # check at the usual places:
        for i in $(ls -d /usr/include/vtk*) $VTK_INCLUDE; do
            if test -r $i/vtkCellData.h; then
                CPPFLAGS="-I$i $CPPFLAGS"
            fi
        done
        AC_CHECK_HEADER(vtkCellData.h,
            [CPPFLAGS="$CPPFLAGS -DHAVE_VTK=1"
                VTK=yes
                ],
            [AC_CHECK_HEADER(vtk-5.0/vtkCellData.h,
                    [CPPFLAGS="$CPPFLAGS -DHAVE_VTK=1"
                        VTK=yes
                        vtk_header_relative_path="vtk-5.0/"
                        ],
                    [       
                        AC_MSG_ERROR([Cannot find vtk installation.])
                        exit -1
                    ])
          ])
    fi
fi

mkdir -p include
cat > include/vtk.h <<EOF
#ifndef VTK_H
#define VTK_H

#ifdef HAVE_VTK
#include <${vtk_header_relative_path}vtkBMPWriter.h>
#include <${vtk_header_relative_path}vtkCellData.h>
#include <${vtk_header_relative_path}vtkCellDataToPointData.h>
#include <${vtk_header_relative_path}vtkCellDerivatives.h>
#include <${vtk_header_relative_path}vtkCell.h>
#include <${vtk_header_relative_path}vtkCellType.h>
#include <${vtk_header_relative_path}vtkClipDataSet.h>
#include <${vtk_header_relative_path}vtkContourGrid.h>
#include <${vtk_header_relative_path}vtkDataArray.h>
#include <${vtk_header_relative_path}vtkDataObject.h>
#include <${vtk_header_relative_path}vtkDataSet.h>
#include <${vtk_header_relative_path}vtkDataSetReader.h>
#include <${vtk_header_relative_path}vtkDoubleArray.h>
#include <${vtk_header_relative_path}vtkExtractVectorComponents.h>
#include <${vtk_header_relative_path}vtkFloatArray.h>
#include <${vtk_header_relative_path}vtkGenericCell.h>
#include <${vtk_header_relative_path}vtkHexahedron.h>
#include <${vtk_header_relative_path}vtkIdList.h>
#include <${vtk_header_relative_path}vtkImageData.h>
#include <${vtk_header_relative_path}vtkIntArray.h>
#include <${vtk_header_relative_path}vtkPointData.h>
#include <${vtk_header_relative_path}vtkPointLocator.h>
#include <${vtk_header_relative_path}vtkPolyData.h>
#include <${vtk_header_relative_path}vtkShortArray.h>
#include <${vtk_header_relative_path}vtkStructuredGrid.h>
#include <${vtk_header_relative_path}vtkTetra.h>
#include <${vtk_header_relative_path}vtkTriangle.h>
#include <${vtk_header_relative_path}vtkUnsignedCharArray.h>
#include <${vtk_header_relative_path}vtkUnsignedIntArray.h>
#include <${vtk_header_relative_path}vtkUnstructuredGrid.h>
#include <${vtk_header_relative_path}vtkUnstructuredGridReader.h>
#include <${vtk_header_relative_path}vtkXMLImageDataWriter.h>
#include <${vtk_header_relative_path}vtkXMLPolyDataWriter.h>
#include <${vtk_header_relative_path}vtkXMLPUnstructuredGridReader.h>
#include <${vtk_header_relative_path}vtkXMLPUnstructuredGridWriter.h>
#include <${vtk_header_relative_path}vtkXMLStructuredGridWriter.h>
#include <${vtk_header_relative_path}vtkXMLUnstructuredGridReader.h>
#include <${vtk_header_relative_path}vtkXMLUnstructuredGridWriter.h>
#include <${vtk_header_relative_path}vtkZLibDataCompressor.h>

#ifndef vtkFloatingPointType
#define vtkFloatingPointType vtkFloatingPointType
typedef float vtkFloatingPointType;
#endif

#endif
#endif
EOF


AC_SUBST(VTK)
AC_LANG_POP(C++)

LIBS="$LAPACK_LIBS $BLAS_LIBS $LIBS $FCLIBS $FLIBS"

AC_SUBST(LAPACK_LIBS)
AC_SUBST(BLAS_LIBS)

LINKER=$CXX

AC_ARG_ENABLE(shared,
[AC_HELP_STRING([--enable-shared],
[Compile objects with -fPIC to enable the 'make shared' target.])])

if test "$enable_shared" = "yes" ; then
  PIC_FLAG="-fPIC"
  FFLAGS="$FFLAGS $PIC_FLAG"
  FCFLAGS="$FCFLAGS $PIC_FLAG"
  CFLAGS="$CFLAGS $PIC_FLAG"
  CXXFLAGS="$CXXFLAGS $PIC_FLAG"
else
  PIC_FLAG=""
fi

##
## what compiler options work
##
if test "$FC" = "g95"; then
    FFLAGS="-ffast-math -fno-second-underscore $FFLAGS"
    FCFLAGS="-ffast-math -fno-second-underscore $FCFLAGS"
fi

if test "$FC" = "gfortran"; then
    if test "$enable_debugging" = "yes" ; then
	FFLAGS="-frecord-marker=4 $FFLAGS"
	FCFLAGS="-frecord-marker=4 $FCFLAGS"
    else
	FFLAGS="-ffast-math -frecord-marker=4 $FFLAGS"
	FCFLAGS="-ffast-math -frecord-marker=4 $FCFLAGS"
    fi
    cat >> confdefs.h << EOF
#define USING_GFORTRAN 1
EOF
fi

AC_LANG_PUSH(Fortran 77)
AC_MSG_CHECKING([how do we get fortran 77 to allow long lines])
old_FLAGS="$FFLAGS"
extended_source_flag=none
AC_COMPILE_IFELSE(
    [AC_LANG_PROGRAM(,[[
      PRINT*, "hello world                                                                                      "
                    ]])],
    [
        AC_MSG_RESULT(no extra flags required)
        extended_source_flag=happy
    ])

if test "$extended_source_flag" != happy ; then
    if test "$extended_source_flag" = none ; then
        FFLAGS="-extend_source"
        AC_COMPILE_IFELSE(
            [AC_LANG_PROGRAM(,[[
      PRINT*, "hello world                                                                                      "
                            ]])],
            [
                extended_source_flag=$FFLAGS
                AC_MSG_RESULT([$FFLAGS])
                FFLAGS="$old_FLAGS $FFLAGS"
            ])
    fi
    if test "$extended_source_flag" = none ; then
        FFLAGS="-132"
        AC_COMPILE_IFELSE(
            [AC_LANG_PROGRAM(,[[
      PRINT*, "hello world                                                                                      "
                            ]])],
            [
                extended_source_flag=$FFLAGS
                AC_MSG_RESULT([$FFLAGS])
                FFLAGS="$old_FLAGS $FFLAGS"
            ])
    fi
    if test "$extended_source_flag" = none ; then
        FFLAGS="-ffree-line-length-none -ffixed-line-length-none"
        AC_COMPILE_IFELSE(
            [AC_LANG_PROGRAM(,[[
      PRINT*, "hello world                                                                                      "
                            ]])],
            [
                extended_source_flag=$FFLAGS
                AC_MSG_RESULT([$FFLAGS])
                FFLAGS="$old_FLAGS $FFLAGS"
            ])
    fi
    if test "$extended_source_flag" = none ; then
        FFLAGS="-ffixed-line-length-huge -ffree-line-length-huge"
        AC_COMPILE_IFELSE(
            [AC_LANG_PROGRAM(,[[
      PRINT*, "hello world                                                                                      "
                            ]])],
            [
                extended_source_flag=$FFLAGS
                AC_MSG_RESULT([$FFLAGS])
                FFLAGS="$old_FLAGS $FFLAGS"
            ])
    fi
    if test "$extended_source_flag" = none ; then
        FFLAGS="-ffixed-line-length-132 -ffree-line-length-huge"
        AC_COMPILE_IFELSE(
            [AC_LANG_PROGRAM(,[[   
      PRINT*, "hello world                                                                                      "
                            ]])],
            [
                extended_source_flag=$FFLAGS
                AC_MSG_RESULT([$FFLAGS])
                FFLAGS="$old_FLAGS $FFLAGS"
            ])
    fi
    if test "$extended_source_flag" = none ; then
        FFLAGS="-ffixed-line-length-132"
        AC_COMPILE_IFELSE(
            [AC_LANG_PROGRAM(,[[
      PRINT*, "hello world                                                                                      "
                            ]])],
            [
                extended_source_flag=$FFLAGS
                AC_MSG_RESULT([$FFLAGS])
                FFLAGS="$old_FLAGS $FFLAGS"
            ])
    fi
    if test "$extended_source_flag" = none ; then
        FFLAGS="-Mextend"
        AC_COMPILE_IFELSE(
            [AC_LANG_PROGRAM(,[[
      PRINT*, "hello world                                                                                      "
                            ]])],
            [
                extended_source_flag=$FFLAGS
                AC_MSG_RESULT([$FFLAGS])
                FFLAGS="$old_FLAGS $FFLAGS"
            ])
    fi
    if test "$extended_source_flag" = none ; then
        FFLAGS="-qfixed=256"
        AC_COMPILE_IFELSE(
            [AC_LANG_PROGRAM(,[[
      PRINT*, "hello world                                                                                      "
                            ]])],
            [
                extended_source_flag=$FFLAGS
                AC_MSG_RESULT([$FFLAGS])
                FFLAGS="$old_FLAGS $FFLAGS"
            ])
    fi
    if test "$extended_source_flag" = none ; then
        FFLAGS="-e"
        AC_COMPILE_IFELSE(
            [AC_LANG_PROGRAM(,[[
      PRINT*, "hello world                                                                                      "
                            ]])],
            [
                extended_source_flag=$FFLAGS
                AC_MSG_RESULT([$FFLAGS])
                FFLAGS="$old_FLAGS $FFLAGS"
            ])
    fi
    if test "$extended_source_flag" = none ; then
        FFLAGS="$old_FLAGS"
        AC_MSG_RESULT([we cannot])
    else
        FCFLAGS="$FCFLAGS $extended_source_flag"
    fi
fi

AC_LANG_POP([Fortran 77])

AC_PROG_INSTALL
AC_CHECK_PROG(MAKE, gmake, gmake, make, $PATH)

# This should not happen by default, feel free to add an option:
# Enable parallel build
#ncores=`grep cores /proc/cpuinfo | head -1 | awk '{print $4}'`
#if test "x$ncores" != "x" ; then 
#    MAKE_PARALLEL_OPTION="-j$ncores"
#    AC_SUBST(MAKE_PARALLEL_OPTION)
#fi
MAKE_PARALLEL_OPTION=""
AC_SUBST(MAKE_PARALLEL_OPTION)

# Set default for ARFLAGS, since autoconf does not have a macro for
# it. This allows people to set it when running configure or make.
AC_CHECK_PROG(AR, ar, ar, ,$PATH)
test -n "$ARFLAGS" || ARFLAGS="cr"
AC_PROG_RANLIB

AC_ARG_ENABLE(verbose,
[AC_HELP_STRING([--enable-verbose],
[turns on super verbosity])])

if test "$enable_verbose" = "yes" ; then
cat >> confdefs.h << EOF
#define VERBOSE_MESSAGES 1
EOF
fi

if test "$enable_debugging" = "yes" ; then
  CFLAGS="-g -O0 `echo $CFLAGS | sed 's/-O2//g'`"
  CXXFLAGS="-g -O0 `echo $CXXFLAGS | sed 's/-O2//g'`"
  FFLAGS="-g -O0 `echo $FFLAGS | sed 's/-O2//g'`"
  FCFLAGS="-g -O0 `echo $FCFLAGS | sed 's/-O2//g'`"
cat >> confdefs.h << EOF
#define DDEBUG 1
EOF

  if test "$fcompiler" = "ifort" ; then
    FFLAGS="-C -traceback -check nooutput_conversion -check noarg_temp_created ${FFLAGS}"
    FCFLAGS="-C -traceback -check nooutput_conversion -check noarg_temp_created  ${FCFLAGS}"
    CFLAGS="-fno-omit-frame-pointer ${CFLAGS}"
    CXXFLAGS="-fno-omit-frame-pointer ${CXXFLAGS}"
  elif test "$fcompiler" = "gfortran" ; then
    old_fflags="$FFLAGS"
    old_fcflags="$FCFLAGS"
    FFLAGS="$FFLAGS -finit-integer=-10000 -finit-real=nan"
    FCFLAGS="$FCFLAGS -finit-integer=-10000 -finit-real=nan"
    AC_LANG_PUSH([Fortran])
    AC_COMPILE_IFELSE(
        [AC_LANG_PROGRAM(,[[
                        PRINT*, "hello world"
                        ]])],
        [
            AC_MSG_RESULT(can initialise integers and reals)
            old_fflags="$FFLAGS"
            old_fcflags="$FCFLAGS"
            ], [
            AC_MSG_RESULT(cannot initialise integers and reals)
        ])
    AC_LANG_POP()
    FFLAGS="$old_fflags"
    FCFLAGS="$old_fcflags"

    FFLAGS="-fbounds-check -Wall ${FFLAGS}"
    FCFLAGS="-fbounds-check -Wall -Wimplicit-interface -Wno-surprising ${FCFLAGS}"
    CFLAGS="-fbounds-check -Wall ${CFLAGS}"
    CXXFLAGS="-fbounds-check -Wall ${CXXFLAGS}"
    LDFLAGS="-rdynamic ${LDFLAGS}"
  elif test "$fcompiler" = "g95" ; then
    FFLAGS="-fbounds-check -ftrace=full ${FFLAGS}"
    FCFLAGS="-fbounds-check -ftrace=full ${FCFLAGS}"
  elif test "$fcompiler" = "sunf95" ; then
    FFLAGS="-C -ftrap=invalid -fpover ${FFLAGS}"
    FCFLAGS="-C -ftrap=invalid -fpover ${FCFLAGS}"
    CFLAGS="-ftrap=invalid ${CFLAGS}"
    CXXFLAGS="-ftrap=invalid ${CXXFLAGS}"
  fi

else
    AC_MSG_NOTICE([Setting optimisation flags for $F77])
    cat >> confdefs.h << EOF
#define NDEBUG 1
EOF
    OPTIMIZATION_FFLAGS="$OPTIMIZATION_FFLAGS -O3"
    OPTIMIZATION_CFLAGS="$OPTIMIZATION_CFLAGS -O3"
fi

FFLAGS="$FFLAGS $OPTIMIZATION_FFLAGS"
FCFLAGS="$FCFLAGS $OPTIMIZATION_FFLAGS"
CFLAGS="$CFLAGS $OPTIMIZATION_CFLAGS"
CXXFLAGS="$CXXFLAGS $OPTIMIZATION_CFLAGS"

if test "$FC" = "ifc" ; then
  FFLAGS="-implicitnone -132 -w95 $FFLAGS"
  FCFLAGS="-implicitnone -w95 $FCFLAGS"
fi

##########################################
# MPI
##########################################
check_for_mpich=""
check_for_lmpi=""

AC_LANG(C)
AC_ARG_ENABLE(mpi,
[AC_HELP_STRING([--enable-mpi],
[turns on MPI support])])

# various synonyms accepted to disable MPI
if test "$with_mpi" = no ; then enable_mpi=no; fi
if test "$with_MPI" = no ; then enable_mpi=no; fi
if test "$enable_MPI" = no ; then enable_mpi=no; fi
if test "$enable_mpi" != "no" ; then
  AC_CHECK_PROGS(MPIF90, mpif90 mpf90, $FC, $PATH)
  if test "$smart_fortran" = "yes" ; then
    MPIF77=$MPIF90
  else
    AC_CHECK_PROGS(MPIF77, mpif77 mpf77,       $F77, $PATH)
  fi
  AC_CHECK_PROGS(MPICC,  mpicc mpcc,        $CC,  $PATH)
  AC_CHECK_PROGS(MPICXX, mpicxx mpiCC mpCC, $CXX, $PATH)

  F77=$MPIF77
  FC=$MPIF90
  CC=$MPICC
  CXX=$MPICXX

  AC_MSG_CHECKING([if we can compile and link without using -lmpi])
  LIBS_bck="$LIBS"
  LIBS=""
  AC_TRY_LINK([
  #include <mpi.h>
  ],[
  int flag;
  MPI_Initialized(&flag);
  ],[
  AC_MSG_RESULT([yes])
  LIBS="$LIBS_bck"
  mpi="yes"
  ],[
  AC_MSG_RESULT([no])
  LIBS="$LIBS_bck"
  check_for_lmpi="yes"
  ])
else
  AC_MSG_WARN([mpi disabled])
  MPIF77=$F77
  MPIF90=$FC
  MPICC=$CC
  MPICXX=$CXX
fi

if test "$check_for_lmpi" = "yes" ; then
  AC_MSG_CHECKING([if we can compile and link using -lmpi])
  LIBS_bck="$LIBS"
  LIBS="-lmpi"
  AC_TRY_LINK([
  #include <mpi.h>
  ],[
  int flag;
  MPI_Initialized(&flag);
  ],[
  AC_MSG_RESULT([yes])
  LIBS="$LIBS $LIBS_bck"
  mpi="yes"
  ],[
  AC_MSG_RESULT([no])
  LIBS="$LIBS_bck"
  check_for_mpich="yes"
  ])
fi

if test "$check_for_mpich" = "yes" ; then
  AC_MSG_CHECKING([if we can compile and link using mpich libs])
  LIBS_bck="$LIBS"
  LIBS="$MPICH_LIBS"

  CPPFLAGS_bck="$CPPFLAGS"
  CPPFLAGS="$CPPFLAGS $MPICH_INCLUDES"

  AC_TRY_LINK([
  #include <mpi.h>
  ],[
  int flag;
  MPI_Initialized(&flag);
  ],[
  AC_MSG_RESULT([yes])
  LIBS="$LIBS $LIBS_bck"
  mpi="yes"
  ],[
  AC_MSG_RESULT([no])
  LIBS="$LIBS_bck"
  CPPFLAGS="$CPPFLAGS_bck"
  ])
fi

# should this go inside the "$mpi" = "yes" test below?
# i.e. only bother looking for pmpich++ if mpi is enabled...?
# shouldn't really do this, since it assumes we know the name
# of the mpich C++ library (but it can be different to below)
# Also, we only needed it when trying to link C++ with Fortran
# main -but that won't work reliably across compilers (gcc is ok)
#AC_CHECK_LIB(pmpich++,main,,)

if test "$mpi" = "yes" ; then
cat >> confdefs.h << EOF
#define HAVE_MPI 1
#define HAVE_MPI_CXX 1
#define _MPI_CPP_BINDINGS 1
EOF
  enable_mpi="yes"
else
  AC_MSG_WARN([no mpi support found on system])
  enable_mpi="no"
fi

# Double precision.
AC_MSG_CHECKING(what voodoo is required to get 64 bit reals....)

AC_LANG_PUSH([Fortran])

if test -z "$FORTRAN_REAL_8" ; then
   # gfortran
    old_fcflags="$FCFLAGS"
    
    FORTRAN_REAL_8="-fdefault-real-8"
    FCFLAGS="$FCFLAGS $FORTRAN_REAL_8"
    AC_RUN_IFELSE([AC_LANG_PROGRAM([], [
       implicit none
       real::a
       real*8::b

       if(kind(a).ne.kind(b)) then
          call exit(-1)
       end if
])],
        [AC_MSG_RESULT($FORTRAN_REAL_8)],
        [FCFLAGS="$old_fcflags" ; FORTRAN_REAL_8=""])
    FCFLAGS="$old_fcflags"
fi
if test -z "$FORTRAN_REAL_8" ; then
   # Intel compiler suite
    old_fcflags="$FCFLAGS"
    
    FORTRAN_REAL_8="-r8"
    FCFLAGS="$FCFLAGS $FORTRAN_REAL_8"
    AC_RUN_IFELSE([AC_LANG_PROGRAM([], [
       implicit none
       real::a
       real*8::b

       if(kind(a).ne.kind(b)) then
          call exit(-1)
       end if
])],
        [AC_MSG_RESULT($FORTRAN_REAL_8)],
        [FCFLAGS="$old_fcflags" ; FORTRAN_REAL_8=""])
fi
if test -z "$FORTRAN_REAL_8" ; then
   # SUN compiler suite
    old_fcflags="$FCFLAGS"
    
    FORTRAN_REAL_8="-xtypemap=real:64,double:64"
    FCFLAGS="$FCFLAGS $FORTRAN_REAL_8"
    AC_RUN_IFELSE([AC_LANG_PROGRAM([], [
       implicit none
       real::a
       real*8::b

       if(kind(a).ne.kind(b)) then
          call exit(-1)
       end if
])],
        [AC_MSG_RESULT($FORTRAN_REAL_8)],
        [FCFLAGS="$old_fcflags" ; FORTRAN_REAL_8=""])
fi
if test -z "$FORTRAN_REAL_8" ; then
   # PGI compiler suite
    old_fcflags="$FCFLAGS"

    FORTRAN_REAL_8="-Mr8"
    FCFLAGS="$FCFLAGS $FORTRAN_REAL_8"
    AC_RUN_IFELSE([AC_LANG_PROGRAM([], [
       implicit none
       real::a
       real*8::b

       if(kind(a).ne.kind(b)) then
          call exit(-1)
       end if
])],
        [AC_MSG_RESULT($FORTRAN_REAL_8)],
        [FCFLAGS="$old_fcflags" ; FORTRAN_REAL_8=""])
fi
if test -z "$FORTRAN_REAL_8" ; then
   AC_MSG_ERROR(none found)
fi

AC_LANG_POP([Fortran])

AC_ARG_ENABLE(dp,
[AC_HELP_STRING([--enable-dp[=flag]],
[compile with 64 bit floating point numbers (default)])])
if test "$enable_dp" = "no"
  then
  FORTRAN_REAL_8=""
  AC_MSG_NOTICE([Selecting 4 byte floating point numbers])
else
  AC_MSG_NOTICE([Turning on double 8 byte floating point numbers])
  if test -n "$enable_dp" ; then
    if test "$enable_dp" != "yes" ; then
      FORTRAN_REAL_8="$enable_dp"
    fi
  fi
  enable_dp="yes"

  FLUIDITY="d$FLUIDITY"
  FLADJOINT="d$FLADJOINT"

cat >> confdefs.h << EOF
#define USING_DOUBLE_PRECISION 1
EOF
  FFLAGS="$FFLAGS $FORTRAN_REAL_8"
  FCFLAGS="$FCFLAGS $FORTRAN_REAL_8"
fi

#####
#
LIBS="$LIBS -L./lib"

##############################################################
# enable gprof profiling

AC_ARG_ENABLE(profiling,
[AC_HELP_STRING([--enable-profiling],
[enable gprof profiling])])

if test "$enable_profiling" = "yes" ; then
  PROFILING_FLAG="-pg"
  CPPFLAGS="-pg $CPPFLAGS"
  FFLAGS="-pg $FFLAGS"
  FCFLAGS="-pg $FCFLAGS"
  CXXFLAGS="-pg $CXXFLAGS"
  LDFLAGS="-pg $LDFLAGS"
else
  PROFILING_FLAG=""
fi
AC_SUBST(PROFILING_FLAG)

dnl Checks for typedefs, structures, and compiler characteristics.
# These tests were just giving too much trouble. Need to investigate further.
#AC_C_CONST
#AC_C_INLINE

AC_SUBST(FORTRAN_REAL_8)
AC_SUBST(OPTIMIZATION_FFLAGS)
AC_SUBST(LINKER)

dnl Specific f90 options
AC_SUBST(USE_CPP)

dnl Specific -D options
AC_SUBST(enable_mpi)

dnl Checks for library functions.
if test "$smart_fortran" = "yes" ; then
  F77=$MPIF90
else
  F77=$MPIF77
fi
FC=$MPIF90
CC=$MPICC
CXX=$MPICXX
LINKER=$CXX

AC_SUBST(ARFLAGS)

# It appears this is not good practice but...go sue me
mkdir -p include
cat confdefs.h | grep "^#[dua][enl][fdl][ieo][nfw]" | sed -e 's/^#allow//' > include/confdefs.h
cp include/confdefs.h adapt3d/include/
cp include/confdefs.h load_balance/include

AC_OUTPUT(Makefile
    load_balance/Makefile
    adapt3d/Makefile
    metric_field/Makefile
    tests/Makefile)
