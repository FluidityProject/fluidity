#!/usr/bin/env python3

# A draft python binding for libspud
# You will need to compile _libspud.so
# by hand for now -- haven't hooked it up
# to the Makefile

from ctypes import *
import os

SPUD_REAL      = 0
SPUD_INTEGER   = 1
SPUD_NONE      = 2
SPUD_CHARACTER = 3
pytype_map = {SPUD_REAL: float, SPUD_INTEGER: int, SPUD_NONE: None, SPUD_CHARACTER: str}
typepy_map = {float: SPUD_REAL, int: SPUD_INTEGER, None: SPUD_NONE, str: SPUD_CHARACTER}
ctype_map  = {float: c_double, int: c_int, None: None, str: c_char_p}

SPUD_NO_ERROR                = 0
SPUD_KEY_ERROR               = 1
SPUD_TYPE_ERROR              = 2
SPUD_RANK_ERROR              = 3
SPUD_SHAPE_ERROR             = 4
SPUD_NEW_KEY_WARNING         = -1
SPUD_ATTR_SET_FAILED_WARNING = -2

OPTION_PATH_LEN = 8192

class SpudKeyError(Exception):
  def __init__(self, msg = "The specified option is not present in the dictionary."):
    self.message = msg

class SpudTypeError(Exception):
  def __init__(self, msg = "The specified option has a different type from that of the option argument provided."):
    self.message = msg

class SpudRankError(Exception):
  def __init__(self, msg = "The specified option has a different rank from that of the option argument provided."):
    self.message = msg

class SpudShapeError(Exception):
  def __init__(self, msg = "The specified option has a different shape from that of the option argument provided."):
    self.message = msg

class SpudNewKeyWarning(Exception):
  def __init__(self, msg = "The option being inserted is not already in the dictionary."):
    self.message = msg
  
class SpudAttrSetFailedWarning(Exception):
  def __init__(self, msg = "The option being set as an attribute can not be set as an attribute."):
    self.message = msg
  
spud_exceptions = {SPUD_KEY_ERROR: SpudKeyError,
                   SPUD_TYPE_ERROR: SpudTypeError,
                   SPUD_RANK_ERROR: SpudRankError,
                   SPUD_SHAPE_ERROR: SpudShapeError,
                   SPUD_NEW_KEY_WARNING: SpudNewKeyWarning,
                   SPUD_ATTR_SET_FAILED_WARNING: SpudAttrSetFailedWarning}

libspud = cdll.LoadLibrary('@prefix@'  + '/lib/libspud.so')

cclear_options = libspud.spud_clear_options
cclear_options.argtypes = []
cclear_options.restype = None

def clear_options():
  cclear_options()

cload_options = libspud.spud_load_options
cload_options.argtypes = [c_char_p, c_int]
cload_options.restype = c_int

def load_options(s):
  out = cload_options(s, c_int(len(s)))
  if out != SPUD_NO_ERROR:
    raise spud_exceptions[out]

cwrite_options = libspud.spud_write_options
cwrite_options.argtypes = [c_char_p, c_int]
cwrite_options.restype = c_int

def write_options(filename):
  out = cwrite_options(filename, c_int(len(filename)))
  if out != SPUD_NO_ERROR:
    raise spud_exceptions[out]

cget_child_name = libspud.spud_get_child_name
cget_child_name.argtypes = [c_char_p, c_int, c_int, c_char_p, c_int]
cget_child_name.restype = c_int

def get_child_name(s, idx):
  val = create_string_buffer(OPTION_PATH_LEN)
  out = cget_child_name(s, c_int(len(s)), c_int(idx), val, c_int(len(val)))
  
  if out != SPUD_NO_ERROR:
    raise spud_exceptions[out]
    
  return val.value.strip()
  
cget_number_of_children = libspud.spud_get_number_of_children
cget_number_of_children.argtypes = [c_char_p, c_int, POINTER(c_int)]
cget_number_of_children.restype = c_int

def get_number_of_children(s):
  val = c_int()
  out = cget_number_of_children(s, c_int(len(s)), byref(val))
  
  if out != SPUD_NO_ERROR:
    raise spud_exceptions[out]
  
  return val.value
    
coption_count = libspud.spud_option_count
coption_count.argtypes = [c_char_p, c_int]
coption_count.restype = c_int

def option_count(s):
  return coption_count(s, c_int(len(s)))
   
chave_option = libspud.spud_have_option
chave_option.argtypes = [c_char_p, c_int]
chave_option.restype = c_int

def have_option(s):
  out = chave_option(s, c_int(len(s)))
  
  if out == 1:
    return True
  else:
    return False

cget_option_type = libspud.spud_get_option_type
cget_option_type.argtypes = [c_char_p, c_int, POINTER(c_int)]
cget_option_type.restype = c_int

def get_option_type(s):
  val = c_int()
  out = cget_option_type(s, c_int(len(s)), byref(val))

  if out != SPUD_NO_ERROR:
    raise spud_exceptions[out]

  return pytype_map[val.value]
  
cget_option_rank = libspud.spud_get_option_rank
cget_option_rank.argtypes = [c_char_p, c_int, POINTER(c_int)]
cget_option_rank.restype = c_int

def get_option_rank(s):
  rank = c_int()
  out = cget_option_rank(s, c_int(len(s)), byref(rank))
  if out != SPUD_NO_ERROR:
    raise spud_exceptions[out]
  return rank.value
  
cget_option_shape = libspud.spud_get_option_shape
cget_option_shape.argtypes = [c_char_p, c_int, POINTER(c_int)]
cget_option_shape.restype = int

def get_option_shape(s):
  shape_type = c_int * 2
  shape = shape_type()
  out = cget_option_shape(s, c_int(len(s)), shape)

  if out != SPUD_NO_ERROR:
    raise spud_exceptions[out]

  return tuple(shape)

cget_option = libspud.spud_get_option
cget_option.argtypes = [c_char_p, c_int, c_void_p]
cget_option.restype = c_int

def get_option(s):
  type = get_option_type(s)
  rank=0
  if type is str:
    strlen = get_option_shape(s)[0]
    val = create_string_buffer(strlen+1)
  elif type is None:
    raise spud_exceptions[SPUD_TYPE_ERROR]("No value exists at the given path")
  else:
    val_type = ctype_map[type]
    rank = get_option_rank(s)
    shape = get_option_shape(s)
    # reverse the numbering so we get a rowxcolumn list of lists
    for i in range(rank-1, -1, -1): val_type = val_type*shape[i]
    val = val_type()

  out = cget_option(s, c_int(len(s)), byref(val))
  if out != SPUD_NO_ERROR:
    raise spud_exceptions[out]

  if rank==2:
    val_out = [[val[i][j] for j in range(shape[1])] for i in range(shape[0])]
  elif rank==1:
    val_out = [val[i] for i in range(shape[0])]
  else:
    val_out = val.value
  return val_out

cadd_option = libspud.spud_add_option
cadd_option.argtypes = [c_char_p, c_int]
cadd_option.restype = c_int

def add_option(s):
  out = cadd_option(s, c_int(len(s)))

  if out != SPUD_NO_ERROR:
    raise spud_exceptions[out]

  return

cset_option = libspud.spud_set_option
cset_option.argtypes = [c_char_p, c_int, c_void_p, c_int, c_int, POINTER(c_int)]
cset_option.restype = c_int

def set_option(s, val):
  rank = 0
  shape_type = c_int * 2
  shape = shape_type(1, -1)
  py_type = type(val)
  if py_type not in typepy_map:
    if py_type == list:
      subval = val
      for i in range(2):
        if type(subval) == list:
          shape[i] = len(subval)
          rank += 1
          subval = subval[0]
        else:
          break 
      py_type = type(subval)
    # elif ...
      # could put numpy array handling in here 
      # (they'd be easier but didn't want to
      #  add a numpy dependency)
    else:
      raise spud_exceptions[SPUD_TYPE_ERROR]("Unknown value type.  Only know about floats, ints, strings and lists thereof.")
  spud_code = typepy_map[py_type]
  c_type = ctype_map[py_type]
  # reverse the order of the shape entries as that way we end up with a rows x columns c_type
  for i in range(rank-1, -1, -1): c_type = c_type*shape[i]
  if rank == 2:
    c_val = c_type()
    for i in range(shape[0]):
      for j in range(shape[1]):
        c_val[i][j] = val[i][j]
  elif rank == 1:
    c_val = c_type()
    for i in range(shape[0]):
      c_val[i] = val[i]
  else:
    c_val = c_type(val)

  if py_type is str:
    shape = shape_type(len(val), -1)
    rank = 1
    out = cset_option(s, c_int(len(s)), (c_val), c_int(spud_code), c_int(rank), shape)
  else:
    out = cset_option(s, c_int(len(s)), byref(c_val), c_int(spud_code), c_int(rank), shape)

  if out != SPUD_NO_ERROR:
    raise spud_exceptions[out]
    
cset_option_attribute = libspud.spud_set_option_attribute
cset_option_attribute.argtypes = [c_char_p, c_int, c_char_p, c_int]
cset_option_attribute.restype = c_int

def set_option_attribute(s, val):
  out = cset_option_attribute(s, c_int(len(s)), val, c_int(len(val)))
  
  if out != SPUD_NO_ERROR:
    raise spud_exceptions[out]

  return
  
cdelete_option = libspud.spud_delete_option
cdelete_option.argtypes = [c_char_p, c_int]
cdelete_option.restype = c_int

def delete_option(s):
  out = cdelete_option(s, c_int(len(s)))
  
  if out != SPUD_NO_ERROR:
    raise spud_exceptions[out]

  return

cmove_option = libspud.spud_move_option
cmove_option.argtypes = [c_char_p, c_int, c_char_p, c_int]
cmove_option.restype = c_int

def move_option(s1, s2):
  out = cmove_option(s1, c_int(len(s1)), s2, c_int(len(s2)))
  
  if out != SPUD_NO_ERROR:
    raise spud_exceptions[out]

  return

cprint_options = libspud.spud_print_options
cprint_options.restype = None
cprint_options.argtypes = []

def print_options():
  cprint_options()
